[2023-05-24T11:36:13.918] [DEBUG] debug - [
  'Executing (35e70e24-1133-4571-bb6c-4bbe7675db2d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'dNEqfiUAyTnNk5akeTIL', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35e70e24-1133-4571-bb6c-4bbe7675db2d',
      connection: [Client]
    }
  }
]
[2023-05-24T11:36:13.921] [DEBUG] debug - [
  'Executing (d68b4afb-cc2f-41c0-9da0-2296618689fa): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd68b4afb-cc2f-41c0-9da0-2296618689fa',
      connection: [Client]
    }
  }
]
[2023-05-24T11:36:14.005] [DEBUG] debug - [
  `Executing (35e70e24-1133-4571-bb6c-4bbe7675db2d): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35e70e24-1133-4571-bb6c-4bbe7675db2d',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'dNEqfiUAyTnNk5akeTIL', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:36:14.008] [DEBUG] debug - [
  `Executing (d68b4afb-cc2f-41c0-9da0-2296618689fa): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd68b4afb-cc2f-41c0-9da0-2296618689fa',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:36:14.094] [DEBUG] debug - [
  'Executing (35e70e24-1133-4571-bb6c-4bbe7675db2d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'dNEqfiUAyTnNk5akeTIL', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35e70e24-1133-4571-bb6c-4bbe7675db2d',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:36:14.097] [DEBUG] debug - [
  'Executing (d68b4afb-cc2f-41c0-9da0-2296618689fa): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd68b4afb-cc2f-41c0-9da0-2296618689fa',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:44:30.173] [DEBUG] debug - [
  'Executing (d8a4afde-5b81-4c5c-a57d-b9807f8358eb): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'fyrbwXf3ix0Vbz8gJJIN', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd8a4afde-5b81-4c5c-a57d-b9807f8358eb',
      connection: [Client]
    }
  }
]
[2023-05-24T11:44:30.180] [DEBUG] debug - [
  'Executing (874f5e4f-4baa-40ef-b7d3-eb373092c754): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '874f5e4f-4baa-40ef-b7d3-eb373092c754',
      connection: [Client]
    }
  }
]
[2023-05-24T11:44:30.256] [DEBUG] debug - [
  `Executing (d8a4afde-5b81-4c5c-a57d-b9807f8358eb): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd8a4afde-5b81-4c5c-a57d-b9807f8358eb',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'fyrbwXf3ix0Vbz8gJJIN', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:44:30.270] [DEBUG] debug - [
  `Executing (874f5e4f-4baa-40ef-b7d3-eb373092c754): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '874f5e4f-4baa-40ef-b7d3-eb373092c754',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:44:30.358] [DEBUG] debug - [
  'Executing (d8a4afde-5b81-4c5c-a57d-b9807f8358eb): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'fyrbwXf3ix0Vbz8gJJIN', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd8a4afde-5b81-4c5c-a57d-b9807f8358eb',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:44:30.360] [DEBUG] debug - [
  'Executing (874f5e4f-4baa-40ef-b7d3-eb373092c754): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '874f5e4f-4baa-40ef-b7d3-eb373092c754',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:45:49.628] [DEBUG] debug - [
  'Executing (35b00c08-1baf-4ffa-863e-bb42047c57dc): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '6LdvYUUIMDlHCoGvlT1Q', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35b00c08-1baf-4ffa-863e-bb42047c57dc',
      connection: [Client]
    }
  }
]
[2023-05-24T11:45:49.630] [DEBUG] debug - [
  'Executing (ab73bbd1-0c35-4bf8-93df-5497be1043ff): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab73bbd1-0c35-4bf8-93df-5497be1043ff',
      connection: [Client]
    }
  }
]
[2023-05-24T11:45:49.724] [DEBUG] debug - [
  `Executing (35b00c08-1baf-4ffa-863e-bb42047c57dc): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35b00c08-1baf-4ffa-863e-bb42047c57dc',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '6LdvYUUIMDlHCoGvlT1Q', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:45:49.730] [DEBUG] debug - [
  `Executing (ab73bbd1-0c35-4bf8-93df-5497be1043ff): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab73bbd1-0c35-4bf8-93df-5497be1043ff',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:45:49.828] [DEBUG] debug - [
  'Executing (35b00c08-1baf-4ffa-863e-bb42047c57dc): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '6LdvYUUIMDlHCoGvlT1Q', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35b00c08-1baf-4ffa-863e-bb42047c57dc',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:45:49.831] [DEBUG] debug - [
  'Executing (ab73bbd1-0c35-4bf8-93df-5497be1043ff): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab73bbd1-0c35-4bf8-93df-5497be1043ff',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:47:00.529] [DEBUG] debug - [
  'Executing (f91f8ba3-3444-4a51-a1ee-452a2b3bb272): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'j3H4L4SgzwSKYOcNfWZO', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f91f8ba3-3444-4a51-a1ee-452a2b3bb272',
      connection: [Client]
    }
  }
]
[2023-05-24T11:47:00.532] [DEBUG] debug - [
  'Executing (35087ee1-2fee-4471-be78-41bcb26e90df): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35087ee1-2fee-4471-be78-41bcb26e90df',
      connection: [Client]
    }
  }
]
[2023-05-24T11:47:00.628] [DEBUG] debug - [
  `Executing (f91f8ba3-3444-4a51-a1ee-452a2b3bb272): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f91f8ba3-3444-4a51-a1ee-452a2b3bb272',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'j3H4L4SgzwSKYOcNfWZO', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:47:00.635] [DEBUG] debug - [
  `Executing (35087ee1-2fee-4471-be78-41bcb26e90df): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35087ee1-2fee-4471-be78-41bcb26e90df',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:47:00.737] [DEBUG] debug - [
  'Executing (f91f8ba3-3444-4a51-a1ee-452a2b3bb272): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'j3H4L4SgzwSKYOcNfWZO', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f91f8ba3-3444-4a51-a1ee-452a2b3bb272',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:47:00.738] [DEBUG] debug - [
  'Executing (35087ee1-2fee-4471-be78-41bcb26e90df): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '35087ee1-2fee-4471-be78-41bcb26e90df',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:51:48.640] [DEBUG] debug - [
  'Executing (96ce95a6-baf8-4e8d-90ee-4cdd0cf88e4e): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'JvH3pqWO5Ly7LXZEAzZp', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '96ce95a6-baf8-4e8d-90ee-4cdd0cf88e4e',
      connection: [Client]
    }
  }
]
[2023-05-24T11:51:48.669] [DEBUG] debug - [
  'Executing (36749560-1d6a-42a5-99a9-700b82de4ad7): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '36749560-1d6a-42a5-99a9-700b82de4ad7',
      connection: [Client]
    }
  }
]
[2023-05-24T11:51:48.745] [DEBUG] debug - [
  `Executing (96ce95a6-baf8-4e8d-90ee-4cdd0cf88e4e): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '96ce95a6-baf8-4e8d-90ee-4cdd0cf88e4e',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'JvH3pqWO5Ly7LXZEAzZp', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:51:48.768] [DEBUG] debug - [
  `Executing (36749560-1d6a-42a5-99a9-700b82de4ad7): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '36749560-1d6a-42a5-99a9-700b82de4ad7',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:51:48.843] [DEBUG] debug - [
  'Executing (96ce95a6-baf8-4e8d-90ee-4cdd0cf88e4e): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'JvH3pqWO5Ly7LXZEAzZp', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '96ce95a6-baf8-4e8d-90ee-4cdd0cf88e4e',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:51:48.875] [DEBUG] debug - [
  'Executing (36749560-1d6a-42a5-99a9-700b82de4ad7): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '36749560-1d6a-42a5-99a9-700b82de4ad7',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:52:35.000] [DEBUG] debug - [
  'Executing (ecdbff8e-8b3a-4799-aca5-3e495aa9e9c8): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'aO6qBsnuuSEB09GqFXdW', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ecdbff8e-8b3a-4799-aca5-3e495aa9e9c8',
      connection: [Client]
    }
  }
]
[2023-05-24T11:52:35.010] [DEBUG] debug - [
  'Executing (91ba2491-01b2-4a99-9a52-17a9470446cf): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '91ba2491-01b2-4a99-9a52-17a9470446cf',
      connection: [Client]
    }
  }
]
[2023-05-24T11:52:35.073] [DEBUG] debug - [
  `Executing (ecdbff8e-8b3a-4799-aca5-3e495aa9e9c8): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ecdbff8e-8b3a-4799-aca5-3e495aa9e9c8',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'aO6qBsnuuSEB09GqFXdW', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:52:35.087] [DEBUG] debug - [
  `Executing (91ba2491-01b2-4a99-9a52-17a9470446cf): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '91ba2491-01b2-4a99-9a52-17a9470446cf',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:52:35.165] [DEBUG] debug - [
  'Executing (ecdbff8e-8b3a-4799-aca5-3e495aa9e9c8): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'aO6qBsnuuSEB09GqFXdW', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ecdbff8e-8b3a-4799-aca5-3e495aa9e9c8',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:52:35.170] [DEBUG] debug - [
  'Executing (91ba2491-01b2-4a99-9a52-17a9470446cf): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '91ba2491-01b2-4a99-9a52-17a9470446cf',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:52:53.171] [DEBUG] debug - [
  'Executing (d7115aa7-00e9-4d9d-930b-160de0614dc8): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'JWHmLIfunfJBjOAv2P7z', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd7115aa7-00e9-4d9d-930b-160de0614dc8',
      connection: [Client]
    }
  }
]
[2023-05-24T11:52:53.174] [DEBUG] debug - [
  'Executing (11fd7b06-1f06-45f9-9444-3a2e8e625efc): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '11fd7b06-1f06-45f9-9444-3a2e8e625efc',
      connection: [Client]
    }
  }
]
[2023-05-24T11:52:53.263] [DEBUG] debug - [
  `Executing (d7115aa7-00e9-4d9d-930b-160de0614dc8): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd7115aa7-00e9-4d9d-930b-160de0614dc8',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'JWHmLIfunfJBjOAv2P7z', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:52:53.265] [DEBUG] debug - [
  `Executing (11fd7b06-1f06-45f9-9444-3a2e8e625efc): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '11fd7b06-1f06-45f9-9444-3a2e8e625efc',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:52:53.355] [DEBUG] debug - [
  'Executing (d7115aa7-00e9-4d9d-930b-160de0614dc8): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'JWHmLIfunfJBjOAv2P7z', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd7115aa7-00e9-4d9d-930b-160de0614dc8',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:52:53.358] [DEBUG] debug - [
  'Executing (11fd7b06-1f06-45f9-9444-3a2e8e625efc): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '11fd7b06-1f06-45f9-9444-3a2e8e625efc',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:53:11.688] [DEBUG] debug - [
  'Executing (0b472bca-452a-45c3-9187-59292db17b1c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'tS6mNCpmZKCdImaQnjiY', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0b472bca-452a-45c3-9187-59292db17b1c',
      connection: [Client]
    }
  }
]
[2023-05-24T11:53:11.700] [DEBUG] debug - [
  'Executing (2eb37a99-0c15-4eaf-bdb0-5b91465c913e): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2eb37a99-0c15-4eaf-bdb0-5b91465c913e',
      connection: [Client]
    }
  }
]
[2023-05-24T11:53:11.777] [DEBUG] debug - [
  `Executing (0b472bca-452a-45c3-9187-59292db17b1c): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0b472bca-452a-45c3-9187-59292db17b1c',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'tS6mNCpmZKCdImaQnjiY', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:53:11.809] [DEBUG] debug - [
  `Executing (2eb37a99-0c15-4eaf-bdb0-5b91465c913e): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2eb37a99-0c15-4eaf-bdb0-5b91465c913e',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:53:11.874] [DEBUG] debug - [
  'Executing (0b472bca-452a-45c3-9187-59292db17b1c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'tS6mNCpmZKCdImaQnjiY', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0b472bca-452a-45c3-9187-59292db17b1c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:53:11.903] [DEBUG] debug - [
  'Executing (2eb37a99-0c15-4eaf-bdb0-5b91465c913e): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2eb37a99-0c15-4eaf-bdb0-5b91465c913e',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:53:26.403] [DEBUG] debug - [
  'Executing (293a62fb-bc38-4968-a0d8-e6011450219c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'SoB8UyWuiybIv0bYGr4C', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '293a62fb-bc38-4968-a0d8-e6011450219c',
      connection: [Client]
    }
  }
]
[2023-05-24T11:53:26.407] [DEBUG] debug - [
  'Executing (9b4bef33-2c8d-435a-bf3b-30c309717fa8): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9b4bef33-2c8d-435a-bf3b-30c309717fa8',
      connection: [Client]
    }
  }
]
[2023-05-24T11:53:26.495] [DEBUG] debug - [
  `Executing (293a62fb-bc38-4968-a0d8-e6011450219c): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '293a62fb-bc38-4968-a0d8-e6011450219c',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'SoB8UyWuiybIv0bYGr4C', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:53:26.498] [DEBUG] debug - [
  `Executing (9b4bef33-2c8d-435a-bf3b-30c309717fa8): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9b4bef33-2c8d-435a-bf3b-30c309717fa8',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:53:26.583] [DEBUG] debug - [
  'Executing (293a62fb-bc38-4968-a0d8-e6011450219c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'SoB8UyWuiybIv0bYGr4C', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '293a62fb-bc38-4968-a0d8-e6011450219c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:53:26.587] [DEBUG] debug - [
  'Executing (9b4bef33-2c8d-435a-bf3b-30c309717fa8): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9b4bef33-2c8d-435a-bf3b-30c309717fa8',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:55:20.084] [DEBUG] debug - [
  'Executing (cab8c20e-3b68-4e78-a148-722a8f4f018e): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'fzdj59iyq4llUfMm0Sui', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cab8c20e-3b68-4e78-a148-722a8f4f018e',
      connection: [Client]
    }
  }
]
[2023-05-24T11:55:20.103] [DEBUG] debug - [
  'Executing (1c16055a-ddf6-49fb-ac79-12646e1256b4): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c16055a-ddf6-49fb-ac79-12646e1256b4',
      connection: [Client]
    }
  }
]
[2023-05-24T11:55:20.183] [DEBUG] debug - [
  `Executing (cab8c20e-3b68-4e78-a148-722a8f4f018e): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cab8c20e-3b68-4e78-a148-722a8f4f018e',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'fzdj59iyq4llUfMm0Sui', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:55:20.204] [DEBUG] debug - [
  `Executing (1c16055a-ddf6-49fb-ac79-12646e1256b4): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c16055a-ddf6-49fb-ac79-12646e1256b4',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:55:20.290] [DEBUG] debug - [
  'Executing (cab8c20e-3b68-4e78-a148-722a8f4f018e): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'fzdj59iyq4llUfMm0Sui', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cab8c20e-3b68-4e78-a148-722a8f4f018e',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:55:20.302] [DEBUG] debug - [
  'Executing (1c16055a-ddf6-49fb-ac79-12646e1256b4): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c16055a-ddf6-49fb-ac79-12646e1256b4',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:55:46.352] [DEBUG] debug - [
  'Executing (b218da3b-8fe0-4253-add3-be54e79bb712): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'K1j6ccMdiauVrkLGht7r', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b218da3b-8fe0-4253-add3-be54e79bb712',
      connection: [Client]
    }
  }
]
[2023-05-24T11:55:46.364] [DEBUG] debug - [
  'Executing (4b3f6b36-0506-45f8-817e-e5aebda6b326): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4b3f6b36-0506-45f8-817e-e5aebda6b326',
      connection: [Client]
    }
  }
]
[2023-05-24T11:55:46.424] [DEBUG] debug - [
  `Executing (b218da3b-8fe0-4253-add3-be54e79bb712): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b218da3b-8fe0-4253-add3-be54e79bb712',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'K1j6ccMdiauVrkLGht7r', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:55:46.443] [DEBUG] debug - [
  `Executing (4b3f6b36-0506-45f8-817e-e5aebda6b326): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4b3f6b36-0506-45f8-817e-e5aebda6b326',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:55:46.502] [DEBUG] debug - [
  'Executing (b218da3b-8fe0-4253-add3-be54e79bb712): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'K1j6ccMdiauVrkLGht7r', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b218da3b-8fe0-4253-add3-be54e79bb712',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:55:46.521] [DEBUG] debug - [
  'Executing (4b3f6b36-0506-45f8-817e-e5aebda6b326): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4b3f6b36-0506-45f8-817e-e5aebda6b326',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:55:55.811] [DEBUG] debug - [
  'Executing (e2dcdb25-8160-411a-bd21-dbc0f99cccc6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'AfxVAMbYrqlhroRhLesn', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e2dcdb25-8160-411a-bd21-dbc0f99cccc6',
      connection: [Client]
    }
  }
]
[2023-05-24T11:55:55.816] [DEBUG] debug - [
  'Executing (b1a60219-cf99-49eb-8600-420df654fbf0): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b1a60219-cf99-49eb-8600-420df654fbf0',
      connection: [Client]
    }
  }
]
[2023-05-24T11:55:55.898] [DEBUG] debug - [
  `Executing (e2dcdb25-8160-411a-bd21-dbc0f99cccc6): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e2dcdb25-8160-411a-bd21-dbc0f99cccc6',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'AfxVAMbYrqlhroRhLesn', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:55:55.908] [DEBUG] debug - [
  `Executing (b1a60219-cf99-49eb-8600-420df654fbf0): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b1a60219-cf99-49eb-8600-420df654fbf0',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:55:55.985] [DEBUG] debug - [
  'Executing (e2dcdb25-8160-411a-bd21-dbc0f99cccc6): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'AfxVAMbYrqlhroRhLesn', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e2dcdb25-8160-411a-bd21-dbc0f99cccc6',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:55:55.993] [DEBUG] debug - [
  'Executing (b1a60219-cf99-49eb-8600-420df654fbf0): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b1a60219-cf99-49eb-8600-420df654fbf0',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:56:28.425] [DEBUG] debug - [
  'Executing (56b800b2-dab2-47ec-a135-aae19ca05203): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'hCuRWIVnM4GCE7ZANC9i', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '56b800b2-dab2-47ec-a135-aae19ca05203',
      connection: [Client]
    }
  }
]
[2023-05-24T11:56:28.431] [DEBUG] debug - [
  'Executing (2e66cc00-c26b-4613-928c-4b75e6403776): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2e66cc00-c26b-4613-928c-4b75e6403776',
      connection: [Client]
    }
  }
]
[2023-05-24T11:56:28.543] [DEBUG] debug - [
  `Executing (56b800b2-dab2-47ec-a135-aae19ca05203): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '56b800b2-dab2-47ec-a135-aae19ca05203',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'hCuRWIVnM4GCE7ZANC9i', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:56:28.545] [DEBUG] debug - [
  `Executing (2e66cc00-c26b-4613-928c-4b75e6403776): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2e66cc00-c26b-4613-928c-4b75e6403776',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:56:28.646] [DEBUG] debug - [
  'Executing (56b800b2-dab2-47ec-a135-aae19ca05203): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'hCuRWIVnM4GCE7ZANC9i', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '56b800b2-dab2-47ec-a135-aae19ca05203',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:56:28.649] [DEBUG] debug - [
  'Executing (2e66cc00-c26b-4613-928c-4b75e6403776): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2e66cc00-c26b-4613-928c-4b75e6403776',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:56:39.369] [DEBUG] debug - [
  'Executing (70a093f4-f5dc-40be-8ce4-3e8859242380): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '5Z48ZaaVkYFMawGrBbxV', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '70a093f4-f5dc-40be-8ce4-3e8859242380',
      connection: [Client]
    }
  }
]
[2023-05-24T11:56:39.373] [DEBUG] debug - [
  'Executing (db9a3449-8198-4c2a-9d03-58f0174f84db): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'db9a3449-8198-4c2a-9d03-58f0174f84db',
      connection: [Client]
    }
  }
]
[2023-05-24T11:56:39.444] [DEBUG] debug - [
  `Executing (70a093f4-f5dc-40be-8ce4-3e8859242380): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '70a093f4-f5dc-40be-8ce4-3e8859242380',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '5Z48ZaaVkYFMawGrBbxV', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:56:39.454] [DEBUG] debug - [
  `Executing (db9a3449-8198-4c2a-9d03-58f0174f84db): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'db9a3449-8198-4c2a-9d03-58f0174f84db',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:56:39.518] [DEBUG] debug - [
  'Executing (70a093f4-f5dc-40be-8ce4-3e8859242380): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '5Z48ZaaVkYFMawGrBbxV', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '70a093f4-f5dc-40be-8ce4-3e8859242380',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:56:39.532] [DEBUG] debug - [
  'Executing (db9a3449-8198-4c2a-9d03-58f0174f84db): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'db9a3449-8198-4c2a-9d03-58f0174f84db',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:56:48.040] [DEBUG] debug - [
  'Executing (8b609ea1-a112-4184-846c-4a446b8a5fc3): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'qTkC4ThR47WFMwsja7TA', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '8b609ea1-a112-4184-846c-4a446b8a5fc3',
      connection: [Client]
    }
  }
]
[2023-05-24T11:56:48.044] [DEBUG] debug - [
  'Executing (ef5f97aa-91a8-4e0c-bae5-0b3ee945e084): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ef5f97aa-91a8-4e0c-bae5-0b3ee945e084',
      connection: [Client]
    }
  }
]
[2023-05-24T11:56:48.125] [DEBUG] debug - [
  `Executing (8b609ea1-a112-4184-846c-4a446b8a5fc3): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '8b609ea1-a112-4184-846c-4a446b8a5fc3',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'qTkC4ThR47WFMwsja7TA', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:56:48.131] [DEBUG] debug - [
  `Executing (ef5f97aa-91a8-4e0c-bae5-0b3ee945e084): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ef5f97aa-91a8-4e0c-bae5-0b3ee945e084',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:56:48.214] [DEBUG] debug - [
  'Executing (8b609ea1-a112-4184-846c-4a446b8a5fc3): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'qTkC4ThR47WFMwsja7TA', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '8b609ea1-a112-4184-846c-4a446b8a5fc3',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:56:48.219] [DEBUG] debug - [
  'Executing (ef5f97aa-91a8-4e0c-bae5-0b3ee945e084): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ef5f97aa-91a8-4e0c-bae5-0b3ee945e084',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:57:18.263] [DEBUG] debug - [
  'Executing (be854512-ee08-4d19-8bde-72a8a6a9357f): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'MDyL6e6DL8RujTLRAHPt', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'be854512-ee08-4d19-8bde-72a8a6a9357f',
      connection: [Client]
    }
  }
]
[2023-05-24T11:57:18.271] [DEBUG] debug - [
  'Executing (d322a836-86f8-4edf-ad20-ea2726c4322c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd322a836-86f8-4edf-ad20-ea2726c4322c',
      connection: [Client]
    }
  }
]
[2023-05-24T11:57:18.363] [DEBUG] debug - [
  `Executing (be854512-ee08-4d19-8bde-72a8a6a9357f): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'be854512-ee08-4d19-8bde-72a8a6a9357f',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'MDyL6e6DL8RujTLRAHPt', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T11:57:18.376] [DEBUG] debug - [
  `Executing (d322a836-86f8-4edf-ad20-ea2726c4322c): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd322a836-86f8-4edf-ad20-ea2726c4322c',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T11:57:18.456] [DEBUG] debug - [
  'Executing (be854512-ee08-4d19-8bde-72a8a6a9357f): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'MDyL6e6DL8RujTLRAHPt', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'be854512-ee08-4d19-8bde-72a8a6a9357f',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T11:57:18.473] [DEBUG] debug - [
  'Executing (d322a836-86f8-4edf-ad20-ea2726c4322c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd322a836-86f8-4edf-ad20-ea2726c4322c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:01:33.960] [DEBUG] debug - [
  'Executing (92235af1-f50f-4f0b-a7ce-1d03cc99e626): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '53hzkSRS6yx2ZHvOdjkj', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '92235af1-f50f-4f0b-a7ce-1d03cc99e626',
      connection: [Client]
    }
  }
]
[2023-05-24T12:01:33.964] [DEBUG] debug - [
  'Executing (fbdbbc6b-2c4e-437b-ae95-1ddbd581831d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'fbdbbc6b-2c4e-437b-ae95-1ddbd581831d',
      connection: [Client]
    }
  }
]
[2023-05-24T12:01:34.038] [DEBUG] debug - [
  `Executing (92235af1-f50f-4f0b-a7ce-1d03cc99e626): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '92235af1-f50f-4f0b-a7ce-1d03cc99e626',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '53hzkSRS6yx2ZHvOdjkj', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:01:34.047] [DEBUG] debug - [
  `Executing (fbdbbc6b-2c4e-437b-ae95-1ddbd581831d): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'fbdbbc6b-2c4e-437b-ae95-1ddbd581831d',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:01:34.130] [DEBUG] debug - [
  'Executing (92235af1-f50f-4f0b-a7ce-1d03cc99e626): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '53hzkSRS6yx2ZHvOdjkj', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '92235af1-f50f-4f0b-a7ce-1d03cc99e626',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:01:34.133] [DEBUG] debug - [
  'Executing (fbdbbc6b-2c4e-437b-ae95-1ddbd581831d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'fbdbbc6b-2c4e-437b-ae95-1ddbd581831d',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:04:41.563] [DEBUG] debug - [
  'Executing (82cc393c-48bb-4ce1-8748-05a58ab7e534): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'tQWqJCO00W5sKKSc9kux', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '82cc393c-48bb-4ce1-8748-05a58ab7e534',
      connection: [Client]
    }
  }
]
[2023-05-24T12:04:41.577] [DEBUG] debug - [
  'Executing (4dc1f737-2b1e-46ae-8705-f2b21fa084a9): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4dc1f737-2b1e-46ae-8705-f2b21fa084a9',
      connection: [Client]
    }
  }
]
[2023-05-24T12:04:41.645] [DEBUG] debug - [
  `Executing (82cc393c-48bb-4ce1-8748-05a58ab7e534): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '82cc393c-48bb-4ce1-8748-05a58ab7e534',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'tQWqJCO00W5sKKSc9kux', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:04:41.669] [DEBUG] debug - [
  `Executing (4dc1f737-2b1e-46ae-8705-f2b21fa084a9): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4dc1f737-2b1e-46ae-8705-f2b21fa084a9',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:04:41.726] [DEBUG] debug - [
  'Executing (82cc393c-48bb-4ce1-8748-05a58ab7e534): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'tQWqJCO00W5sKKSc9kux', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '82cc393c-48bb-4ce1-8748-05a58ab7e534',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:04:41.768] [DEBUG] debug - [
  'Executing (4dc1f737-2b1e-46ae-8705-f2b21fa084a9): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4dc1f737-2b1e-46ae-8705-f2b21fa084a9',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:07:52.399] [DEBUG] debug - [
  'Executing (d9792321-5685-4788-b3d6-c20d74795691): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'N9oIRC2Uy835gvra8DDo', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd9792321-5685-4788-b3d6-c20d74795691',
      connection: [Client]
    }
  }
]
[2023-05-24T12:07:52.408] [DEBUG] debug - [
  'Executing (193f6341-6122-4c9e-a996-a6666c4282d2): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '193f6341-6122-4c9e-a996-a6666c4282d2',
      connection: [Client]
    }
  }
]
[2023-05-24T12:07:52.489] [DEBUG] debug - [
  `Executing (d9792321-5685-4788-b3d6-c20d74795691): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd9792321-5685-4788-b3d6-c20d74795691',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'N9oIRC2Uy835gvra8DDo', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:07:52.500] [DEBUG] debug - [
  `Executing (193f6341-6122-4c9e-a996-a6666c4282d2): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '193f6341-6122-4c9e-a996-a6666c4282d2',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:07:52.571] [DEBUG] debug - [
  'Executing (d9792321-5685-4788-b3d6-c20d74795691): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'N9oIRC2Uy835gvra8DDo', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd9792321-5685-4788-b3d6-c20d74795691',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:07:52.585] [DEBUG] debug - [
  'Executing (193f6341-6122-4c9e-a996-a6666c4282d2): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '193f6341-6122-4c9e-a996-a6666c4282d2',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:08:44.439] [DEBUG] debug - [
  'Executing (06885fbb-cbae-443a-9539-6b1f6e95b3b3): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '1a1IHkX8xlbaY1vrc4cu', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '06885fbb-cbae-443a-9539-6b1f6e95b3b3',
      connection: [Client]
    }
  }
]
[2023-05-24T12:08:44.444] [DEBUG] debug - [
  'Executing (37c3d526-9ae1-4c09-9ae7-bdf429752ab9): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '37c3d526-9ae1-4c09-9ae7-bdf429752ab9',
      connection: [Client]
    }
  }
]
[2023-05-24T12:08:44.541] [DEBUG] debug - [
  `Executing (06885fbb-cbae-443a-9539-6b1f6e95b3b3): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '06885fbb-cbae-443a-9539-6b1f6e95b3b3',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '1a1IHkX8xlbaY1vrc4cu', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:08:44.543] [DEBUG] debug - [
  `Executing (37c3d526-9ae1-4c09-9ae7-bdf429752ab9): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '37c3d526-9ae1-4c09-9ae7-bdf429752ab9',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:08:44.648] [DEBUG] debug - [
  'Executing (06885fbb-cbae-443a-9539-6b1f6e95b3b3): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '1a1IHkX8xlbaY1vrc4cu', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '06885fbb-cbae-443a-9539-6b1f6e95b3b3',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:08:44.650] [DEBUG] debug - [
  'Executing (37c3d526-9ae1-4c09-9ae7-bdf429752ab9): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '37c3d526-9ae1-4c09-9ae7-bdf429752ab9',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:09:24.865] [DEBUG] debug - [
  'Executing (115aeee2-fc19-4f1d-bd17-096a892dc5a4): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '2dYw6ybBF4cUB2qXTha0', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '115aeee2-fc19-4f1d-bd17-096a892dc5a4',
      connection: [Client]
    }
  }
]
[2023-05-24T12:09:24.873] [DEBUG] debug - [
  'Executing (e438aa55-ae72-4170-b020-a0a0637e3f9c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e438aa55-ae72-4170-b020-a0a0637e3f9c',
      connection: [Client]
    }
  }
]
[2023-05-24T12:09:24.946] [DEBUG] debug - [
  `Executing (115aeee2-fc19-4f1d-bd17-096a892dc5a4): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '115aeee2-fc19-4f1d-bd17-096a892dc5a4',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '2dYw6ybBF4cUB2qXTha0', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:09:24.964] [DEBUG] debug - [
  `Executing (e438aa55-ae72-4170-b020-a0a0637e3f9c): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e438aa55-ae72-4170-b020-a0a0637e3f9c',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:09:25.032] [DEBUG] debug - [
  'Executing (115aeee2-fc19-4f1d-bd17-096a892dc5a4): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '2dYw6ybBF4cUB2qXTha0', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '115aeee2-fc19-4f1d-bd17-096a892dc5a4',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:09:25.050] [DEBUG] debug - [
  'Executing (e438aa55-ae72-4170-b020-a0a0637e3f9c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e438aa55-ae72-4170-b020-a0a0637e3f9c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:10:54.800] [DEBUG] debug - [
  'Executing (784c79b2-955b-420c-933b-8471a1d733a1): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'nUlyVr1GI3IbogQXHuRZ', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '784c79b2-955b-420c-933b-8471a1d733a1',
      connection: [Client]
    }
  }
]
[2023-05-24T12:10:54.810] [DEBUG] debug - [
  'Executing (51565758-a7d2-4a5a-8bcd-ea304ea5daf6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '51565758-a7d2-4a5a-8bcd-ea304ea5daf6',
      connection: [Client]
    }
  }
]
[2023-05-24T12:10:54.883] [DEBUG] debug - [
  `Executing (784c79b2-955b-420c-933b-8471a1d733a1): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '784c79b2-955b-420c-933b-8471a1d733a1',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'nUlyVr1GI3IbogQXHuRZ', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:10:54.890] [DEBUG] debug - [
  `Executing (51565758-a7d2-4a5a-8bcd-ea304ea5daf6): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '51565758-a7d2-4a5a-8bcd-ea304ea5daf6',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:10:54.971] [DEBUG] debug - [
  'Executing (784c79b2-955b-420c-933b-8471a1d733a1): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'nUlyVr1GI3IbogQXHuRZ', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '784c79b2-955b-420c-933b-8471a1d733a1',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:10:54.973] [DEBUG] debug - [
  'Executing (51565758-a7d2-4a5a-8bcd-ea304ea5daf6): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '51565758-a7d2-4a5a-8bcd-ea304ea5daf6',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:12:43.476] [DEBUG] debug - [
  'Executing (53b85e1c-d74f-4ea3-8a2f-d54013168d2b): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'xwb61xcu6pjnw83l7b1x', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '53b85e1c-d74f-4ea3-8a2f-d54013168d2b',
      connection: [Client]
    }
  }
]
[2023-05-24T12:12:43.479] [DEBUG] debug - [
  'Executing (9a992493-ec2a-427b-a7fd-f18233c44cee): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9a992493-ec2a-427b-a7fd-f18233c44cee',
      connection: [Client]
    }
  }
]
[2023-05-24T12:12:43.555] [DEBUG] debug - [
  `Executing (53b85e1c-d74f-4ea3-8a2f-d54013168d2b): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '53b85e1c-d74f-4ea3-8a2f-d54013168d2b',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'xwb61xcu6pjnw83l7b1x', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:12:43.565] [DEBUG] debug - [
  `Executing (9a992493-ec2a-427b-a7fd-f18233c44cee): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9a992493-ec2a-427b-a7fd-f18233c44cee',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:12:43.636] [DEBUG] debug - [
  'Executing (53b85e1c-d74f-4ea3-8a2f-d54013168d2b): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'xwb61xcu6pjnw83l7b1x', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '53b85e1c-d74f-4ea3-8a2f-d54013168d2b',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:12:43.649] [DEBUG] debug - [
  'Executing (9a992493-ec2a-427b-a7fd-f18233c44cee): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9a992493-ec2a-427b-a7fd-f18233c44cee',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:13:05.787] [DEBUG] debug - [
  'Executing (93cb4509-52fe-4c4c-8889-f090609b1c8a): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'FPN0xF528hpG1qXCOLo7', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '93cb4509-52fe-4c4c-8889-f090609b1c8a',
      connection: [Client]
    }
  }
]
[2023-05-24T12:13:05.790] [DEBUG] debug - [
  'Executing (4f517760-2204-4c4e-95d5-7de80dbcf09c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4f517760-2204-4c4e-95d5-7de80dbcf09c',
      connection: [Client]
    }
  }
]
[2023-05-24T12:13:05.884] [DEBUG] debug - [
  `Executing (93cb4509-52fe-4c4c-8889-f090609b1c8a): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '93cb4509-52fe-4c4c-8889-f090609b1c8a',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'FPN0xF528hpG1qXCOLo7', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:13:05.893] [DEBUG] debug - [
  `Executing (4f517760-2204-4c4e-95d5-7de80dbcf09c): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4f517760-2204-4c4e-95d5-7de80dbcf09c',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:13:05.984] [DEBUG] debug - [
  'Executing (93cb4509-52fe-4c4c-8889-f090609b1c8a): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'FPN0xF528hpG1qXCOLo7', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '93cb4509-52fe-4c4c-8889-f090609b1c8a',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:13:05.993] [DEBUG] debug - [
  'Executing (4f517760-2204-4c4e-95d5-7de80dbcf09c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4f517760-2204-4c4e-95d5-7de80dbcf09c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:13:26.772] [DEBUG] debug - [
  'Executing (1c752cea-efea-4fac-8d5d-2d78cb9821b9): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'gi0FRe4FLAfK8hx12zkq', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c752cea-efea-4fac-8d5d-2d78cb9821b9',
      connection: [Client]
    }
  }
]
[2023-05-24T12:13:26.775] [DEBUG] debug - [
  'Executing (4da4f2b6-a124-43ff-8416-10814c50985d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4da4f2b6-a124-43ff-8416-10814c50985d',
      connection: [Client]
    }
  }
]
[2023-05-24T12:13:26.866] [DEBUG] debug - [
  `Executing (1c752cea-efea-4fac-8d5d-2d78cb9821b9): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c752cea-efea-4fac-8d5d-2d78cb9821b9',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'gi0FRe4FLAfK8hx12zkq', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:13:26.872] [DEBUG] debug - [
  `Executing (4da4f2b6-a124-43ff-8416-10814c50985d): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4da4f2b6-a124-43ff-8416-10814c50985d',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:13:26.957] [DEBUG] debug - [
  'Executing (1c752cea-efea-4fac-8d5d-2d78cb9821b9): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'gi0FRe4FLAfK8hx12zkq', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1c752cea-efea-4fac-8d5d-2d78cb9821b9',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:13:26.963] [DEBUG] debug - [
  'Executing (4da4f2b6-a124-43ff-8416-10814c50985d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4da4f2b6-a124-43ff-8416-10814c50985d',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:17:35.109] [DEBUG] debug - [
  'Executing (a8a0c62c-ce24-4fdf-8a88-8b719abb6f07): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Z2kpximTRqczKegplXVb', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a8a0c62c-ce24-4fdf-8a88-8b719abb6f07',
      connection: [Client]
    }
  }
]
[2023-05-24T12:17:35.113] [DEBUG] debug - [
  'Executing (453abbb3-0fbc-4266-9375-c660afe62574): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '453abbb3-0fbc-4266-9375-c660afe62574',
      connection: [Client]
    }
  }
]
[2023-05-24T12:17:35.184] [DEBUG] debug - [
  `Executing (a8a0c62c-ce24-4fdf-8a88-8b719abb6f07): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a8a0c62c-ce24-4fdf-8a88-8b719abb6f07',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'Z2kpximTRqczKegplXVb', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:17:35.190] [DEBUG] debug - [
  `Executing (453abbb3-0fbc-4266-9375-c660afe62574): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '453abbb3-0fbc-4266-9375-c660afe62574',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:17:35.266] [DEBUG] debug - [
  'Executing (a8a0c62c-ce24-4fdf-8a88-8b719abb6f07): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Z2kpximTRqczKegplXVb', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a8a0c62c-ce24-4fdf-8a88-8b719abb6f07',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:17:35.273] [DEBUG] debug - [
  'Executing (453abbb3-0fbc-4266-9375-c660afe62574): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '453abbb3-0fbc-4266-9375-c660afe62574',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:19:29.031] [DEBUG] debug - [
  'Executing (224a8a98-c353-42c5-9f63-7cd69aea63d4): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'oXpNtEi5n73Ci2aMjjsD', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '224a8a98-c353-42c5-9f63-7cd69aea63d4',
      connection: [Client]
    }
  }
]
[2023-05-24T12:19:29.035] [DEBUG] debug - [
  'Executing (36b8121d-aedf-451f-ad3b-0ff980868202): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '36b8121d-aedf-451f-ad3b-0ff980868202',
      connection: [Client]
    }
  }
]
[2023-05-24T12:19:29.114] [DEBUG] debug - [
  `Executing (224a8a98-c353-42c5-9f63-7cd69aea63d4): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '224a8a98-c353-42c5-9f63-7cd69aea63d4',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'oXpNtEi5n73Ci2aMjjsD', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:19:29.117] [DEBUG] debug - [
  `Executing (36b8121d-aedf-451f-ad3b-0ff980868202): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '36b8121d-aedf-451f-ad3b-0ff980868202',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:19:29.211] [DEBUG] debug - [
  'Executing (224a8a98-c353-42c5-9f63-7cd69aea63d4): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'oXpNtEi5n73Ci2aMjjsD', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '224a8a98-c353-42c5-9f63-7cd69aea63d4',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:19:29.213] [DEBUG] debug - [
  'Executing (36b8121d-aedf-451f-ad3b-0ff980868202): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '36b8121d-aedf-451f-ad3b-0ff980868202',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:19:51.875] [DEBUG] debug - [
  'Executing (4e0b1176-1d1c-4670-9de7-5cb43425eab5): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'UfWVNovrddpxFx62Xdob', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4e0b1176-1d1c-4670-9de7-5cb43425eab5',
      connection: [Client]
    }
  }
]
[2023-05-24T12:19:51.879] [DEBUG] debug - [
  'Executing (d4326128-a6e3-44e6-a4a7-332387e3ccb7): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd4326128-a6e3-44e6-a4a7-332387e3ccb7',
      connection: [Client]
    }
  }
]
[2023-05-24T12:19:51.955] [DEBUG] debug - [
  `Executing (4e0b1176-1d1c-4670-9de7-5cb43425eab5): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4e0b1176-1d1c-4670-9de7-5cb43425eab5',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'UfWVNovrddpxFx62Xdob', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:19:51.962] [DEBUG] debug - [
  `Executing (d4326128-a6e3-44e6-a4a7-332387e3ccb7): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd4326128-a6e3-44e6-a4a7-332387e3ccb7',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:19:52.044] [DEBUG] debug - [
  'Executing (4e0b1176-1d1c-4670-9de7-5cb43425eab5): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'UfWVNovrddpxFx62Xdob', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '4e0b1176-1d1c-4670-9de7-5cb43425eab5',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:19:52.045] [DEBUG] debug - [
  'Executing (d4326128-a6e3-44e6-a4a7-332387e3ccb7): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd4326128-a6e3-44e6-a4a7-332387e3ccb7',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:20:31.999] [DEBUG] debug - [
  'Executing (3a42e07b-53d0-41c7-a60c-cc378de9f641): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'akwsPWg6TNHVqNThYtQD', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3a42e07b-53d0-41c7-a60c-cc378de9f641',
      connection: [Client]
    }
  }
]
[2023-05-24T12:20:32.007] [DEBUG] debug - [
  'Executing (8dce4d45-ed11-4044-997b-3ee6da96149b): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '8dce4d45-ed11-4044-997b-3ee6da96149b',
      connection: [Client]
    }
  }
]
[2023-05-24T12:20:32.096] [DEBUG] debug - [
  `Executing (3a42e07b-53d0-41c7-a60c-cc378de9f641): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3a42e07b-53d0-41c7-a60c-cc378de9f641',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'akwsPWg6TNHVqNThYtQD', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:20:32.098] [DEBUG] debug - [
  `Executing (8dce4d45-ed11-4044-997b-3ee6da96149b): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '8dce4d45-ed11-4044-997b-3ee6da96149b',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:20:32.196] [DEBUG] debug - [
  'Executing (3a42e07b-53d0-41c7-a60c-cc378de9f641): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'akwsPWg6TNHVqNThYtQD', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3a42e07b-53d0-41c7-a60c-cc378de9f641',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:20:32.198] [DEBUG] debug - [
  'Executing (8dce4d45-ed11-4044-997b-3ee6da96149b): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '8dce4d45-ed11-4044-997b-3ee6da96149b',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:22:31.426] [DEBUG] debug - [
  'Executing (00902dac-8c9a-490e-8f28-c83a09a8ab4d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '7emLnSX4j9OaDofEpbeI', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '00902dac-8c9a-490e-8f28-c83a09a8ab4d',
      connection: [Client]
    }
  }
]
[2023-05-24T12:22:31.432] [DEBUG] debug - [
  'Executing (74fa7f42-2d51-4ebd-9de0-6a3f0ecfb5a6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '74fa7f42-2d51-4ebd-9de0-6a3f0ecfb5a6',
      connection: [Client]
    }
  }
]
[2023-05-24T12:22:31.514] [DEBUG] debug - [
  `Executing (00902dac-8c9a-490e-8f28-c83a09a8ab4d): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '00902dac-8c9a-490e-8f28-c83a09a8ab4d',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '7emLnSX4j9OaDofEpbeI', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:22:31.520] [DEBUG] debug - [
  `Executing (74fa7f42-2d51-4ebd-9de0-6a3f0ecfb5a6): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '74fa7f42-2d51-4ebd-9de0-6a3f0ecfb5a6',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:22:31.602] [DEBUG] debug - [
  'Executing (00902dac-8c9a-490e-8f28-c83a09a8ab4d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '7emLnSX4j9OaDofEpbeI', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '00902dac-8c9a-490e-8f28-c83a09a8ab4d',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:22:31.604] [DEBUG] debug - [
  'Executing (74fa7f42-2d51-4ebd-9de0-6a3f0ecfb5a6): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '74fa7f42-2d51-4ebd-9de0-6a3f0ecfb5a6',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:23:40.039] [DEBUG] debug - [
  'Executing (3b498411-96a4-49ce-a95f-4eab5574526a): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '28ErKYkfEQS6nK9roopG', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3b498411-96a4-49ce-a95f-4eab5574526a',
      connection: [Client]
    }
  }
]
[2023-05-24T12:23:40.057] [DEBUG] debug - [
  'Executing (e539f44f-01cf-487e-8cff-27345ffb3b0e): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e539f44f-01cf-487e-8cff-27345ffb3b0e',
      connection: [Client]
    }
  }
]
[2023-05-24T12:23:40.125] [DEBUG] debug - [
  `Executing (3b498411-96a4-49ce-a95f-4eab5574526a): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3b498411-96a4-49ce-a95f-4eab5574526a',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '28ErKYkfEQS6nK9roopG', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:23:40.157] [DEBUG] debug - [
  `Executing (e539f44f-01cf-487e-8cff-27345ffb3b0e): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e539f44f-01cf-487e-8cff-27345ffb3b0e',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:23:40.212] [DEBUG] debug - [
  'Executing (3b498411-96a4-49ce-a95f-4eab5574526a): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '28ErKYkfEQS6nK9roopG', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3b498411-96a4-49ce-a95f-4eab5574526a',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:23:40.256] [DEBUG] debug - [
  'Executing (e539f44f-01cf-487e-8cff-27345ffb3b0e): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e539f44f-01cf-487e-8cff-27345ffb3b0e',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:23:59.836] [DEBUG] debug - [
  'Executing (6ad2ee1d-9474-446c-8a49-cb6996ac98bd): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'AbN0hRu3NWosXFydjSKR', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6ad2ee1d-9474-446c-8a49-cb6996ac98bd',
      connection: [Client]
    }
  }
]
[2023-05-24T12:23:59.840] [DEBUG] debug - [
  'Executing (a5a9ac2d-c513-4f11-af41-b422dfe64f08): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a5a9ac2d-c513-4f11-af41-b422dfe64f08',
      connection: [Client]
    }
  }
]
[2023-05-24T12:23:59.930] [DEBUG] debug - [
  `Executing (6ad2ee1d-9474-446c-8a49-cb6996ac98bd): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6ad2ee1d-9474-446c-8a49-cb6996ac98bd',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'AbN0hRu3NWosXFydjSKR', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:23:59.932] [DEBUG] debug - [
  `Executing (a5a9ac2d-c513-4f11-af41-b422dfe64f08): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a5a9ac2d-c513-4f11-af41-b422dfe64f08',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:24:00.020] [DEBUG] debug - [
  'Executing (6ad2ee1d-9474-446c-8a49-cb6996ac98bd): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'AbN0hRu3NWosXFydjSKR', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6ad2ee1d-9474-446c-8a49-cb6996ac98bd',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:00.023] [DEBUG] debug - [
  'Executing (a5a9ac2d-c513-4f11-af41-b422dfe64f08): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a5a9ac2d-c513-4f11-af41-b422dfe64f08',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:09.586] [DEBUG] debug - [
  'Executing (727fd8bf-5a43-4a3d-b3ff-f7ddf06b1ab8): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'oD2cU6JEH5xrBiIy1MRC', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '727fd8bf-5a43-4a3d-b3ff-f7ddf06b1ab8',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:09.589] [DEBUG] debug - [
  'Executing (ae1b236d-3ef0-4b82-8a28-f565685b5586): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae1b236d-3ef0-4b82-8a28-f565685b5586',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:09.681] [DEBUG] debug - [
  `Executing (727fd8bf-5a43-4a3d-b3ff-f7ddf06b1ab8): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '727fd8bf-5a43-4a3d-b3ff-f7ddf06b1ab8',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'oD2cU6JEH5xrBiIy1MRC', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:24:09.684] [DEBUG] debug - [
  `Executing (ae1b236d-3ef0-4b82-8a28-f565685b5586): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae1b236d-3ef0-4b82-8a28-f565685b5586',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:24:09.772] [DEBUG] debug - [
  'Executing (727fd8bf-5a43-4a3d-b3ff-f7ddf06b1ab8): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'oD2cU6JEH5xrBiIy1MRC', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '727fd8bf-5a43-4a3d-b3ff-f7ddf06b1ab8',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:09.775] [DEBUG] debug - [
  'Executing (ae1b236d-3ef0-4b82-8a28-f565685b5586): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ae1b236d-3ef0-4b82-8a28-f565685b5586',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:20.694] [DEBUG] debug - [
  'Executing (085ed08a-b6f0-4613-97eb-21f1b44b6ac3): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'CDzDU0aSxBoJXQrxDi6P', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '085ed08a-b6f0-4613-97eb-21f1b44b6ac3',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:20.697] [DEBUG] debug - [
  'Executing (73f671f5-176f-4998-b127-3e244cc8b011): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '73f671f5-176f-4998-b127-3e244cc8b011',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:20.785] [DEBUG] debug - [
  `Executing (085ed08a-b6f0-4613-97eb-21f1b44b6ac3): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '085ed08a-b6f0-4613-97eb-21f1b44b6ac3',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'CDzDU0aSxBoJXQrxDi6P', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:24:20.787] [DEBUG] debug - [
  `Executing (73f671f5-176f-4998-b127-3e244cc8b011): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '73f671f5-176f-4998-b127-3e244cc8b011',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:24:20.902] [DEBUG] debug - [
  'Executing (085ed08a-b6f0-4613-97eb-21f1b44b6ac3): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'CDzDU0aSxBoJXQrxDi6P', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '085ed08a-b6f0-4613-97eb-21f1b44b6ac3',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:20.904] [DEBUG] debug - [
  'Executing (73f671f5-176f-4998-b127-3e244cc8b011): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '73f671f5-176f-4998-b127-3e244cc8b011',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:27.620] [DEBUG] debug - [
  'Executing (44d60342-2535-421c-9623-2260f24d3f1a): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'PVFdVeaLxPdv0brRJw1K', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '44d60342-2535-421c-9623-2260f24d3f1a',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:27.623] [DEBUG] debug - [
  'Executing (822cb760-808b-49ef-9d11-2b0076ee0ee0): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '822cb760-808b-49ef-9d11-2b0076ee0ee0',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:27.716] [DEBUG] debug - [
  `Executing (44d60342-2535-421c-9623-2260f24d3f1a): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '44d60342-2535-421c-9623-2260f24d3f1a',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'PVFdVeaLxPdv0brRJw1K', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:24:27.739] [DEBUG] debug - [
  `Executing (822cb760-808b-49ef-9d11-2b0076ee0ee0): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '822cb760-808b-49ef-9d11-2b0076ee0ee0',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:24:27.820] [DEBUG] debug - [
  'Executing (44d60342-2535-421c-9623-2260f24d3f1a): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'PVFdVeaLxPdv0brRJw1K', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '44d60342-2535-421c-9623-2260f24d3f1a',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:27.831] [DEBUG] debug - [
  'Executing (822cb760-808b-49ef-9d11-2b0076ee0ee0): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '822cb760-808b-49ef-9d11-2b0076ee0ee0',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:33.105] [DEBUG] debug - [
  'Executing (0121a1e9-c83a-43a0-bd15-2f48c2640ec6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'hndCnt2OKnD73mF7zePO', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0121a1e9-c83a-43a0-bd15-2f48c2640ec6',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:33.134] [DEBUG] debug - [
  'Executing (172ed2d6-42bf-4fcc-8645-4b79d192afee): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '172ed2d6-42bf-4fcc-8645-4b79d192afee',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:33.204] [DEBUG] debug - [
  `Executing (0121a1e9-c83a-43a0-bd15-2f48c2640ec6): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0121a1e9-c83a-43a0-bd15-2f48c2640ec6',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'hndCnt2OKnD73mF7zePO', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:24:33.239] [DEBUG] debug - [
  `Executing (172ed2d6-42bf-4fcc-8645-4b79d192afee): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '172ed2d6-42bf-4fcc-8645-4b79d192afee',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:24:37.939] [DEBUG] debug - [
  'Executing (012f6beb-f291-430e-9b97-a8ae6f42f91f): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'EMAQlm045pTzNJQFvPWT', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '012f6beb-f291-430e-9b97-a8ae6f42f91f',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:37.944] [DEBUG] debug - [
  'Executing (98cebfb6-11db-471e-a8ee-ab9e9d026a13): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '98cebfb6-11db-471e-a8ee-ab9e9d026a13',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:38.032] [DEBUG] debug - [
  `Executing (012f6beb-f291-430e-9b97-a8ae6f42f91f): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '012f6beb-f291-430e-9b97-a8ae6f42f91f',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'EMAQlm045pTzNJQFvPWT', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:24:38.035] [DEBUG] debug - [
  `Executing (98cebfb6-11db-471e-a8ee-ab9e9d026a13): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '98cebfb6-11db-471e-a8ee-ab9e9d026a13',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:24:38.124] [DEBUG] debug - [
  'Executing (012f6beb-f291-430e-9b97-a8ae6f42f91f): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'EMAQlm045pTzNJQFvPWT', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '012f6beb-f291-430e-9b97-a8ae6f42f91f',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:38.126] [DEBUG] debug - [
  'Executing (98cebfb6-11db-471e-a8ee-ab9e9d026a13): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '98cebfb6-11db-471e-a8ee-ab9e9d026a13',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:54.465] [DEBUG] debug - [
  'Executing (cf09cedb-7573-4fcc-b46f-c294cc1476a3): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'n6ttkMN0jCvgcW8yAlEF', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cf09cedb-7573-4fcc-b46f-c294cc1476a3',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:54.470] [DEBUG] debug - [
  'Executing (7754eaaa-0b71-4f8a-9d04-4e0b5d080642): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7754eaaa-0b71-4f8a-9d04-4e0b5d080642',
      connection: [Client]
    }
  }
]
[2023-05-24T12:24:54.557] [DEBUG] debug - [
  `Executing (cf09cedb-7573-4fcc-b46f-c294cc1476a3): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cf09cedb-7573-4fcc-b46f-c294cc1476a3',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'n6ttkMN0jCvgcW8yAlEF', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:24:54.570] [DEBUG] debug - [
  `Executing (7754eaaa-0b71-4f8a-9d04-4e0b5d080642): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7754eaaa-0b71-4f8a-9d04-4e0b5d080642',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:24:54.644] [DEBUG] debug - [
  'Executing (cf09cedb-7573-4fcc-b46f-c294cc1476a3): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'n6ttkMN0jCvgcW8yAlEF', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cf09cedb-7573-4fcc-b46f-c294cc1476a3',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:24:54.659] [DEBUG] debug - [
  'Executing (7754eaaa-0b71-4f8a-9d04-4e0b5d080642): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7754eaaa-0b71-4f8a-9d04-4e0b5d080642',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:28:27.743] [DEBUG] debug - [
  'Executing (5aa81661-d34c-4c69-bff3-f85eea9827e4): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'WeAXxPfBqBeuSyLZSHln', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5aa81661-d34c-4c69-bff3-f85eea9827e4',
      connection: [Client]
    }
  }
]
[2023-05-24T12:28:27.746] [DEBUG] debug - [
  'Executing (7ba1d19e-cc50-4c8f-96b4-f2c502e49db0): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7ba1d19e-cc50-4c8f-96b4-f2c502e49db0',
      connection: [Client]
    }
  }
]
[2023-05-24T12:28:27.830] [DEBUG] debug - [
  `Executing (5aa81661-d34c-4c69-bff3-f85eea9827e4): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5aa81661-d34c-4c69-bff3-f85eea9827e4',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'WeAXxPfBqBeuSyLZSHln', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:28:27.833] [DEBUG] debug - [
  `Executing (7ba1d19e-cc50-4c8f-96b4-f2c502e49db0): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7ba1d19e-cc50-4c8f-96b4-f2c502e49db0',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:28:27.920] [DEBUG] debug - [
  'Executing (5aa81661-d34c-4c69-bff3-f85eea9827e4): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'WeAXxPfBqBeuSyLZSHln', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5aa81661-d34c-4c69-bff3-f85eea9827e4',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:28:27.923] [DEBUG] debug - [
  'Executing (7ba1d19e-cc50-4c8f-96b4-f2c502e49db0): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7ba1d19e-cc50-4c8f-96b4-f2c502e49db0',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:28:55.832] [DEBUG] debug - [
  'Executing (98a8d643-df5a-4361-b43d-4c9c93284e7c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '9dwcinFOBmODZGOzI0Zb', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '98a8d643-df5a-4361-b43d-4c9c93284e7c',
      connection: [Client]
    }
  }
]
[2023-05-24T12:28:55.851] [DEBUG] debug - [
  'Executing (7ee9362c-ab9f-4b6b-924c-38e8ebc1483f): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7ee9362c-ab9f-4b6b-924c-38e8ebc1483f',
      connection: [Client]
    }
  }
]
[2023-05-24T12:28:55.919] [DEBUG] debug - [
  `Executing (98a8d643-df5a-4361-b43d-4c9c93284e7c): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '98a8d643-df5a-4361-b43d-4c9c93284e7c',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '9dwcinFOBmODZGOzI0Zb', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:28:55.942] [DEBUG] debug - [
  `Executing (7ee9362c-ab9f-4b6b-924c-38e8ebc1483f): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7ee9362c-ab9f-4b6b-924c-38e8ebc1483f',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:28:55.998] [DEBUG] debug - [
  'Executing (98a8d643-df5a-4361-b43d-4c9c93284e7c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '9dwcinFOBmODZGOzI0Zb', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '98a8d643-df5a-4361-b43d-4c9c93284e7c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:28:56.027] [DEBUG] debug - [
  'Executing (7ee9362c-ab9f-4b6b-924c-38e8ebc1483f): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7ee9362c-ab9f-4b6b-924c-38e8ebc1483f',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:29:38.895] [DEBUG] debug - [
  'Executing (1bb9056c-2c86-4dc0-acba-3a17b6b9fe3a): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'em9UykxVcOUI4xYy6BdY', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1bb9056c-2c86-4dc0-acba-3a17b6b9fe3a',
      connection: [Client]
    }
  }
]
[2023-05-24T12:29:38.898] [DEBUG] debug - [
  'Executing (12a2f8f1-3516-4342-a04b-92211084b285): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '12a2f8f1-3516-4342-a04b-92211084b285',
      connection: [Client]
    }
  }
]
[2023-05-24T12:29:38.977] [DEBUG] debug - [
  `Executing (1bb9056c-2c86-4dc0-acba-3a17b6b9fe3a): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1bb9056c-2c86-4dc0-acba-3a17b6b9fe3a',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'em9UykxVcOUI4xYy6BdY', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:29:38.978] [DEBUG] debug - [
  `Executing (12a2f8f1-3516-4342-a04b-92211084b285): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '12a2f8f1-3516-4342-a04b-92211084b285',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:29:39.056] [DEBUG] debug - [
  'Executing (1bb9056c-2c86-4dc0-acba-3a17b6b9fe3a): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'em9UykxVcOUI4xYy6BdY', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1bb9056c-2c86-4dc0-acba-3a17b6b9fe3a',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:29:39.063] [DEBUG] debug - [
  'Executing (12a2f8f1-3516-4342-a04b-92211084b285): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '12a2f8f1-3516-4342-a04b-92211084b285',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:29:48.924] [DEBUG] debug - [
  'Executing (700353e7-54e4-4740-a0bd-1872b8b4857b): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'rgYGua6qkKvkyFv33TZV', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '700353e7-54e4-4740-a0bd-1872b8b4857b',
      connection: [Client]
    }
  }
]
[2023-05-24T12:29:48.959] [DEBUG] debug - [
  'Executing (6f43d103-33b2-461a-bcbc-85de6f7160a8): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6f43d103-33b2-461a-bcbc-85de6f7160a8',
      connection: [Client]
    }
  }
]
[2023-05-24T12:29:49.010] [DEBUG] debug - [
  `Executing (700353e7-54e4-4740-a0bd-1872b8b4857b): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '700353e7-54e4-4740-a0bd-1872b8b4857b',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'rgYGua6qkKvkyFv33TZV', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:29:49.043] [DEBUG] debug - [
  `Executing (6f43d103-33b2-461a-bcbc-85de6f7160a8): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6f43d103-33b2-461a-bcbc-85de6f7160a8',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:29:49.100] [DEBUG] debug - [
  'Executing (700353e7-54e4-4740-a0bd-1872b8b4857b): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'rgYGua6qkKvkyFv33TZV', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '700353e7-54e4-4740-a0bd-1872b8b4857b',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:29:49.145] [DEBUG] debug - [
  'Executing (6f43d103-33b2-461a-bcbc-85de6f7160a8): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6f43d103-33b2-461a-bcbc-85de6f7160a8',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:30:00.489] [DEBUG] debug - [
  'Executing (eb9b46c6-77ff-493a-940c-3041a7ed1975): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'mAQ0XKa9upQlA5pTAHrS', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'eb9b46c6-77ff-493a-940c-3041a7ed1975',
      connection: [Client]
    }
  }
]
[2023-05-24T12:30:00.493] [DEBUG] debug - [
  'Executing (6491024b-e260-4e73-a5eb-9fc8090921d1): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6491024b-e260-4e73-a5eb-9fc8090921d1',
      connection: [Client]
    }
  }
]
[2023-05-24T12:30:00.590] [DEBUG] debug - [
  `Executing (eb9b46c6-77ff-493a-940c-3041a7ed1975): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'eb9b46c6-77ff-493a-940c-3041a7ed1975',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'mAQ0XKa9upQlA5pTAHrS', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:30:00.595] [DEBUG] debug - [
  `Executing (6491024b-e260-4e73-a5eb-9fc8090921d1): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6491024b-e260-4e73-a5eb-9fc8090921d1',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:30:00.691] [DEBUG] debug - [
  'Executing (eb9b46c6-77ff-493a-940c-3041a7ed1975): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'mAQ0XKa9upQlA5pTAHrS', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'eb9b46c6-77ff-493a-940c-3041a7ed1975',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:30:00.692] [DEBUG] debug - [
  'Executing (6491024b-e260-4e73-a5eb-9fc8090921d1): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6491024b-e260-4e73-a5eb-9fc8090921d1',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:30:05.318] [DEBUG] debug - [
  'Executing (6419767d-dc83-4641-b00b-00220523a7ed): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'pe4J08BKnAWr8Ufgh4zw', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6419767d-dc83-4641-b00b-00220523a7ed',
      connection: [Client]
    }
  }
]
[2023-05-24T12:30:05.418] [DEBUG] debug - [
  'Executing (76d78e80-f027-432f-add1-b236d754e392): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '76d78e80-f027-432f-add1-b236d754e392',
      connection: [Client]
    }
  }
]
[2023-05-24T12:30:05.425] [DEBUG] debug - [
  `Executing (6419767d-dc83-4641-b00b-00220523a7ed): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6419767d-dc83-4641-b00b-00220523a7ed',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'pe4J08BKnAWr8Ufgh4zw', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-24T12:30:05.537] [DEBUG] debug - [
  `Executing (76d78e80-f027-432f-add1-b236d754e392): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '76d78e80-f027-432f-add1-b236d754e392',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-24T12:30:05.543] [DEBUG] debug - [
  'Executing (6419767d-dc83-4641-b00b-00220523a7ed): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'pe4J08BKnAWr8Ufgh4zw', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6419767d-dc83-4641-b00b-00220523a7ed',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:30:05.650] [DEBUG] debug - [
  'Executing (76d78e80-f027-432f-add1-b236d754e392): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '76d78e80-f027-432f-add1-b236d754e392',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-24T12:31:19.931] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-25T09:49:42.070] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:49:45.843] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:49:46.035] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:49:46.132] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:49:46.237] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:49:46.332] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:49:46.427] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:49:46.529] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:51:01.018] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:51:01.111] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:51:07.408] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:51:07.509] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:51:46.670] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:51:46.756] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:51:52.797] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:51:58.477] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:52:16.538] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:53:00.640] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T09:53:00.735] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T09:59:59.097] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:00:04.030] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:00:12.172] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:00:16.891] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:01:01.640] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:01:01.732] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:01:06.090] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:01:07.891] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:03:38.091] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:03:38.197] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:03:42.372] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:03:43.780] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:04:40.493] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:04:43.043] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:04:50.315] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:04:51.941] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:06:32.228] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:06:32.360] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:06:33.160] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:06:34.618] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:06:59.655] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:07:29.560] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:07:29.644] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:07:57.481] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:07:58.121] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:10:41.621] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:10:41.708] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:10:43.952] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:10:45.382] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:13.521] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:12:13.617] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:14.395] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:12:16.009] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:32.103] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:12:32.200] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:32.384] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:12:32.497] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:32.630] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:32.740] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:32.842] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:12:32.960] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:21:15.574] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:21:15.668] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T10:21:15.845] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:21:15.938] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T10:21:16.027] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T21:07:35.662] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T21:07:35.742] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T21:07:35.933] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T21:07:36.018] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T21:07:36.121] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T21:07:36.259] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T21:07:36.350] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T21:07:36.450] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T21:08:34.200] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T21:08:34.289] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T21:08:34.440] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T21:08:34.534] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T21:08:34.631] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:04:41.579] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:04:41.675] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:04:41.865] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:04:41.964] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:04:42.059] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:05:01.468] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:05:01.861] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:05:02.016] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:05:02.107] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:05:02.202] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:05:22.168] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:05:48.497] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:30:13.499] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:30:13.585] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:30:14.785] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:30:14.890] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:30:18.693] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:31:10.823] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:31:10.916] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:31:14.386] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:31:14.484] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:31:16.587] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:34:28.343] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:34:28.854] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-25T23:37:52.531] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:37:52.639] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-25T23:37:59.369] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T01:38:06.243] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T01:38:06.325] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T01:38:14.559] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T01:38:14.663] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T01:38:15.480] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T01:38:15.575] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T01:38:16.665] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T01:38:50.689] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T01:38:51.158] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T01:38:51.343] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T01:38:51.434] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T01:38:51.522] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:01:54.977] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:04:35.829] [DEBUG] debug - [
  'Executing (6b0c9333-85a6-479d-842d-7a39e59427bc): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'OUzFenAos8JeuQVAUIIR', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6b0c9333-85a6-479d-842d-7a39e59427bc',
      connection: [Client]
    }
  }
]
[2023-05-26T02:04:35.832] [DEBUG] debug - [
  'Executing (c57646dd-f648-43a4-b3ea-3c6b1e4f2ffb): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c57646dd-f648-43a4-b3ea-3c6b1e4f2ffb',
      connection: [Client]
    }
  }
]
[2023-05-26T02:04:35.925] [DEBUG] debug - [
  `Executing (6b0c9333-85a6-479d-842d-7a39e59427bc): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6b0c9333-85a6-479d-842d-7a39e59427bc',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'OUzFenAos8JeuQVAUIIR', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:04:35.926] [DEBUG] debug - [
  `Executing (c57646dd-f648-43a4-b3ea-3c6b1e4f2ffb): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c57646dd-f648-43a4-b3ea-3c6b1e4f2ffb',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:04:36.023] [DEBUG] debug - [
  'Executing (6b0c9333-85a6-479d-842d-7a39e59427bc): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'OUzFenAos8JeuQVAUIIR', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6b0c9333-85a6-479d-842d-7a39e59427bc',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:04:36.027] [DEBUG] debug - [
  'Executing (c57646dd-f648-43a4-b3ea-3c6b1e4f2ffb): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c57646dd-f648-43a4-b3ea-3c6b1e4f2ffb',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:04:52.898] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:04:53.012] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:04:53.148] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:06:06.654] [DEBUG] debug - [
  'Executing (84234ae5-c207-4f02-8a17-b12e9028e1ac): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'z4JyO2NuA8y3RyvquobR', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '84234ae5-c207-4f02-8a17-b12e9028e1ac',
      connection: [Client]
    }
  }
]
[2023-05-26T02:06:06.678] [DEBUG] debug - [
  'Executing (074bc38b-c97f-4ee7-8677-9dc9b2fbecd2): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '074bc38b-c97f-4ee7-8677-9dc9b2fbecd2',
      connection: [Client]
    }
  }
]
[2023-05-26T02:06:06.747] [DEBUG] debug - [
  `Executing (84234ae5-c207-4f02-8a17-b12e9028e1ac): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '84234ae5-c207-4f02-8a17-b12e9028e1ac',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'z4JyO2NuA8y3RyvquobR', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:06:06.784] [DEBUG] debug - [
  `Executing (074bc38b-c97f-4ee7-8677-9dc9b2fbecd2): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '074bc38b-c97f-4ee7-8677-9dc9b2fbecd2',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:06:06.855] [DEBUG] debug - [
  'Executing (84234ae5-c207-4f02-8a17-b12e9028e1ac): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'z4JyO2NuA8y3RyvquobR', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '84234ae5-c207-4f02-8a17-b12e9028e1ac',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:06:06.881] [DEBUG] debug - [
  'Executing (074bc38b-c97f-4ee7-8677-9dc9b2fbecd2): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '074bc38b-c97f-4ee7-8677-9dc9b2fbecd2',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:06:08.117] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:06:08.207] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:06:12.253] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:06:29.555] [DEBUG] debug - [
  'Executing (f2b07df0-00ac-422c-96d3-9dddbe54c0c4): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'UZHEZMicFuJdQBko7Y2E', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f2b07df0-00ac-422c-96d3-9dddbe54c0c4',
      connection: [Client]
    }
  }
]
[2023-05-26T02:06:29.559] [DEBUG] debug - [
  'Executing (b2c74db4-e659-4dd4-aa0f-e4156022a5fb): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b2c74db4-e659-4dd4-aa0f-e4156022a5fb',
      connection: [Client]
    }
  }
]
[2023-05-26T02:06:29.655] [DEBUG] debug - [
  `Executing (f2b07df0-00ac-422c-96d3-9dddbe54c0c4): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f2b07df0-00ac-422c-96d3-9dddbe54c0c4',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'UZHEZMicFuJdQBko7Y2E', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:06:29.658] [DEBUG] debug - [
  `Executing (b2c74db4-e659-4dd4-aa0f-e4156022a5fb): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b2c74db4-e659-4dd4-aa0f-e4156022a5fb',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:06:29.766] [DEBUG] debug - [
  'Executing (f2b07df0-00ac-422c-96d3-9dddbe54c0c4): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'UZHEZMicFuJdQBko7Y2E', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f2b07df0-00ac-422c-96d3-9dddbe54c0c4',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:06:29.768] [DEBUG] debug - [
  'Executing (b2c74db4-e659-4dd4-aa0f-e4156022a5fb): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b2c74db4-e659-4dd4-aa0f-e4156022a5fb',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:06:32.527] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:06:32.621] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:06:32.743] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:07:50.144] [DEBUG] debug - [
  'Executing (c0c94587-6883-4e1a-ae88-5e88ad0c7c12): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'VdUtUBJzEsBkJ4cpo7HK', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c0c94587-6883-4e1a-ae88-5e88ad0c7c12',
      connection: [Client]
    }
  }
]
[2023-05-26T02:07:50.151] [DEBUG] debug - [
  'Executing (b7334205-5b1b-4b93-9ba0-9d9f0737a01d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b7334205-5b1b-4b93-9ba0-9d9f0737a01d',
      connection: [Client]
    }
  }
]
[2023-05-26T02:07:50.242] [DEBUG] debug - [
  `Executing (c0c94587-6883-4e1a-ae88-5e88ad0c7c12): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c0c94587-6883-4e1a-ae88-5e88ad0c7c12',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'VdUtUBJzEsBkJ4cpo7HK', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:07:50.246] [DEBUG] debug - [
  `Executing (b7334205-5b1b-4b93-9ba0-9d9f0737a01d): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b7334205-5b1b-4b93-9ba0-9d9f0737a01d',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:07:50.333] [DEBUG] debug - [
  'Executing (c0c94587-6883-4e1a-ae88-5e88ad0c7c12): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'VdUtUBJzEsBkJ4cpo7HK', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c0c94587-6883-4e1a-ae88-5e88ad0c7c12',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:07:50.352] [DEBUG] debug - [
  'Executing (b7334205-5b1b-4b93-9ba0-9d9f0737a01d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'b7334205-5b1b-4b93-9ba0-9d9f0737a01d',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:07:52.293] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:07:52.404] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:07:52.498] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:08:53.606] [DEBUG] debug - [
  'Executing (79314ddf-f91b-4aa2-baff-21d3898236d5): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Tc9htCvfG9bDYIbYF9Ms', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '79314ddf-f91b-4aa2-baff-21d3898236d5',
      connection: [Client]
    }
  }
]
[2023-05-26T02:08:53.610] [DEBUG] debug - [
  'Executing (581e2aa8-c47d-47ea-bd3b-3f3179900ea6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '581e2aa8-c47d-47ea-bd3b-3f3179900ea6',
      connection: [Client]
    }
  }
]
[2023-05-26T02:08:53.697] [DEBUG] debug - [
  `Executing (79314ddf-f91b-4aa2-baff-21d3898236d5): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '79314ddf-f91b-4aa2-baff-21d3898236d5',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'Tc9htCvfG9bDYIbYF9Ms', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:08:53.702] [DEBUG] debug - [
  `Executing (581e2aa8-c47d-47ea-bd3b-3f3179900ea6): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '581e2aa8-c47d-47ea-bd3b-3f3179900ea6',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:08:53.796] [DEBUG] debug - [
  'Executing (79314ddf-f91b-4aa2-baff-21d3898236d5): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Tc9htCvfG9bDYIbYF9Ms', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '79314ddf-f91b-4aa2-baff-21d3898236d5',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:08:53.802] [DEBUG] debug - [
  'Executing (581e2aa8-c47d-47ea-bd3b-3f3179900ea6): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '581e2aa8-c47d-47ea-bd3b-3f3179900ea6',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:09:14.561] [DEBUG] debug - [
  'Executing (f7a97d23-3a88-4233-80c5-a08626a6bbdc): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Hgu8UsU0EtzrIN5UMyJo', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f7a97d23-3a88-4233-80c5-a08626a6bbdc',
      connection: [Client]
    }
  }
]
[2023-05-26T02:09:14.565] [DEBUG] debug - [
  'Executing (84672e3d-c562-4a42-9821-9f3deea1f3ae): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '84672e3d-c562-4a42-9821-9f3deea1f3ae',
      connection: [Client]
    }
  }
]
[2023-05-26T02:09:14.652] [DEBUG] debug - [
  `Executing (f7a97d23-3a88-4233-80c5-a08626a6bbdc): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f7a97d23-3a88-4233-80c5-a08626a6bbdc',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'Hgu8UsU0EtzrIN5UMyJo', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:09:14.660] [DEBUG] debug - [
  `Executing (84672e3d-c562-4a42-9821-9f3deea1f3ae): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '84672e3d-c562-4a42-9821-9f3deea1f3ae',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:09:14.745] [DEBUG] debug - [
  'Executing (f7a97d23-3a88-4233-80c5-a08626a6bbdc): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Hgu8UsU0EtzrIN5UMyJo', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f7a97d23-3a88-4233-80c5-a08626a6bbdc',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:09:14.767] [DEBUG] debug - [
  'Executing (84672e3d-c562-4a42-9821-9f3deea1f3ae): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '84672e3d-c562-4a42-9821-9f3deea1f3ae',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:09:43.844] [DEBUG] debug - [
  'Executing (c35c6f97-cbbe-4634-8bf6-a21cd9d99711): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'rueaNzZyWQdgegmBbg3v', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c35c6f97-cbbe-4634-8bf6-a21cd9d99711',
      connection: [Client]
    }
  }
]
[2023-05-26T02:09:43.851] [DEBUG] debug - [
  'Executing (e2a2d25f-6041-4e80-ae3a-33f8efe2dc24): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e2a2d25f-6041-4e80-ae3a-33f8efe2dc24',
      connection: [Client]
    }
  }
]
[2023-05-26T02:09:43.950] [DEBUG] debug - [
  `Executing (c35c6f97-cbbe-4634-8bf6-a21cd9d99711): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c35c6f97-cbbe-4634-8bf6-a21cd9d99711',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'rueaNzZyWQdgegmBbg3v', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:09:43.952] [DEBUG] debug - [
  `Executing (e2a2d25f-6041-4e80-ae3a-33f8efe2dc24): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e2a2d25f-6041-4e80-ae3a-33f8efe2dc24',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:09:44.042] [DEBUG] debug - [
  'Executing (c35c6f97-cbbe-4634-8bf6-a21cd9d99711): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'rueaNzZyWQdgegmBbg3v', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c35c6f97-cbbe-4634-8bf6-a21cd9d99711',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:09:44.047] [DEBUG] debug - [
  'Executing (e2a2d25f-6041-4e80-ae3a-33f8efe2dc24): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e2a2d25f-6041-4e80-ae3a-33f8efe2dc24',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:10:17.161] [DEBUG] debug - [
  'Executing (becad2eb-f21e-4c6d-9a84-8a345e00858d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '2vxvlv5MZREIEZ3FUUF4', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'becad2eb-f21e-4c6d-9a84-8a345e00858d',
      connection: [Client]
    }
  }
]
[2023-05-26T02:10:17.196] [DEBUG] debug - [
  'Executing (cc8ce663-60fa-4e29-a651-65ee2caf7ee9): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cc8ce663-60fa-4e29-a651-65ee2caf7ee9',
      connection: [Client]
    }
  }
]
[2023-05-26T02:10:17.247] [DEBUG] debug - [
  `Executing (becad2eb-f21e-4c6d-9a84-8a345e00858d): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'becad2eb-f21e-4c6d-9a84-8a345e00858d',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '2vxvlv5MZREIEZ3FUUF4', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:10:17.284] [DEBUG] debug - [
  `Executing (cc8ce663-60fa-4e29-a651-65ee2caf7ee9): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cc8ce663-60fa-4e29-a651-65ee2caf7ee9',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:10:17.339] [DEBUG] debug - [
  'Executing (becad2eb-f21e-4c6d-9a84-8a345e00858d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '2vxvlv5MZREIEZ3FUUF4', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'becad2eb-f21e-4c6d-9a84-8a345e00858d',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:10:17.378] [DEBUG] debug - [
  'Executing (cc8ce663-60fa-4e29-a651-65ee2caf7ee9): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cc8ce663-60fa-4e29-a651-65ee2caf7ee9',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:11:31.718] [DEBUG] debug - [
  'Executing (58bfed55-d0ab-4562-aded-ea80738c63c5): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'yluIfAogwzEXAimVpYC0', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '58bfed55-d0ab-4562-aded-ea80738c63c5',
      connection: [Client]
    }
  }
]
[2023-05-26T02:11:31.723] [DEBUG] debug - [
  'Executing (e74ea2f2-5eae-4b89-937f-867abe0d29f6): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e74ea2f2-5eae-4b89-937f-867abe0d29f6',
      connection: [Client]
    }
  }
]
[2023-05-26T02:11:31.803] [DEBUG] debug - [
  `Executing (58bfed55-d0ab-4562-aded-ea80738c63c5): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '58bfed55-d0ab-4562-aded-ea80738c63c5',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'yluIfAogwzEXAimVpYC0', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:11:31.856] [DEBUG] debug - [
  `Executing (e74ea2f2-5eae-4b89-937f-867abe0d29f6): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e74ea2f2-5eae-4b89-937f-867abe0d29f6',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:11:31.922] [DEBUG] debug - [
  'Executing (58bfed55-d0ab-4562-aded-ea80738c63c5): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'yluIfAogwzEXAimVpYC0', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '58bfed55-d0ab-4562-aded-ea80738c63c5',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:11:31.967] [DEBUG] debug - [
  'Executing (e74ea2f2-5eae-4b89-937f-867abe0d29f6): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'e74ea2f2-5eae-4b89-937f-867abe0d29f6',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:12:15.446] [DEBUG] debug - [
  'Executing (864e2e5d-0fac-4466-9680-03961bbd4ab2): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'LVDlIiX1725uWWjRiDku', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '864e2e5d-0fac-4466-9680-03961bbd4ab2',
      connection: [Client]
    }
  }
]
[2023-05-26T02:12:15.472] [DEBUG] debug - [
  'Executing (ab391c47-0624-4932-9f8b-cf0d48a29982): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab391c47-0624-4932-9f8b-cf0d48a29982',
      connection: [Client]
    }
  }
]
[2023-05-26T02:12:15.539] [DEBUG] debug - [
  `Executing (864e2e5d-0fac-4466-9680-03961bbd4ab2): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '864e2e5d-0fac-4466-9680-03961bbd4ab2',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'LVDlIiX1725uWWjRiDku', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:12:15.561] [DEBUG] debug - [
  `Executing (ab391c47-0624-4932-9f8b-cf0d48a29982): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab391c47-0624-4932-9f8b-cf0d48a29982',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:12:15.634] [DEBUG] debug - [
  'Executing (864e2e5d-0fac-4466-9680-03961bbd4ab2): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'LVDlIiX1725uWWjRiDku', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '864e2e5d-0fac-4466-9680-03961bbd4ab2',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:12:15.662] [DEBUG] debug - [
  'Executing (ab391c47-0624-4932-9f8b-cf0d48a29982): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ab391c47-0624-4932-9f8b-cf0d48a29982',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:12:37.014] [DEBUG] debug - [
  'Executing (cbf178a3-8133-49fc-b594-ec5698fdb268): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Psybg4zQU1ehQZZdgU7l', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cbf178a3-8133-49fc-b594-ec5698fdb268',
      connection: [Client]
    }
  }
]
[2023-05-26T02:12:37.019] [DEBUG] debug - [
  'Executing (cf3803b4-8af8-4f9b-a809-9dd5eb5d0962): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cf3803b4-8af8-4f9b-a809-9dd5eb5d0962',
      connection: [Client]
    }
  }
]
[2023-05-26T02:12:37.106] [DEBUG] debug - [
  `Executing (cbf178a3-8133-49fc-b594-ec5698fdb268): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cbf178a3-8133-49fc-b594-ec5698fdb268',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'Psybg4zQU1ehQZZdgU7l', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:12:37.127] [DEBUG] debug - [
  `Executing (cf3803b4-8af8-4f9b-a809-9dd5eb5d0962): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cf3803b4-8af8-4f9b-a809-9dd5eb5d0962',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:12:37.199] [DEBUG] debug - [
  'Executing (cbf178a3-8133-49fc-b594-ec5698fdb268): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Psybg4zQU1ehQZZdgU7l', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cbf178a3-8133-49fc-b594-ec5698fdb268',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:12:37.215] [DEBUG] debug - [
  'Executing (cf3803b4-8af8-4f9b-a809-9dd5eb5d0962): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cf3803b4-8af8-4f9b-a809-9dd5eb5d0962',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:13:18.423] [DEBUG] debug - [
  'Executing (452178e6-128b-4c0d-a6ce-569a5e707249): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '0SdWT3so1pb74icPmU6Q', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '452178e6-128b-4c0d-a6ce-569a5e707249',
      connection: [Client]
    }
  }
]
[2023-05-26T02:13:18.425] [DEBUG] debug - [
  'Executing (f1f611cf-5fdf-4694-8bb5-0b551d20b5ea): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f1f611cf-5fdf-4694-8bb5-0b551d20b5ea',
      connection: [Client]
    }
  }
]
[2023-05-26T02:13:18.568] [DEBUG] debug - [
  `Executing (452178e6-128b-4c0d-a6ce-569a5e707249): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '452178e6-128b-4c0d-a6ce-569a5e707249',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '0SdWT3so1pb74icPmU6Q', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:13:18.572] [DEBUG] debug - [
  `Executing (f1f611cf-5fdf-4694-8bb5-0b551d20b5ea): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f1f611cf-5fdf-4694-8bb5-0b551d20b5ea',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:13:18.740] [DEBUG] debug - [
  'Executing (452178e6-128b-4c0d-a6ce-569a5e707249): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '0SdWT3so1pb74icPmU6Q', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '452178e6-128b-4c0d-a6ce-569a5e707249',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:13:18.742] [DEBUG] debug - [
  'Executing (f1f611cf-5fdf-4694-8bb5-0b551d20b5ea): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f1f611cf-5fdf-4694-8bb5-0b551d20b5ea',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:13:21.458] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:13:21.556] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:13:34.799] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:14:00.002] [DEBUG] debug - [
  'Executing (7c667095-faea-4214-9f30-cfcbeb71305c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'ifSsOeWh2bCoKmJGyQZy', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7c667095-faea-4214-9f30-cfcbeb71305c',
      connection: [Client]
    }
  }
]
[2023-05-26T02:14:00.007] [DEBUG] debug - [
  'Executing (7053e784-5cf4-4e0c-834a-fbe4abd5f102): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7053e784-5cf4-4e0c-834a-fbe4abd5f102',
      connection: [Client]
    }
  }
]
[2023-05-26T02:14:00.088] [DEBUG] debug - [
  `Executing (7c667095-faea-4214-9f30-cfcbeb71305c): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7c667095-faea-4214-9f30-cfcbeb71305c',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'ifSsOeWh2bCoKmJGyQZy', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:14:00.096] [DEBUG] debug - [
  `Executing (7053e784-5cf4-4e0c-834a-fbe4abd5f102): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7053e784-5cf4-4e0c-834a-fbe4abd5f102',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:14:00.181] [DEBUG] debug - [
  'Executing (7c667095-faea-4214-9f30-cfcbeb71305c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'ifSsOeWh2bCoKmJGyQZy', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7c667095-faea-4214-9f30-cfcbeb71305c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:14:00.191] [DEBUG] debug - [
  'Executing (7053e784-5cf4-4e0c-834a-fbe4abd5f102): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '7053e784-5cf4-4e0c-834a-fbe4abd5f102',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:14:17.336] [DEBUG] debug - [
  'Executing (f9cbe167-6083-405a-9061-4fa0f906bb39): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'd9dbecv2DPryawnDfZQq', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f9cbe167-6083-405a-9061-4fa0f906bb39',
      connection: [Client]
    }
  }
]
[2023-05-26T02:14:17.341] [DEBUG] debug - [
  'Executing (3149439f-eabb-40ba-9f99-1d47e10d3b56): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3149439f-eabb-40ba-9f99-1d47e10d3b56',
      connection: [Client]
    }
  }
]
[2023-05-26T02:14:17.433] [DEBUG] debug - [
  `Executing (f9cbe167-6083-405a-9061-4fa0f906bb39): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f9cbe167-6083-405a-9061-4fa0f906bb39',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'd9dbecv2DPryawnDfZQq', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:14:17.437] [DEBUG] debug - [
  `Executing (3149439f-eabb-40ba-9f99-1d47e10d3b56): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3149439f-eabb-40ba-9f99-1d47e10d3b56',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:14:17.526] [DEBUG] debug - [
  'Executing (f9cbe167-6083-405a-9061-4fa0f906bb39): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'd9dbecv2DPryawnDfZQq', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'f9cbe167-6083-405a-9061-4fa0f906bb39',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:14:17.532] [DEBUG] debug - [
  'Executing (3149439f-eabb-40ba-9f99-1d47e10d3b56): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '3149439f-eabb-40ba-9f99-1d47e10d3b56',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:14:20.436] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:14:20.536] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:14:20.631] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'asd')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:15:59.546] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:16:37.427] [DEBUG] debug - [
  'Executing (831516a5-636c-4b73-a9af-3fa0dd72ea16): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'QEScP7vtexyjJBlZ6fn6', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '831516a5-636c-4b73-a9af-3fa0dd72ea16',
      connection: [Client]
    }
  }
]
[2023-05-26T02:16:37.431] [DEBUG] debug - [
  'Executing (49184e0c-4707-42e5-af6a-a0cfdf86e463): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '49184e0c-4707-42e5-af6a-a0cfdf86e463',
      connection: [Client]
    }
  }
]
[2023-05-26T02:16:37.529] [DEBUG] debug - [
  `Executing (831516a5-636c-4b73-a9af-3fa0dd72ea16): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '831516a5-636c-4b73-a9af-3fa0dd72ea16',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'QEScP7vtexyjJBlZ6fn6', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:16:37.535] [DEBUG] debug - [
  `Executing (49184e0c-4707-42e5-af6a-a0cfdf86e463): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '49184e0c-4707-42e5-af6a-a0cfdf86e463',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:16:37.647] [DEBUG] debug - [
  'Executing (831516a5-636c-4b73-a9af-3fa0dd72ea16): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'QEScP7vtexyjJBlZ6fn6', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '831516a5-636c-4b73-a9af-3fa0dd72ea16',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:16:37.648] [DEBUG] debug - [
  'Executing (49184e0c-4707-42e5-af6a-a0cfdf86e463): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '49184e0c-4707-42e5-af6a-a0cfdf86e463',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:16:39.465] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:16:39.564] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:16:39.672] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:17:20.987] [DEBUG] debug - [
  'Executing (67f2faa2-596e-4c79-bb99-7a9743badd49): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'ReoMaHTH6tUd7EgIffz7', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '67f2faa2-596e-4c79-bb99-7a9743badd49',
      connection: [Client]
    }
  }
]
[2023-05-26T02:17:20.991] [DEBUG] debug - [
  'Executing (6c6749ac-e2d4-4c2e-8791-c564989f4d70): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6c6749ac-e2d4-4c2e-8791-c564989f4d70',
      connection: [Client]
    }
  }
]
[2023-05-26T02:17:21.069] [DEBUG] debug - [
  `Executing (67f2faa2-596e-4c79-bb99-7a9743badd49): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '67f2faa2-596e-4c79-bb99-7a9743badd49',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'ReoMaHTH6tUd7EgIffz7', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:17:21.080] [DEBUG] debug - [
  `Executing (6c6749ac-e2d4-4c2e-8791-c564989f4d70): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6c6749ac-e2d4-4c2e-8791-c564989f4d70',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:17:21.185] [DEBUG] debug - [
  'Executing (67f2faa2-596e-4c79-bb99-7a9743badd49): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'ReoMaHTH6tUd7EgIffz7', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '67f2faa2-596e-4c79-bb99-7a9743badd49',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:17:21.187] [DEBUG] debug - [
  'Executing (6c6749ac-e2d4-4c2e-8791-c564989f4d70): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6c6749ac-e2d4-4c2e-8791-c564989f4d70',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:17:35.572] [DEBUG] debug - [
  'Executing (ff7c6684-ab8c-4d88-9d55-3d01cd679f8d): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '6yEILscJCo9zyTMLBvwg', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ff7c6684-ab8c-4d88-9d55-3d01cd679f8d',
      connection: [Client]
    }
  }
]
[2023-05-26T02:17:35.577] [DEBUG] debug - [
  'Executing (d2bfa5a9-b55c-4721-bdf4-5c80477119e4): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd2bfa5a9-b55c-4721-bdf4-5c80477119e4',
      connection: [Client]
    }
  }
]
[2023-05-26T02:17:35.686] [DEBUG] debug - [
  `Executing (ff7c6684-ab8c-4d88-9d55-3d01cd679f8d): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ff7c6684-ab8c-4d88-9d55-3d01cd679f8d',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '6yEILscJCo9zyTMLBvwg', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:17:35.689] [DEBUG] debug - [
  `Executing (d2bfa5a9-b55c-4721-bdf4-5c80477119e4): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd2bfa5a9-b55c-4721-bdf4-5c80477119e4',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:17:35.780] [DEBUG] debug - [
  'Executing (ff7c6684-ab8c-4d88-9d55-3d01cd679f8d): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '6yEILscJCo9zyTMLBvwg', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ff7c6684-ab8c-4d88-9d55-3d01cd679f8d',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:17:35.790] [DEBUG] debug - [
  'Executing (d2bfa5a9-b55c-4721-bdf4-5c80477119e4): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'd2bfa5a9-b55c-4721-bdf4-5c80477119e4',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:17:46.239] [DEBUG] debug - [
  'Executing (2ce79457-ad5c-4b44-946e-a1f58d0079c5): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'MOJOQ1W6tu1SlLiNnjST', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2ce79457-ad5c-4b44-946e-a1f58d0079c5',
      connection: [Client]
    }
  }
]
[2023-05-26T02:17:46.243] [DEBUG] debug - [
  'Executing (1bbfd0b6-043c-4d6e-829a-405d6a489ab2): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1bbfd0b6-043c-4d6e-829a-405d6a489ab2',
      connection: [Client]
    }
  }
]
[2023-05-26T02:17:46.325] [DEBUG] debug - [
  `Executing (2ce79457-ad5c-4b44-946e-a1f58d0079c5): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2ce79457-ad5c-4b44-946e-a1f58d0079c5',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'MOJOQ1W6tu1SlLiNnjST', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:17:46.335] [DEBUG] debug - [
  `Executing (1bbfd0b6-043c-4d6e-829a-405d6a489ab2): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1bbfd0b6-043c-4d6e-829a-405d6a489ab2',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:17:46.431] [DEBUG] debug - [
  'Executing (2ce79457-ad5c-4b44-946e-a1f58d0079c5): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'MOJOQ1W6tu1SlLiNnjST', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '2ce79457-ad5c-4b44-946e-a1f58d0079c5',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:17:46.444] [DEBUG] debug - [
  'Executing (1bbfd0b6-043c-4d6e-829a-405d6a489ab2): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '1bbfd0b6-043c-4d6e-829a-405d6a489ab2',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:17:48.143] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:17:48.246] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:17:48.347] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:17:51.413] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:18:15.813] [DEBUG] debug - [
  'Executing (a5451bc8-84cf-4869-86e2-751b4e2c2e34): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '1GqV3gutVPrzCR3P14vG', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a5451bc8-84cf-4869-86e2-751b4e2c2e34',
      connection: [Client]
    }
  }
]
[2023-05-26T02:18:15.819] [DEBUG] debug - [
  'Executing (cdb37100-3263-42a8-8290-5d85445ce23e): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cdb37100-3263-42a8-8290-5d85445ce23e',
      connection: [Client]
    }
  }
]
[2023-05-26T02:18:15.907] [DEBUG] debug - [
  `Executing (a5451bc8-84cf-4869-86e2-751b4e2c2e34): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a5451bc8-84cf-4869-86e2-751b4e2c2e34',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '1GqV3gutVPrzCR3P14vG', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:18:15.911] [DEBUG] debug - [
  `Executing (cdb37100-3263-42a8-8290-5d85445ce23e): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cdb37100-3263-42a8-8290-5d85445ce23e',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:18:15.993] [DEBUG] debug - [
  'Executing (a5451bc8-84cf-4869-86e2-751b4e2c2e34): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '1GqV3gutVPrzCR3P14vG', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a5451bc8-84cf-4869-86e2-751b4e2c2e34',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:18:16.010] [DEBUG] debug - [
  'Executing (cdb37100-3263-42a8-8290-5d85445ce23e): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cdb37100-3263-42a8-8290-5d85445ce23e',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:18:18.900] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:18:18.994] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:18:19.096] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:20:34.006] [DEBUG] debug - [
  'Executing (a2cfb491-854c-454a-96ce-af90cbc78230): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'YcSb3B8Aym4MiQa7qLGb', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a2cfb491-854c-454a-96ce-af90cbc78230',
      connection: [Client]
    }
  }
]
[2023-05-26T02:20:34.032] [DEBUG] debug - [
  'Executing (c3fff3c6-a532-40a9-8a79-768022d13f8b): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c3fff3c6-a532-40a9-8a79-768022d13f8b',
      connection: [Client]
    }
  }
]
[2023-05-26T02:20:34.099] [DEBUG] debug - [
  `Executing (a2cfb491-854c-454a-96ce-af90cbc78230): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a2cfb491-854c-454a-96ce-af90cbc78230',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'YcSb3B8Aym4MiQa7qLGb', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:20:34.147] [DEBUG] debug - [
  `Executing (c3fff3c6-a532-40a9-8a79-768022d13f8b): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c3fff3c6-a532-40a9-8a79-768022d13f8b',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:20:34.188] [DEBUG] debug - [
  'Executing (a2cfb491-854c-454a-96ce-af90cbc78230): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'YcSb3B8Aym4MiQa7qLGb', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a2cfb491-854c-454a-96ce-af90cbc78230',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:20:34.265] [DEBUG] debug - [
  'Executing (c3fff3c6-a532-40a9-8a79-768022d13f8b): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'c3fff3c6-a532-40a9-8a79-768022d13f8b',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:20:35.449] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:20:35.548] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:20:35.643] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:57:39.209] [DEBUG] debug - [
  'Executing (ff5b82a3-c131-474f-8b10-5bd5a1f32a0a): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'wWT2YqQokYVLgecxOpWh', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ff5b82a3-c131-474f-8b10-5bd5a1f32a0a',
      connection: [Client]
    }
  }
]
[2023-05-26T02:57:39.214] [DEBUG] debug - [
  'Executing (86c4cd93-44cf-4db1-b7f6-7c32fadbf564): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '86c4cd93-44cf-4db1-b7f6-7c32fadbf564',
      connection: [Client]
    }
  }
]
[2023-05-26T02:57:39.304] [DEBUG] debug - [
  `Executing (ff5b82a3-c131-474f-8b10-5bd5a1f32a0a): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ff5b82a3-c131-474f-8b10-5bd5a1f32a0a',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'wWT2YqQokYVLgecxOpWh', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T02:57:39.310] [DEBUG] debug - [
  `Executing (86c4cd93-44cf-4db1-b7f6-7c32fadbf564): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '86c4cd93-44cf-4db1-b7f6-7c32fadbf564',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T02:57:39.409] [DEBUG] debug - [
  'Executing (ff5b82a3-c131-474f-8b10-5bd5a1f32a0a): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'wWT2YqQokYVLgecxOpWh', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ff5b82a3-c131-474f-8b10-5bd5a1f32a0a',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:57:39.412] [DEBUG] debug - [
  'Executing (86c4cd93-44cf-4db1-b7f6-7c32fadbf564): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '86c4cd93-44cf-4db1-b7f6-7c32fadbf564',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T02:57:43.828] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:57:43.923] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T02:57:44.027] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:07:50.618] [DEBUG] debug - [
  'Executing (406b1db4-df77-4405-946e-7871a5123c06): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '6Ours3WFmgjO6SBvGswC', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '406b1db4-df77-4405-946e-7871a5123c06',
      connection: [Client]
    }
  }
]
[2023-05-26T03:07:50.624] [DEBUG] debug - [
  'Executing (68148f3f-d4f3-45ce-8de5-03177330fc35): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '68148f3f-d4f3-45ce-8de5-03177330fc35',
      connection: [Client]
    }
  }
]
[2023-05-26T03:07:50.701] [DEBUG] debug - [
  `Executing (406b1db4-df77-4405-946e-7871a5123c06): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '406b1db4-df77-4405-946e-7871a5123c06',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '6Ours3WFmgjO6SBvGswC', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:07:50.717] [DEBUG] debug - [
  `Executing (68148f3f-d4f3-45ce-8de5-03177330fc35): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '68148f3f-d4f3-45ce-8de5-03177330fc35',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:07:50.791] [DEBUG] debug - [
  'Executing (406b1db4-df77-4405-946e-7871a5123c06): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '6Ours3WFmgjO6SBvGswC', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '406b1db4-df77-4405-946e-7871a5123c06',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:07:50.808] [DEBUG] debug - [
  'Executing (68148f3f-d4f3-45ce-8de5-03177330fc35): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '68148f3f-d4f3-45ce-8de5-03177330fc35',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:07:52.869] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:07:52.970] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:07:53.099] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:08:06.150] [DEBUG] debug - [
  'Executing (63af5452-58c9-4754-85b8-954c12140cc5): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'dvGdZ2FTdlgLAKWP9b2U', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '63af5452-58c9-4754-85b8-954c12140cc5',
      connection: [Client]
    }
  }
]
[2023-05-26T03:08:06.153] [DEBUG] debug - [
  'Executing (224ab75f-2428-4db7-a874-e650eb5e5865): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '224ab75f-2428-4db7-a874-e650eb5e5865',
      connection: [Client]
    }
  }
]
[2023-05-26T03:08:06.257] [DEBUG] debug - [
  `Executing (63af5452-58c9-4754-85b8-954c12140cc5): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '63af5452-58c9-4754-85b8-954c12140cc5',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'dvGdZ2FTdlgLAKWP9b2U', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:08:06.261] [DEBUG] debug - [
  `Executing (224ab75f-2428-4db7-a874-e650eb5e5865): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '224ab75f-2428-4db7-a874-e650eb5e5865',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:08:06.343] [DEBUG] debug - [
  'Executing (63af5452-58c9-4754-85b8-954c12140cc5): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'dvGdZ2FTdlgLAKWP9b2U', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '63af5452-58c9-4754-85b8-954c12140cc5',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:08:06.352] [DEBUG] debug - [
  'Executing (224ab75f-2428-4db7-a874-e650eb5e5865): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '224ab75f-2428-4db7-a874-e650eb5e5865',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:08:10.614] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:08:10.710] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:08:10.804] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:10:03.565] [DEBUG] debug - [
  'Executing (a4c2e341-ecd2-4050-af4d-260eec7b4264): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'QrEXjXWVcfNEEqVzt3WX', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a4c2e341-ecd2-4050-af4d-260eec7b4264',
      connection: [Client]
    }
  }
]
[2023-05-26T03:10:03.573] [DEBUG] debug - [
  'Executing (bdc1d50b-aab5-4943-824d-32d3cdf14a84): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'bdc1d50b-aab5-4943-824d-32d3cdf14a84',
      connection: [Client]
    }
  }
]
[2023-05-26T03:10:03.644] [DEBUG] debug - [
  `Executing (a4c2e341-ecd2-4050-af4d-260eec7b4264): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a4c2e341-ecd2-4050-af4d-260eec7b4264',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'QrEXjXWVcfNEEqVzt3WX', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:10:03.661] [DEBUG] debug - [
  `Executing (bdc1d50b-aab5-4943-824d-32d3cdf14a84): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'bdc1d50b-aab5-4943-824d-32d3cdf14a84',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:10:03.732] [DEBUG] debug - [
  'Executing (a4c2e341-ecd2-4050-af4d-260eec7b4264): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'QrEXjXWVcfNEEqVzt3WX', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a4c2e341-ecd2-4050-af4d-260eec7b4264',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:10:03.754] [DEBUG] debug - [
  'Executing (bdc1d50b-aab5-4943-824d-32d3cdf14a84): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'bdc1d50b-aab5-4943-824d-32d3cdf14a84',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:10:25.803] [DEBUG] debug - [
  'Executing (cc254ca2-e85b-416b-9d25-66f261565cf0): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Li9JvPNV7xZHdQSFJYHD', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cc254ca2-e85b-416b-9d25-66f261565cf0',
      connection: [Client]
    }
  }
]
[2023-05-26T03:10:25.806] [DEBUG] debug - [
  'Executing (a2258ea5-b7ac-4cb4-aacd-5d5d864e6501): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a2258ea5-b7ac-4cb4-aacd-5d5d864e6501',
      connection: [Client]
    }
  }
]
[2023-05-26T03:10:25.899] [DEBUG] debug - [
  `Executing (cc254ca2-e85b-416b-9d25-66f261565cf0): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cc254ca2-e85b-416b-9d25-66f261565cf0',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'Li9JvPNV7xZHdQSFJYHD', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:10:25.901] [DEBUG] debug - [
  `Executing (a2258ea5-b7ac-4cb4-aacd-5d5d864e6501): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a2258ea5-b7ac-4cb4-aacd-5d5d864e6501',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:10:25.997] [DEBUG] debug - [
  'Executing (cc254ca2-e85b-416b-9d25-66f261565cf0): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'Li9JvPNV7xZHdQSFJYHD', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'cc254ca2-e85b-416b-9d25-66f261565cf0',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:10:25.999] [DEBUG] debug - [
  'Executing (a2258ea5-b7ac-4cb4-aacd-5d5d864e6501): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'a2258ea5-b7ac-4cb4-aacd-5d5d864e6501',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:10:40.102] [DEBUG] debug - [
  'Executing (ea5790e4-4fdd-4615-b605-5c1c432e17bf): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'cijg1EPJbh5Bt1WpCYvE', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ea5790e4-4fdd-4615-b605-5c1c432e17bf',
      connection: [Client]
    }
  }
]
[2023-05-26T03:10:40.106] [DEBUG] debug - [
  'Executing (9b128d7a-4ee7-47d3-b549-54ecda98a338): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9b128d7a-4ee7-47d3-b549-54ecda98a338',
      connection: [Client]
    }
  }
]
[2023-05-26T03:10:40.203] [DEBUG] debug - [
  `Executing (ea5790e4-4fdd-4615-b605-5c1c432e17bf): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ea5790e4-4fdd-4615-b605-5c1c432e17bf',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'cijg1EPJbh5Bt1WpCYvE', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:10:40.207] [DEBUG] debug - [
  `Executing (9b128d7a-4ee7-47d3-b549-54ecda98a338): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9b128d7a-4ee7-47d3-b549-54ecda98a338',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:10:40.291] [DEBUG] debug - [
  'Executing (ea5790e4-4fdd-4615-b605-5c1c432e17bf): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'cijg1EPJbh5Bt1WpCYvE', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'ea5790e4-4fdd-4615-b605-5c1c432e17bf',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:10:40.302] [DEBUG] debug - [
  'Executing (9b128d7a-4ee7-47d3-b549-54ecda98a338): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '9b128d7a-4ee7-47d3-b549-54ecda98a338',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:10:41.446] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:10:41.542] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:10:41.671] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:21:24.730] [DEBUG] debug - [
  'Executing (0956487a-57f8-45e1-8db2-45967e75a1bc): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'cnxdPwV2yRBn9Qbu062o', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0956487a-57f8-45e1-8db2-45967e75a1bc',
      connection: [Client]
    }
  }
]
[2023-05-26T03:21:24.736] [DEBUG] debug - [
  'Executing (6828d6c6-1c52-4589-892a-e3a706f279ba): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6828d6c6-1c52-4589-892a-e3a706f279ba',
      connection: [Client]
    }
  }
]
[2023-05-26T03:21:24.866] [DEBUG] debug - [
  `Executing (0956487a-57f8-45e1-8db2-45967e75a1bc): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0956487a-57f8-45e1-8db2-45967e75a1bc',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'cnxdPwV2yRBn9Qbu062o', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:21:24.875] [DEBUG] debug - [
  `Executing (6828d6c6-1c52-4589-892a-e3a706f279ba): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6828d6c6-1c52-4589-892a-e3a706f279ba',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:21:24.995] [DEBUG] debug - [
  'Executing (0956487a-57f8-45e1-8db2-45967e75a1bc): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'cnxdPwV2yRBn9Qbu062o', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '0956487a-57f8-45e1-8db2-45967e75a1bc',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:21:25.003] [DEBUG] debug - [
  'Executing (6828d6c6-1c52-4589-892a-e3a706f279ba): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6828d6c6-1c52-4589-892a-e3a706f279ba',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:21:58.252] [DEBUG] debug - [
  'Executing (42f36848-e362-46ff-968a-b68774d52467): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'n899gAWgIpJXQsgCEBRJ', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '42f36848-e362-46ff-968a-b68774d52467',
      connection: [Client]
    }
  }
]
[2023-05-26T03:21:58.256] [DEBUG] debug - [
  'Executing (6479c7ee-0a23-499d-807e-7dae7daa2172): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6479c7ee-0a23-499d-807e-7dae7daa2172',
      connection: [Client]
    }
  }
]
[2023-05-26T03:21:58.362] [DEBUG] debug - [
  `Executing (42f36848-e362-46ff-968a-b68774d52467): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '42f36848-e362-46ff-968a-b68774d52467',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'n899gAWgIpJXQsgCEBRJ', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:21:58.368] [DEBUG] debug - [
  `Executing (6479c7ee-0a23-499d-807e-7dae7daa2172): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6479c7ee-0a23-499d-807e-7dae7daa2172',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:21:58.468] [DEBUG] debug - [
  'Executing (42f36848-e362-46ff-968a-b68774d52467): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'n899gAWgIpJXQsgCEBRJ', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '42f36848-e362-46ff-968a-b68774d52467',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:21:58.472] [DEBUG] debug - [
  'Executing (6479c7ee-0a23-499d-807e-7dae7daa2172): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '6479c7ee-0a23-499d-807e-7dae7daa2172',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:22:02.203] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:22:02.314] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:22:02.418] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:22:43.591] [DEBUG] debug - [
  'Executing (37f58286-694e-4340-9124-d0485618940a): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'FyP39Fdona3ZU4SLRQY4', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '37f58286-694e-4340-9124-d0485618940a',
      connection: [Client]
    }
  }
]
[2023-05-26T03:22:43.594] [DEBUG] debug - [
  'Executing (79402a47-a2ee-41d5-a516-4bad854ae563): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '79402a47-a2ee-41d5-a516-4bad854ae563',
      connection: [Client]
    }
  }
]
[2023-05-26T03:22:43.691] [DEBUG] debug - [
  `Executing (37f58286-694e-4340-9124-d0485618940a): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '37f58286-694e-4340-9124-d0485618940a',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'FyP39Fdona3ZU4SLRQY4', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:22:43.694] [DEBUG] debug - [
  `Executing (79402a47-a2ee-41d5-a516-4bad854ae563): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '79402a47-a2ee-41d5-a516-4bad854ae563',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T03:22:43.784] [DEBUG] debug - [
  'Executing (37f58286-694e-4340-9124-d0485618940a): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'FyP39Fdona3ZU4SLRQY4', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '37f58286-694e-4340-9124-d0485618940a',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:22:43.797] [DEBUG] debug - [
  'Executing (79402a47-a2ee-41d5-a516-4bad854ae563): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '79402a47-a2ee-41d5-a516-4bad854ae563',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T03:22:46.077] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:22:46.171] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:22:46.274] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'auth')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:23:11.006] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:23:11.106] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:23:11.261] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:23:11.360] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:23:11.455] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:23:37.543] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:23:37.638] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:23:37.795] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:23:37.888] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:23:37.977] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:23:38.323] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:23:38.427] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T03:25:31.901] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:25:31.997] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:26:05.616] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:26:05.697] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:37:02.093] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:37:02.179] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:37:10.939] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:37:11.026] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:37:25.258] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T03:37:25.336] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:50:45.531] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:50:45.626] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:50:46.664] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Bert.Lang',
      'n4wFoMjFxkrGfyE',
      'Nellie Homenick Sr.',
      '2023-05-26 13:50:45.760 +00:00',
      '2023-05-26 13:50:45.760 +00:00'
    ]
  }
]
[2023-05-26T08:50:46.796] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+Zj1wOmRTOo8JjSmd1CVyr4QSP0PElb1QBRf/HVMTfrItx+WuoT/8V',
      'U2FsdGVkX1/KLDVbmJkFMCHfVz9UdCVRNV4fUGoEEuEVATgKrD3ONOMkv4DZiACgBG2IyZ7eeRuoRkIyQGJfm7h0wDmthDbrPJsQZEBxOcQH4wohiBHzzDrLQhqCKevwWFJmI76HIf9BMIsppUtsYeGlDWYdAxzztABdtBmBoAUef7RRhiOaSZF8KbjPFG9R',
      '3wq"RM3[5r',
      'PumzWbbZlD3t90I938qc',
      '2023-05-26 14:50:46.789 +00:00',
      '2831b2a2-8ae2-485a-aae5-75df70e4b99a',
      '2023-05-26 13:50:46.795 +00:00',
      '2023-05-26 13:50:46.795 +00:00'
    ]
  }
]
[2023-05-26T08:50:46.963] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:50:47.070] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Zj1wOmRTOo8JjSmd1CVyr4QSP0PElb1QBRf/HVMTfrItx+WuoT/8V' AND "Token"."expiresAt" >= '2023-05-26 13:50:47.059 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Zj1wOmRTOo8JjSmd1CVyr4QSP0PElb1QBRf/HVMTfrItx+WuoT/8V' AND "Token"."expiresAt" >= '2023-05-26 13:50:47.059 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:50:47.165] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:51:03.318] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:51:03.733] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:51:04.755] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Eduardo51',
      't8hN5npxJfn3LX8',
      'Miss Lillie Smith-Botsford DVM',
      '2023-05-26 13:51:03.851 +00:00',
      '2023-05-26 13:51:03.851 +00:00'
    ]
  }
]
[2023-05-26T08:51:04.874] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19YnqHosWJMmNRKQlILFQxv8MCLoaG0ytif3SmOM5GdAHv6V6IRscZA',
      'U2FsdGVkX1+tjV3jyAOGcugSAWI59qVEEyZYZqgH6wvscfdnSAaOpCb6kh85WnkwkgYZ1I4dqYd6zCuPRUWlhvTkgCAEjEoqve7u6o6OPB5/vrkbK52CU19qoWGMvHGo1lyPStKni6M8x3chxRD79YLIjhAnpctQx68Lb2OA33KzJYx+mE+5DJVrh8DihZr4',
      'L;#yA^N);^',
      'odxd0qJ3wf9aKmCHBUZw',
      '2023-05-26 14:51:04.854 +00:00',
      '6b157ba7-771a-4578-ab3e-5a6ea4134562',
      '2023-05-26 13:51:04.871 +00:00',
      '2023-05-26 13:51:04.871 +00:00'
    ]
  }
]
[2023-05-26T08:51:05.039] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:51:05.145] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19YnqHosWJMmNRKQlILFQxv8MCLoaG0ytif3SmOM5GdAHv6V6IRscZA' AND "Token"."expiresAt" >= '2023-05-26 13:51:05.133 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19YnqHosWJMmNRKQlILFQxv8MCLoaG0ytif3SmOM5GdAHv6V6IRscZA' AND "Token"."expiresAt" >= '2023-05-26 13:51:05.133 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:51:05.241] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:52:33.289] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:33.374] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:52:34.351] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Kylee99',
      'nhSeQPjBsnmFwxV',
      'Katrina Leffler',
      '2023-05-26 13:52:33.466 +00:00',
      '2023-05-26 13:52:33.466 +00:00'
    ]
  }
]
[2023-05-26T08:52:34.487] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19rnvn2Cdv9RtSmQ6uX4BRLeXEDQBitIvRH4obZMQBmTJFe8bim+JIz',
      'U2FsdGVkX1/e/eLf+kc36AYD5/FWDIWhns75NyzxLCTX7uo3v4n4pT/+OEmTkrDkZl81FEr2fqPEc0j6sfHMCJ8LEGrRJltKZaie47oUgoQaVn65220x80jK0nbUOViYCi25o3SOs9uJ7iDMiX+a/h7+7yBYn9jvS4rcq0dZBnFhxFSkalnstpWjEw0WJGgZ',
      '^WW3DkS:Au',
      'sl0MAgwtad3y2kNpcrUS',
      '2023-05-26 14:52:34.476 +00:00',
      '53698382-1d65-4451-b581-6cf2fdada677',
      '2023-05-26 13:52:34.486 +00:00',
      '2023-05-26 13:52:34.486 +00:00'
    ]
  }
]
[2023-05-26T08:52:34.660] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:34.759] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19rnvn2Cdv9RtSmQ6uX4BRLeXEDQBitIvRH4obZMQBmTJFe8bim+JIz' AND "Token"."expiresAt" >= '2023-05-26 13:52:34.747 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19rnvn2Cdv9RtSmQ6uX4BRLeXEDQBitIvRH4obZMQBmTJFe8bim+JIz' AND "Token"."expiresAt" >= '2023-05-26 13:52:34.747 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:52:34.863] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:52:34.961] [DEBUG] debug - [
  `Executing (default): DELETE FROM "token" WHERE "id" = 'f9629720-720f-4a12-a71c-5ab76089513e' AND "userId" = '53698382-1d65-4451-b581-6cf2fdada677'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: Token
  }
]
[2023-05-26T08:52:35.072] [DEBUG] debug - [
  `Executing (default): DELETE FROM "user" WHERE "id" = '53698382-1d65-4451-b581-6cf2fdada677'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: User
  }
]
[2023-05-26T08:52:48.328] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:48.410] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:52:48.586] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:48.650] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:48.670] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:48.748] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:52:48.859] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:52:48.958] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:52:51.440] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T08:52:51.976] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:52.246] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:52.325] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:52.543] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:54.442] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:52:54.519] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:17.121] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:17.689] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:17.767] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:17.932] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:18.018] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:18.105] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:18.220] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:18.315] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:20.988] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T08:55:21.086] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:21.168] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:21.333] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:21.418] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:21.486] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:21.557] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:21.728] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:21.824] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:21.993] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:22.092] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:22.179] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:22.177] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:22.282] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:22.272] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:22.436] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Newton79',
      'q2vGX2wMvKbe9ux',
      'Kay Dooley Jr.',
      '2023-05-26 13:55:21.583 +00:00',
      '2023-05-26 13:55:21.583 +00:00'
    ]
  }
]
[2023-05-26T08:55:22.562] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18dpA9mMO0Z8t9kgzIkYkPCvSF9rxIzbR8WiCyTIIEPxlDNsEC6tdAH',
      'U2FsdGVkX19MO4cTpm5X6lvA8nPVk65RFYERtnhPtFYY1tz8pOMC08Gt6Uf9zr+x8MXgbHXkZr191o/HH0B47KuwNgVl5vkl7mHUs9My9rBXphlWmT+z8fupFMMF91Euyti+SAHkXF8t+FWAZ09YysFJEvM5LEc4ERDEfb1+JJ+YoUJAs7dDNaI1olncJHMn',
      '*i&R+qW;gM',
      'o0st136i2hLSsl3BDe4S',
      '2023-05-26 14:55:22.546 +00:00',
      '1c5a33db-5c12-43de-a90c-83a558ce78d4',
      '2023-05-26 13:55:22.560 +00:00',
      '2023-05-26 13:55:22.560 +00:00'
    ]
  }
]
[2023-05-26T08:55:22.715] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:55:23.434] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18dpA9mMO0Z8t9kgzIkYkPCvSF9rxIzbR8WiCyTIIEPxlDNsEC6tdAH' AND "Token"."expiresAt" >= '2023-05-26 13:55:23.422 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18dpA9mMO0Z8t9kgzIkYkPCvSF9rxIzbR8WiCyTIIEPxlDNsEC6tdAH' AND "Token"."expiresAt" >= '2023-05-26 13:55:23.422 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:55:23.535] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:55:23.660] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'T4(&,#u[:tsrar)q&;_%' AND "Token"."expiresAt" >= '2023-05-26 13:55:23.659 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'T4(&,#u[:tsrar)q&;_%' AND "Token"."expiresAt" >= '2023-05-26 13:55:23.659 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:56:17.074] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:17.639] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:18.202] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:18.370] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:18.451] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:18.534] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:18.639] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:18.736] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:20.870] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:20.949] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:21.104] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:21.315] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T08:56:21.791] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:21.899] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:21.909] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:21.986] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:22.431] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:22.604] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:22.697] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:22.815] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:22.872] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Kyle.McKenzie',
      'CprEiJtfCU3RwLe',
      'Michele Langworth',
      '2023-05-26 13:56:22.002 +00:00',
      '2023-05-26 13:56:22.002 +00:00'
    ]
  }
]
[2023-05-26T08:56:22.906] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:22.990] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/t26n8fAuGbNhYbzu8Dsg4NNbOHKpO20BpTvjrPRqRS5VMvIqm5axU',
      'U2FsdGVkX1/eoCMOecfl0kGZR1UmhOAesjy1OJiW+RCj4rXoMtoFsxKbfeRGhu+qew4Vr1ZFsBMiuk00P5yxtwvrSAueK5PXHEfqUWwYDmQhfqvV/zUuWXOM6upwdFX97180vWEhMLLRtpchNOB9yRh01IEN/FjWjVAb+EAFDs5nahA4cZUAzXge9x1ZbCvk',
      'yM[7|(pU0P',
      'xhnQICKNTfmUQA8k2DQO',
      '2023-05-26 14:56:22.981 +00:00',
      '20f31060-81af-4996-8412-11eee354bbbe',
      '2023-05-26 13:56:22.989 +00:00',
      '2023-05-26 13:56:22.989 +00:00'
    ]
  }
]
[2023-05-26T08:56:22.992] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:23.094] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:23.143] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:56:23.557] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/t26n8fAuGbNhYbzu8Dsg4NNbOHKpO20BpTvjrPRqRS5VMvIqm5axU' AND "Token"."expiresAt" >= '2023-05-26 13:56:23.551 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/t26n8fAuGbNhYbzu8Dsg4NNbOHKpO20BpTvjrPRqRS5VMvIqm5axU' AND "Token"."expiresAt" >= '2023-05-26 13:56:23.551 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:56:23.650] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:56:23.772] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'c/sf+iCS;,kGSa2sqdme' AND "Token"."expiresAt" >= '2023-05-26 13:56:23.770 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'c/sf+iCS;,kGSa2sqdme' AND "Token"."expiresAt" >= '2023-05-26 13:56:23.770 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:58:28.853] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:29.383] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:29.466] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:29.649] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:29.735] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:29.826] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:29.939] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:30.029] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:32.836] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:32.835] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:32.920] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:32.917] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:33.086] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:33.174] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:33.293] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:33.388] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:33.402] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T08:58:33.479] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:33.565] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:33.639] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:33.718] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:33.853] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:33.934] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:34.713] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Enrique.Koelpin50',
      '7hjdkAywacZ_dHe',
      'Jessica Volkman',
      '2023-05-26 13:58:33.810 +00:00',
      '2023-05-26 13:58:33.810 +00:00'
    ]
  }
]
[2023-05-26T08:58:34.834] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18jkHPSO8KQ6abgDBaKLJLkvDDmbWoRglrk6fhxHEUjX33HJpx/oEQJ',
      'U2FsdGVkX1/k5+xoY4XEBzned+2qy4AX4FOKCGnLvi0LHFAOupAaAKztT07d2Sgl1WU6BeI9lS2ZOrkdPVJLVbCYESNMcHa0mwDY4a3RiLKswZMOX7XzNb2univv/fH3lXcuO/6z7Cmf8Wc5IB5E8m6elrER/VlyK6kQg01KLloxt3h1KhzyjN8LxAu6pfdX',
      '|iRHM05l$9',
      'jhNQhKiOJfElQzMpTrLs',
      '2023-05-26 14:58:34.818 +00:00',
      '78871e22-831b-4d6f-803f-21f974debaed',
      '2023-05-26 13:58:34.832 +00:00',
      '2023-05-26 13:58:34.832 +00:00'
    ]
  }
]
[2023-05-26T08:58:34.982] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T08:58:35.081] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18jkHPSO8KQ6abgDBaKLJLkvDDmbWoRglrk6fhxHEUjX33HJpx/oEQJ' AND "Token"."expiresAt" >= '2023-05-26 13:58:35.070 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18jkHPSO8KQ6abgDBaKLJLkvDDmbWoRglrk6fhxHEUjX33HJpx/oEQJ' AND "Token"."expiresAt" >= '2023-05-26 13:58:35.070 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T08:58:35.174] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T08:58:35.278] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'BU+qr9$jtL"$E2$DAcg!' AND "Token"."expiresAt" >= '2023-05-26 13:58:35.277 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'BU+qr9$jtL"$E2$DAcg!' AND "Token"."expiresAt" >= '2023-05-26 13:58:35.277 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:01:09.321] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:10.002] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:10.086] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:10.262] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:10.346] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:10.441] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:10.546] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:10.651] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:12.295] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T09:01:12.342] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:12.437] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:12.595] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:12.683] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:12.819] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:12.922] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:13.007] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:13.096] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:13.160] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:13.236] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:13.373] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:13.452] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:14.265] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Natasha_Stehr34',
      'lQMlbrBbMCxA0hl',
      'Nichole Nikolaus',
      '2023-05-26 14:01:13.322 +00:00',
      '2023-05-26 14:01:13.322 +00:00'
    ]
  }
]
[2023-05-26T09:01:14.384] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX193wuimwWk9nK1M+CQcdl6NobKuUf979FT3+3IpWoxQXTtsr/TTsmUp',
      'U2FsdGVkX18GCSW0dJk4/ajrie/Ri9GLzzk14CDfaX5DtJPGyjMePenywYv9I1BR8NWVtzuDmKyJ/X9Ak7OfI5Ug5xF3CNpHiplsIj5JtiOBN/REPl2ltQXZWX48k8TY1g13AyVjbtMHmgUTw7PfmKL1BHI3ic14wtShqRMSNO/iQLhH2VsspFboYVPbeb/7',
      "'U]D&eMK-M",
      '1povmhzkJubmbG561lc0',
      '2023-05-26 15:01:14.366 +00:00',
      '33156797-fe7e-4765-873b-7401888bf78b',
      '2023-05-26 14:01:14.382 +00:00',
      '2023-05-26 14:01:14.382 +00:00'
    ]
  }
]
[2023-05-26T09:01:14.531] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:14.606] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:14.631] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX193wuimwWk9nK1M+CQcdl6NobKuUf979FT3+3IpWoxQXTtsr/TTsmUp' AND "Token"."expiresAt" >= '2023-05-26 14:01:14.621 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX193wuimwWk9nK1M+CQcdl6NobKuUf979FT3+3IpWoxQXTtsr/TTsmUp' AND "Token"."expiresAt" >= '2023-05-26 14:01:14.621 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:01:14.686] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:01:14.720] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:01:14.829] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'ABs1Gs^^EDwvo>7lld?4' AND "Token"."expiresAt" >= '2023-05-26 14:01:14.827 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'ABs1Gs^^EDwvo>7lld?4' AND "Token"."expiresAt" >= '2023-05-26 14:01:14.827 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:02:12.849] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:13.291] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:13.379] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:13.549] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:13.631] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:13.723] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:13.840] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:13.931] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:16.439] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T09:02:16.530] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:16.543] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:16.630] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:16.619] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:16.629] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:16.695] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:16.918] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:17.007] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:17.180] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:17.279] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:17.381] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:17.479] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:17.705] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Vivian2',
      'RiIDNJlNvJQHpAY',
      'Lauren Walker',
      '2023-05-26 14:02:16.726 +00:00',
      '2023-05-26 14:02:16.726 +00:00'
    ]
  }
]
[2023-05-26T09:02:17.844] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19OjHfv89PoGl6WMaymmACtHX2fKVm0ssYh0RRK0/hJa4ejdSlNs3qG',
      'U2FsdGVkX194q+6Ajrytc9vhODHbHmrmTetdtHKdqQYiwzXk960PDYXJH90q/ZEt2rNSX4bxoX/GpW02qXnDF6YGZBQbgiekV0+SVzsZAtqnwUxH5RvfkGYBVUiUSfgLly231ym4l4VMcQ/vUyCLgM8LYJ01tIZEO4O++DkiTvHB/I+gCDDBKovYHtZqB17k',
      'i0u:yEr&>5',
      'e93M6Fy78D1HJcp4X5rI',
      '2023-05-26 15:02:17.817 +00:00',
      'c478650b-be94-4a14-b6a6-60c01f99b693',
      '2023-05-26 14:02:17.839 +00:00',
      '2023-05-26 14:02:17.839 +00:00'
    ]
  }
]
[2023-05-26T09:02:18.095] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:18.208] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19OjHfv89PoGl6WMaymmACtHX2fKVm0ssYh0RRK0/hJa4ejdSlNs3qG' AND "Token"."expiresAt" >= '2023-05-26 14:02:18.193 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19OjHfv89PoGl6WMaymmACtHX2fKVm0ssYh0RRK0/hJa4ejdSlNs3qG' AND "Token"."expiresAt" >= '2023-05-26 14:02:18.193 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:02:18.300] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:02:18.438] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '^LWqk:>b&8x0&N|i08z*' AND "Token"."expiresAt" >= '2023-05-26 14:02:18.434 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '^LWqk:>b&8x0&N|i08z*' AND "Token"."expiresAt" >= '2023-05-26 14:02:18.434 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:02:19.038] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:02:19.145] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:24.398] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:24.490] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:24.689] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:24.774] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:24.865] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:24.997] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:25.085] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:27.473] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:27.763] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:27.847] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:28.048] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:28.130] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:28.258] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:28.352] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:28.444] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:28.541] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:28.794] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T09:09:28.995] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:29.082] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:29.212] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:29.297] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:30.034] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Alexanne_Farrell',
      'fAoXT2QQL1wXOZb',
      'Ethel Bahringer',
      '2023-05-26 14:09:29.171 +00:00',
      '2023-05-26 14:09:29.171 +00:00'
    ]
  }
]
[2023-05-26T09:09:30.163] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18XSV4kQG3lIhAWfnq3swXfDv37awMolcWPPOiqiyrlv7rTJQLNwnv1',
      'U2FsdGVkX18G/p2MboylyaeketN0mhtAAQFdjrPVE9LAAgCkaNdAXHVpZAjt4Vy9FTlpwpmumfe8kTQbQqu5QqNeYBWYnf6c4bjGm9kLenwFL1vlrwE6ejLcLJwY0ZAv/gtee2dNcyDwvGdFPDZFj89Y0fVEyPeYoj5y2Sj3WqkFwbFtxQh2Fe6IA2XGLXyg',
      'w=di>j$Eun',
      'nj5hkQyKsI8qkWQ9Yi7S',
      '2023-05-26 15:09:30.144 +00:00',
      '2cb7ab77-c235-4a60-aed1-12fdc7ff6c14',
      '2023-05-26 14:09:30.160 +00:00',
      '2023-05-26 14:09:30.160 +00:00'
    ]
  }
]
[2023-05-26T09:09:30.351] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:09:30.450] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18XSV4kQG3lIhAWfnq3swXfDv37awMolcWPPOiqiyrlv7rTJQLNwnv1' AND "Token"."expiresAt" >= '2023-05-26 14:09:30.437 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18XSV4kQG3lIhAWfnq3swXfDv37awMolcWPPOiqiyrlv7rTJQLNwnv1' AND "Token"."expiresAt" >= '2023-05-26 14:09:30.437 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:09:30.549] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18XSV4kQG3lIhAWfnq3swXfDv37awMolcWPPOiqiyrlv7rTJQLNwnv1' AND "Token"."expiresAt" >= '2023-05-26 14:09:30.545 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18XSV4kQG3lIhAWfnq3swXfDv37awMolcWPPOiqiyrlv7rTJQLNwnv1' AND "Token"."expiresAt" >= '2023-05-26 14:09:30.545 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:09:30.642] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:09:30.774] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'z\\Ss9:&B3_=oOD*VUv{c' AND "Token"."expiresAt" >= '2023-05-26 14:09:30.772 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'z\\Ss9:&B3_=oOD*VUv{c' AND "Token"."expiresAt" >= '2023-05-26 14:09:30.772 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:12:13.951] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:14.037] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:14.249] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:14.337] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:14.444] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:14.559] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:14.655] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:16.632] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:17.501] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:17.505] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:17.588] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:17.592] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:17.810] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:17.898] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:18.012] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:18.024] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:18.036] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:18.092] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:18.114] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:18.119] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:18.231] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:18.230] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T09:12:18.319] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:19.108] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Tommie_Casper82',
      'DFYBwqspy0_U08U',
      'Joyce Zieme',
      '2023-05-26 14:12:18.230 +00:00',
      '2023-05-26 14:12:18.230 +00:00'
    ]
  }
]
[2023-05-26T09:12:19.235] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX190B5lh20N5ajX8M73aXmVdK0n21q4VLOEkRTKtZahxeGns0zzzLQ1k',
      'U2FsdGVkX19WYEpncDnC6F72Scvdmj8Lj38uaASD9atQ42sfdOgSnRYUtmubRdzsRxrIt2eE4FkDnfmqRrB5SW81ipz5qBhEIf9Rpw/ziXmqW/D0JmFzA8hhF2mG5nKNG6146hCVfOWESvz/b446Idg2qSfdYi8flCL3bDRh7FeROXdO3AS6dr3rGgiIsBSM',
      'E{7;Nsh>[H',
      'crnandbyKjSt0MSw7HqS',
      '2023-05-26 15:12:19.215 +00:00',
      '95923fdc-f004-4bf5-92ec-cb7e7e85efab',
      '2023-05-26 14:12:19.232 +00:00',
      '2023-05-26 14:12:19.232 +00:00'
    ]
  }
]
[2023-05-26T09:12:19.454] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T09:12:19.566] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX190B5lh20N5ajX8M73aXmVdK0n21q4VLOEkRTKtZahxeGns0zzzLQ1k' AND "Token"."expiresAt" >= '2023-05-26 14:12:19.555 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX190B5lh20N5ajX8M73aXmVdK0n21q4VLOEkRTKtZahxeGns0zzzLQ1k' AND "Token"."expiresAt" >= '2023-05-26 14:12:19.555 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T09:12:19.662] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T09:12:19.800] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 't}u9"I}pSEMH"*+M*lm8' AND "Token"."expiresAt" >= '2023-05-26 14:12:19.796 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 't}u9"I}pSEMH"*+M*lm8' AND "Token"."expiresAt" >= '2023-05-26 14:12:19.796 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T11:12:02.064] [DEBUG] debug - [
  'Executing (fd8e8a2e-d6d6-4330-bc95-1e886ba2c334): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '0zIb4mKkMLuFs7ECYztE', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'fd8e8a2e-d6d6-4330-bc95-1e886ba2c334',
      connection: [Client]
    }
  }
]
[2023-05-26T11:12:02.109] [DEBUG] debug - [
  'Executing (963c95ab-fada-417c-8b1e-ea1f7c3c7b40): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '963c95ab-fada-417c-8b1e-ea1f7c3c7b40',
      connection: [Client]
    }
  }
]
[2023-05-26T11:12:02.186] [DEBUG] debug - [
  `Executing (fd8e8a2e-d6d6-4330-bc95-1e886ba2c334): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'fd8e8a2e-d6d6-4330-bc95-1e886ba2c334',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: '0zIb4mKkMLuFs7ECYztE', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:12:02.200] [DEBUG] debug - [
  `Executing (963c95ab-fada-417c-8b1e-ea1f7c3c7b40): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '963c95ab-fada-417c-8b1e-ea1f7c3c7b40',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T11:12:02.317] [DEBUG] debug - [
  'Executing (fd8e8a2e-d6d6-4330-bc95-1e886ba2c334): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: '0zIb4mKkMLuFs7ECYztE', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: 'fd8e8a2e-d6d6-4330-bc95-1e886ba2c334',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T11:12:02.328] [DEBUG] debug - [
  'Executing (963c95ab-fada-417c-8b1e-ea1f7c3c7b40): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '963c95ab-fada-417c-8b1e-ea1f7c3c7b40',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T11:12:08.680] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'localhost')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:12:08.768] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:12:39.852] [DEBUG] debug - [
  'Executing (21cfa5a9-3c11-41ab-93ec-5731a8b1747c): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'o3EYbvNDPq11N2CgQ6FI', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '21cfa5a9-3c11-41ab-93ec-5731a8b1747c',
      connection: [Client]
    }
  }
]
[2023-05-26T11:12:39.859] [DEBUG] debug - [
  'Executing (64a23500-2274-4285-b57f-d409d8e9b42e): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '64a23500-2274-4285-b57f-d409d8e9b42e',
      connection: [Client]
    }
  }
]
[2023-05-26T11:12:39.922] [DEBUG] debug - [
  `Executing (21cfa5a9-3c11-41ab-93ec-5731a8b1747c): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '21cfa5a9-3c11-41ab-93ec-5731a8b1747c',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'o3EYbvNDPq11N2CgQ6FI', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:12:39.942] [DEBUG] debug - [
  `Executing (64a23500-2274-4285-b57f-d409d8e9b42e): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '64a23500-2274-4285-b57f-d409d8e9b42e',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-05-26T11:12:40.001] [DEBUG] debug - [
  'Executing (21cfa5a9-3c11-41ab-93ec-5731a8b1747c): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'o3EYbvNDPq11N2CgQ6FI', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '21cfa5a9-3c11-41ab-93ec-5731a8b1747c',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T11:12:40.020] [DEBUG] debug - [
  'Executing (64a23500-2274-4285-b57f-d409d8e9b42e): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '64a23500-2274-4285-b57f-d409d8e9b42e',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-05-26T11:23:10.452] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:10.540] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:10.723] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:10.821] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:10.907] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:11.024] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:11.111] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:12.782] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:12.940] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:13.021] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:13.106] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:13.178] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:13.189] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:13.285] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:13.403] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:13.499] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:13.589] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:13.662] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:13.682] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:13.736] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:13.846] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:13.931] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:14.109] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-26T11:23:14.695] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Talia.Keebler31',
      'fzR6cmgdSrmvZJR',
      'Freda Moen PhD',
      '2023-05-26 16:23:13.821 +00:00',
      '2023-05-26 16:23:13.821 +00:00'
    ]
  }
]
[2023-05-26T11:23:14.806] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19RrYdFnMPOIZeddgkhwGhvm6ZePb+Y3BOti06IvEp+KraTSpvTd5gO',
      'U2FsdGVkX19YkDZYY79QRr4+Z6qfD05Gq2lkh5omPpvQkuta7Ka1jBDbgCTdFqmSMDDgDbt5dHd0Ra6lnwqI++NHFHF6HpbRpvRKUQyfCSnb09WWJr1bZgPWgCgd12pkhJfoYwxS+UTSWoczywuF1Es6svF07MVW+rvY7tjPsb3++RwgbQ7WHaHeIwfU4bZU',
      '0Extob1.27',
      '8ujlVrSNwCtelOdCx9Lh',
      '2023-05-26 17:23:14.793 +00:00',
      '6a76e7dc-0d19-4554-b067-07cc749472e6',
      '2023-05-26 16:23:14.805 +00:00',
      '2023-05-26 16:23:14.805 +00:00'
    ]
  }
]
[2023-05-26T11:23:14.953] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:23:15.038] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19RrYdFnMPOIZeddgkhwGhvm6ZePb+Y3BOti06IvEp+KraTSpvTd5gO' AND "Token"."expiresAt" >= '2023-05-26 16:23:15.031 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19RrYdFnMPOIZeddgkhwGhvm6ZePb+Y3BOti06IvEp+KraTSpvTd5gO' AND "Token"."expiresAt" >= '2023-05-26 16:23:15.031 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T11:23:15.136] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:23:15.245] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'8i#)NWuS2Fm/^`*v{^z\'\'\' AND "Token"."expiresAt" >= \'2023-05-26 16:23:15.244 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'8i#)NWuS2Fm/^`*v{^z\'\'\' AND "Token"."expiresAt" >= \'2023-05-26 16:23:15.244 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T11:25:11.936] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:12.028] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:12.198] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:12.274] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:12.362] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:12.468] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:12.555] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:15.263] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.294] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.315] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.345] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.376] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:15.390] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:15.419] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.505] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.538] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.795] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:15.938] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:16.066] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:16.176] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:16.268] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:16.361] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:16.431] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Angeline.Reynolds',
      'Q5BBCLQHLFuf5l5',
      'Dr. Paul Casper',
      '2023-05-26 16:25:15.482 +00:00',
      '2023-05-26 16:25:15.482 +00:00'
    ]
  }
]
[2023-05-26T11:25:16.539] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/Bf56Vpm8yV/xKqu6SImND1sdooKRJBQKArXDKrYXjUu2kZXuhG/Mx',
      'U2FsdGVkX19fHnt9FzPtj4plpr32RBa135n6hzyz3UoU8sxT17VTstI4dRoVmM8OssAWRGGFdbxx+H35s1RjaHM6jI/KajsZxNTV+ysMIy9SbxRRqMBvZAd+x+CtJCfkNGPl44x/a/WeTFftmMhcCAMP2JntevjfmzbY+bjbhRJuf0wD5qksMokdaCg+P1O4',
      'PF*Y1k[ng=',
      'Iyq9x9FFMy9FA65OlfSm',
      '2023-05-26 17:25:16.529 +00:00',
      '99393732-de3b-4fec-b0b5-0b1c6a0a37e3',
      '2023-05-26 16:25:16.537 +00:00',
      '2023-05-26 16:25:16.537 +00:00'
    ]
  }
]
[2023-05-26T11:25:16.743] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-26T11:25:16.831] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/Bf56Vpm8yV/xKqu6SImND1sdooKRJBQKArXDKrYXjUu2kZXuhG/Mx' AND "Token"."expiresAt" >= '2023-05-26 16:25:16.824 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/Bf56Vpm8yV/xKqu6SImND1sdooKRJBQKArXDKrYXjUu2kZXuhG/Mx' AND "Token"."expiresAt" >= '2023-05-26 16:25:16.824 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T11:25:16.914] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-26T11:25:17.013] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'.J^Gc3yDK;/=`^5P?qT>\' AND "Token"."expiresAt" >= \'2023-05-26 16:25:17.012 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'.J^Gc3yDK;/=`^5P?qT>\' AND "Token"."expiresAt" >= \'2023-05-26 16:25:17.012 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-26T11:25:17.321] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-29T10:34:20.610] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:20.695] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:21.064] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:21.145] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:21.223] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:21.365] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:21.460] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:32.201] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:32.278] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:32.331] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:32.402] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:33.115] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:33.202] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:33.338] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Dayana4',
      'oHGuxmluRWK7AJ4',
      'Heidi Fritsch',
      '2023-05-29 15:34:32.373 +00:00',
      '2023-05-29 15:34:32.373 +00:00'
    ]
  }
]
[2023-05-29T10:34:33.464] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18yvm0XL1SsIE1/ASUDPFVMvsvwVCwUytV8sWc2vdLkLnsZw1qwXmqP',
      'U2FsdGVkX1//ls5wvBCrztHJE6O/SRYCPTSbXC2aj4WPyDNe3jjRKNH8ytZ7UXVSh9wvYJBWSHsw3QseVhMggK5nkAJabuqaxmKdSsJM6QKvI5McCCt1GzG2vB9eG7LIKfbt8uyalskHzqO7fm/XzscnraY9A9oRvtynmSUconCVC2EG8odkxJyKW6A01ppU',
      '<2KH&^ZGum',
      'HSf7uRtijIftq1pkucgc',
      '2023-05-29 16:34:33.439 +00:00',
      'c4da7318-9864-4b8f-b853-d5a62aa4c2ba',
      '2023-05-29 15:34:33.461 +00:00',
      '2023-05-29 15:34:33.461 +00:00'
    ]
  }
]
[2023-05-29T10:34:33.460] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:33.504] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:33.537] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:33.588] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:33.784] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:33.975] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:34.079] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:34.177] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:34.270] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18yvm0XL1SsIE1/ASUDPFVMvsvwVCwUytV8sWc2vdLkLnsZw1qwXmqP' AND "Token"."expiresAt" >= '2023-05-29 15:34:34.252 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18yvm0XL1SsIE1/ASUDPFVMvsvwVCwUytV8sWc2vdLkLnsZw1qwXmqP' AND "Token"."expiresAt" >= '2023-05-29 15:34:34.252 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-29T10:34:34.283] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:34.365] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:34:34.508] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '3%w4:$+#\\9FaMf%3wy%/' AND "Token"."expiresAt" >= '2023-05-29 15:34:34.503 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '3%w4:$+#\\9FaMf%3wy%/' AND "Token"."expiresAt" >= '2023-05-29 15:34:34.503 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-29T10:34:34.380] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:34:36.920] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-29T10:37:37.691] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:38.205] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:38.585] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:38.667] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:38.750] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:38.876] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:38.973] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:42.032] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:42.192] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:42.275] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:42.510] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:42.617] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:42.680] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:42.697] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:42.730] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:43.220] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:44.639] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-29T10:37:46.024] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:46.973] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Trystan49',
      'qhtaTlBi4WkZ6q3',
      'Scott Schuster',
      '2023-05-29 15:37:46.125 +00:00',
      '2023-05-29 15:37:46.125 +00:00'
    ]
  }
]
[2023-05-29T10:37:47.081] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+Cs/Txk54nHuaxYlb+FnHw0UBJnUKrgP15TzqcQJFpBpWFw5zf2LD/',
      'U2FsdGVkX1+FLRbrkZ0tL25hVeapDQtoWITiDPxdQJlKFdMgUx9VSDrcqHbiS+JU9RO1tazDRlJ2Gl5LsMLwY+NKhrJzVvFI5HtEYjtHQ4JnUb6kwrhyUCjX+Lz1q++TufnSTWqODUKpPijlw7vXPiWhd3IyFj6MSCFZMeA52hwp8IgKa3lBiRhOFL72mnoQ',
      '-SKQlT#U$^',
      'EZnhrLKPQcbNgqjqgT4n',
      '2023-05-29 16:37:47.071 +00:00',
      '475ddc8c-16fc-40b3-8c4f-35a364f4e61c',
      '2023-05-29 15:37:47.080 +00:00',
      '2023-05-29 15:37:47.080 +00:00'
    ]
  }
]
[2023-05-29T10:37:47.258] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:37:47.635] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:47.758] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:47.848] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:47.934] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:48.029] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:48.126] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Cs/Txk54nHuaxYlb+FnHw0UBJnUKrgP15TzqcQJFpBpWFw5zf2LD/' AND "Token"."expiresAt" >= '2023-05-29 15:37:48.114 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Cs/Txk54nHuaxYlb+FnHw0UBJnUKrgP15TzqcQJFpBpWFw5zf2LD/' AND "Token"."expiresAt" >= '2023-05-29 15:37:48.114 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-29T10:37:48.213] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:37:48.318] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'`=)QPQ=IIicVBFsxdzj$\' AND "Token"."expiresAt" >= \'2023-05-29 15:37:48.316 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'`=)QPQ=IIicVBFsxdzj$\' AND "Token"."expiresAt" >= \'2023-05-29 15:37:48.316 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-29T10:38:37.390] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:37.484] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:37.522] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:37.574] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:37.604] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:37.650] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:37.656] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:37.735] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:37.746] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:37.825] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:37.855] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:37.944] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:38.053] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:38.090] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:38.145] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:38.743] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Shane64',
      'hF7JuZYnrlBpKMk',
      'Tasha Mills I',
      '2023-05-29 15:38:37.753 +00:00',
      '2023-05-29 15:38:37.753 +00:00'
    ]
  }
]
[2023-05-29T10:38:38.865] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+BASEb27Sh5R2wGT5AvfPjtKZ+CyMD88O7fQ+wVmfsfR8hlCxX8A8N',
      'U2FsdGVkX1+SHLJGWP7QnrB3fCL1aobwjCdA0FjCEP57Ogyr0s9N+dUvZeUa0JwkLndap4MS5+KFkkxLjXA+pZFMYx11rGEUkJsvpwiiNi3GTpcJgY3/fr3MTvoPbXtkEojFi6uRClLDA8SHObTtFPFytaHGk/I6avFxuzmMtza2JzZaOI242DyZjkeh8V9v',
      '{y[;S\\@/j?',
      '0TZuER3sIPhg4W9B330z',
      '2023-05-29 16:38:38.856 +00:00',
      'c50b7915-9925-42f2-a61d-bcfb809b28ae',
      '2023-05-29 15:38:38.864 +00:00',
      '2023-05-29 15:38:38.864 +00:00'
    ]
  }
]
[2023-05-29T10:38:39.015] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:39.132] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:39.398] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:39.412] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+BASEb27Sh5R2wGT5AvfPjtKZ+CyMD88O7fQ+wVmfsfR8hlCxX8A8N' AND "Token"."expiresAt" >= '2023-05-29 15:38:39.405 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+BASEb27Sh5R2wGT5AvfPjtKZ+CyMD88O7fQ+wVmfsfR8hlCxX8A8N' AND "Token"."expiresAt" >= '2023-05-29 15:38:39.405 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-29T10:38:39.503] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:39.552] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:39.618] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'W!u6@Px*${hfnC/mQ1v@\' AND "Token"."expiresAt" >= \'2023-05-29 15:38:39.617 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'W!u6@Px*${hfnC/mQ1v@\' AND "Token"."expiresAt" >= \'2023-05-29 15:38:39.617 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-29T10:38:39.644] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-29T10:38:39.666] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-29T10:38:39.742] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:39.846] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-29T10:38:39.946] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:31.525] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:31.950] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:32.743] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:32.821] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:32.983] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:32.987] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:33.222] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:33.264] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:33.404] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:33.399] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:33.504] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:33.504] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:33.507] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:33.615] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:33.666] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:33.719] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:33.801] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:33.875] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:33.880] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T07:16:33.921] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:34.028] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:34.137] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:34.276] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:35.119] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Kenyon_Pfeffer93',
      'T4AK6re5oEUd3Qd',
      'Mrs. Jackie Breitenberg Jr.',
      '2023-05-31 12:16:33.666 +00:00',
      '2023-05-31 12:16:33.666 +00:00'
    ]
  }
]
[2023-05-31T07:16:35.332] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/D7iwK6zpYQympoa7E6EnRLpSGiCoFagbiJa4vIjh+XngP27XUaFZR',
      'U2FsdGVkX1+vEvgBnuMbRVuF0rpUtW/zKFX33iEj1nnbkRoZVf1stDVxTwZl8DMIp4+uIIZRnH4ctOj52r0ETCHJh2dUggih3/Qd0IkVLAgy8HpmvaYyvdXEdndvJyU4XdyHvQwRqrlAeXRb8OCCI6J5/ZGAQZjKW5IX7FmIzHHKQyR7uzLqtxTrzMvw+n/I',
      's}pnV$T}uW',
      'bjfSjZSYQhP8eGWVVpzl',
      '2023-05-31 13:16:35.325 +00:00',
      '247fac56-86c1-4676-9544-82f82f969ebe',
      '2023-05-31 12:16:35.331 +00:00',
      '2023-05-31 12:16:35.331 +00:00'
    ]
  }
]
[2023-05-31T07:16:35.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:16:35.767] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/D7iwK6zpYQympoa7E6EnRLpSGiCoFagbiJa4vIjh+XngP27XUaFZR' AND "Token"."expiresAt" >= '2023-05-31 12:16:35.763 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/D7iwK6zpYQympoa7E6EnRLpSGiCoFagbiJa4vIjh+XngP27XUaFZR' AND "Token"."expiresAt" >= '2023-05-31 12:16:35.763 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:16:35.961] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:16:36.137] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'eb!jRm-+`+0}A,$x<50"\' AND "Token"."expiresAt" >= \'2023-05-31 12:16:36.136 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'eb!jRm-+`+0}A,$x<50"\' AND "Token"."expiresAt" >= \'2023-05-31 12:16:36.136 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:22:18.786] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:18.878] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:18.885] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:18.990] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.045] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.128] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.203] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.227] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.246] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.252] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.314] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.347] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.346] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.353] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.445] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.455] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.586] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.650] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.748] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:19.842] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:19.970] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:20.083] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:20.666] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Adella.Boyer',
      'uOhoheFO1cMTrns',
      'Edwin Bashirian MD',
      '2023-05-31 12:22:19.473 +00:00',
      '2023-05-31 12:22:19.473 +00:00'
    ]
  }
]
[2023-05-31T07:22:20.794] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX196LW9AjlvqESgsgTi6bFVGQnZ9/gAHehh4YKcaIPyhdHB6Ls9OC7OB',
      'U2FsdGVkX1+5DqYMyv/d9E9hOS0SUVjSmo9w8Cx7626pS7DHGw9axJaRmEtUK2EZPWXD0pa7bHUe3JDsAz6TZBlSwFtCoqosO45/8/UTSSQfzMYcJwhlUSJ5wBn4Xidsn2yjUUqIm7htGdPDURJWEN9AuTJb4Cs9HGv/EH1K6UmQ417gkUguUAQUlw7yQ/nm',
      '}rBa2!2ny!',
      'Q5eQoaXsw8xgfQYV2ij8',
      '2023-05-31 13:22:20.786 +00:00',
      '262b5f5b-e1b6-4ee2-bd8f-ad4b3ed7df6e',
      '2023-05-31 12:22:20.793 +00:00',
      '2023-05-31 12:22:20.793 +00:00'
    ]
  }
]
[2023-05-31T07:22:20.949] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:22:21.045] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T07:22:21.052] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX196LW9AjlvqESgsgTi6bFVGQnZ9/gAHehh4YKcaIPyhdHB6Ls9OC7OB' AND "Token"."expiresAt" >= '2023-05-31 12:22:21.047 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX196LW9AjlvqESgsgTi6bFVGQnZ9/gAHehh4YKcaIPyhdHB6Ls9OC7OB' AND "Token"."expiresAt" >= '2023-05-31 12:22:21.047 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:22:21.153] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:22:21.279] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '#t1[ISx:QYoMBu44|EoS' AND "Token"."expiresAt" >= '2023-05-31 12:22:21.277 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '#t1[ISx:QYoMBu44|EoS' AND "Token"."expiresAt" >= '2023-05-31 12:22:21.277 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:31:04.586] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:04.667] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:04.661] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:04.672] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:04.751] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:04.771] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:04.908] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:04.924] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:05.008] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:05.028] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:05.188] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:05.342] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:05.443] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:05.452] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:05.556] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:05.557] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:05.846] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:05.939] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:06.033] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:06.285] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:06.403] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Gordon_Ebert9',
      'zYwji_Ii9Y6zy9n',
      'Julie Cremin',
      '2023-05-31 12:31:04.762 +00:00',
      '2023-05-31 12:31:04.762 +00:00'
    ]
  }
]
[2023-05-31T07:31:06.465] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:06.534] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+Q4wTep5VhYrMse7LXqRHdPTd7v7KN56DMVDwD/bxEvTQTmuV6NK58',
      'U2FsdGVkX1+9Rx9BCX+Iywk07+thXl8doHuqFY4h55eKevoTpH3ZbT593X3+THSas3wNOPFWag4WxOgd014Tca80CfiHE+zi2QQ1CLtwdoyq6pZAJlxg2Snfciwpzrnb4xxnUZNqGsH6t9DFu3LsMyGL+NIpscysAera+ggpkYmeHhloA6C5zDj//Wrh+Vsh',
      "t./'hZ=Nl3",
      'eqZDtPWsVoI2HsnXves9',
      '2023-05-31 13:31:06.527 +00:00',
      'd54cb083-228f-49f7-9b79-a893740944eb',
      '2023-05-31 12:31:06.533 +00:00',
      '2023-05-31 12:31:06.533 +00:00'
    ]
  }
]
[2023-05-31T07:31:06.686] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:06.808] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Q4wTep5VhYrMse7LXqRHdPTd7v7KN56DMVDwD/bxEvTQTmuV6NK58' AND "Token"."expiresAt" >= '2023-05-31 12:31:06.797 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Q4wTep5VhYrMse7LXqRHdPTd7v7KN56DMVDwD/bxEvTQTmuV6NK58' AND "Token"."expiresAt" >= '2023-05-31 12:31:06.797 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:31:06.912] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:31:07.037] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'lY"2Kf*oCpuo@M1B''2"q' AND "Token"."expiresAt" >= '2023-05-31 12:31:07.035 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'lY"2Kf*oCpuo@M1B''2"q' AND "Token"."expiresAt" >= '2023-05-31 12:31:07.035 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:31:07.114] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:31:07.376] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T07:54:50.506] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:50.512] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:50.585] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:50.600] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:50.601] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:50.667] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:50.771] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:50.859] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:50.905] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:50.900] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:50.987] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:50.991] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:51.121] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:51.183] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:51.263] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:51.279] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:51.365] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:51.365] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:51.469] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:51.568] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:51.782] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:51.861] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Emmy_Schiller',
      'oCwTIw5J7EaVqsu',
      'Margie Rau PhD',
      '2023-05-31 12:54:50.763 +00:00',
      '2023-05-31 12:54:50.763 +00:00'
    ]
  }
]
[2023-05-31T07:54:51.980] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:52.005] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19LDhZ4CywG9EREtlSyDUUqpQci784Qu6TENZGgjpJPFewCZPje1V7w',
      'U2FsdGVkX18Fo0Tagj/LVcdDF30iqJqWE9J4FVl7/tk4mxI7dsmNheG79yWqiyM4RKNv+J7z7CyIHu/LZ9acVR6GaLC6KIMIgTyG6qZvq9LYp2vkxhxvxUt0+5cY0Mw6RiLiW09g5jQnrLyje+j7aGIvwFhC8DTzRPQpvkX+vKC5tWPxlvo3IZOaBHFQPu33',
      'rsWESQ!bK>',
      'gMjZYNrUkZFWaCuLcH5B',
      '2023-05-31 13:54:51.993 +00:00',
      'fc78de37-a1a9-48e5-bbb1-94c63369af44',
      '2023-05-31 12:54:52.003 +00:00',
      '2023-05-31 12:54:52.003 +00:00'
    ]
  }
]
[2023-05-31T07:54:52.235] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:54:52.345] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19LDhZ4CywG9EREtlSyDUUqpQci784Qu6TENZGgjpJPFewCZPje1V7w' AND "Token"."expiresAt" >= '2023-05-31 12:54:52.337 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19LDhZ4CywG9EREtlSyDUUqpQci784Qu6TENZGgjpJPFewCZPje1V7w' AND "Token"."expiresAt" >= '2023-05-31 12:54:52.337 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:54:52.442] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:54:52.567] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '.Yfl)1*[(pLOeu9XvS=)' AND "Token"."expiresAt" >= '2023-05-31 12:54:52.565 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '.Yfl)1*[(pLOeu9XvS=)' AND "Token"."expiresAt" >= '2023-05-31 12:54:52.565 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:54:52.666] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T07:58:39.071] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.165] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.161] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:39.194] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.254] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:39.279] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.337] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.368] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.429] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:39.465] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.553] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:39.658] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:39.754] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:39.836] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:39.879] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:39.925] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:40.101] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:40.200] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:40.292] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:40.390] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Delphine.Weissnat',
      '_bJXyCPTdsPoqvZ',
      'Angelo Weimann',
      '2023-05-31 12:58:39.367 +00:00',
      '2023-05-31 12:58:39.367 +00:00'
    ]
  }
]
[2023-05-31T07:58:40.406] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:40.511] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:40.529] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19V8tkfuJ1QrT26wYNfje1VfErsnKzo+25qdq6yQVDMLHh4e6545bgs',
      'U2FsdGVkX1/qlqfkd+Jbidk6pslbu7QxpV2/72QlgXdfkOEAV1MFjEyjRHolUM/TzGhP+K+2a8fmwMjGD+A1cnwKUc/yZVnxIOHqu2z0CZrbmSpu0WEWRdnLuuMwkSmItKTBNSwV/gVreOtEO7XEwzRtBVK1A705nhGMW8UQ5IKPs7nkLpzhtLkE4kCGmscA',
      "If'_DdfBB:",
      'S74fXP7bW2GwL0snPRbT',
      '2023-05-31 13:58:40.516 +00:00',
      '57e355de-27e4-4b0f-b6e0-30750dfa08eb',
      '2023-05-31 12:58:40.527 +00:00',
      '2023-05-31 12:58:40.527 +00:00'
    ]
  }
]
[2023-05-31T07:58:40.717] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:40.826] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19V8tkfuJ1QrT26wYNfje1VfErsnKzo+25qdq6yQVDMLHh4e6545bgs' AND "Token"."expiresAt" >= '2023-05-31 12:58:40.819 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19V8tkfuJ1QrT26wYNfje1VfErsnKzo+25qdq6yQVDMLHh4e6545bgs' AND "Token"."expiresAt" >= '2023-05-31 12:58:40.819 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:58:40.925] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:58:41.074] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'sOUsp{4[^!R]ge>d[to.' AND "Token"."expiresAt" >= '2023-05-31 12:58:41.072 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'sOUsp{4[^!R]ge>d[to.' AND "Token"."expiresAt" >= '2023-05-31 12:58:41.072 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:58:41.588] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:58:41.778] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T07:59:06.024] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.059] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.100] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:06.114] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.136] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:06.192] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.300] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.381] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.408] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.472] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:06.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:06.704] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:06.823] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:06.821] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:06.938] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:06.939] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:07.124] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:07.271] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:07.286] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Victor.Weissnat45',
      'Y1IDUp6xIiy1jio',
      'Betsy Cronin',
      '2023-05-31 12:59:06.195 +00:00',
      '2023-05-31 12:59:06.195 +00:00'
    ]
  }
]
[2023-05-31T07:59:07.384] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:07.405] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19uQ0QkIVPSdDZezd04234EfVW+WzDLCioLqIttnkm3XL/DhmsPmFfE',
      'U2FsdGVkX19NES0hDcC1AnKftCcJK3HoZo+4YIZa0LFBGxXtXjtINOWpUIeibnJTvjjQ3iQMkDTBR+cn+KT8AT7XS3G2LxoX9+JgaPMa1wo7nvEKWa1XfZdTliv3UNSF/dCfS7xkmp1xJpMidlwuOoFqNcb1quLFKesGzyR+TSHp9hczOM5x7rkTQuCYziKC',
      '00|-1w\\!tq',
      'uG0ea1mJq1f6vPmHTyxB',
      '2023-05-31 13:59:07.395 +00:00',
      'bf570adb-7321-440d-84df-89289cc87df2',
      '2023-05-31 12:59:07.404 +00:00',
      '2023-05-31 12:59:07.404 +00:00'
    ]
  }
]
[2023-05-31T07:59:07.492] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:07.632] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:07.649] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:07.754] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19uQ0QkIVPSdDZezd04234EfVW+WzDLCioLqIttnkm3XL/DhmsPmFfE' AND "Token"."expiresAt" >= '2023-05-31 12:59:07.747 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19uQ0QkIVPSdDZezd04234EfVW+WzDLCioLqIttnkm3XL/DhmsPmFfE' AND "Token"."expiresAt" >= '2023-05-31 12:59:07.747 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:59:07.849] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T07:59:08.006] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'WIo/L1_=-:t.PQ0WvK#H' AND "Token"."expiresAt" >= '2023-05-31 12:59:08.005 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'WIo/L1_=-:t.PQ0WvK#H' AND "Token"."expiresAt" >= '2023-05-31 12:59:08.005 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T07:59:08.467] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T07:59:08.749] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:08:44.962] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:45.167] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:45.174] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:45.173] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:45.608] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:45.706] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:45.830] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:45.894] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:46.053] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:46.125] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:46.273] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:46.367] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:46.491] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:46.518] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:46.522] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:46.508] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:08:46.510] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:46.717] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:46.726] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:46.928] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:47.424] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:47.596] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:47.598] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:49.362] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Dillan.Macejkovic',
      'QChQkOubGM1KijU',
      'Roland Dickens',
      '2023-05-31 13:08:47.837 +00:00',
      '2023-05-31 13:08:47.837 +00:00'
    ]
  }
]
[2023-05-31T08:08:49.494] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+PWP7EuvP4AJBnWIfz+FHcSBatGYcjC6q7i9ejtpjVU8MnEi3YCjA5',
      'U2FsdGVkX1/A0OB6bbX6JMfs4oSf8B5MIhsQ4XJ0hcBcPiXRKj1m4+bt9eNeL2EOQJmPcDR1MlCYwyw8LxkGNPTFPGpUq25g/SlnoVvF8jlHd07U367//5XLc/NM/tzmH210bnmhSY8L6wnGiiN62Nly33vFrYm7M0nLLNSD9UJGksxRLTFcB0wkZkCBJwhW',
      'xkSwDXz\\Dt',
      '40HIuclLSoOqF0slMAdC',
      '2023-05-31 14:08:49.487 +00:00',
      '46699067-fec3-47c2-a827-7edff9a13e5f',
      '2023-05-31 13:08:49.493 +00:00',
      '2023-05-31 13:08:49.493 +00:00'
    ]
  }
]
[2023-05-31T08:08:49.774] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:08:49.886] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+PWP7EuvP4AJBnWIfz+FHcSBatGYcjC6q7i9ejtpjVU8MnEi3YCjA5' AND "Token"."expiresAt" >= '2023-05-31 13:08:49.877 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+PWP7EuvP4AJBnWIfz+FHcSBatGYcjC6q7i9ejtpjVU8MnEi3YCjA5' AND "Token"."expiresAt" >= '2023-05-31 13:08:49.877 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:08:50.001] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:08:50.150] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Rs_$+rOA?2r|kX8QmwLY' AND "Token"."expiresAt" >= '2023-05-31 13:08:50.149 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Rs_$+rOA?2r|kX8QmwLY' AND "Token"."expiresAt" >= '2023-05-31 13:08:50.149 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:11:33.198] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.199] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.194] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.215] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.266] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.285] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.287] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.306] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.371] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.396] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.440] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.483] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.533] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.633] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.656] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.724] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:33.754] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.814] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.858] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.925] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:33.950] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:34.036] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:34.325] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Loy47',
      'JhbkIBn47gDndfu',
      'Danny Cremin',
      '2023-05-31 13:11:33.373 +00:00',
      '2023-05-31 13:11:33.373 +00:00'
    ]
  }
]
[2023-05-31T08:11:34.445] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+NZGVXMzoRLfu4tUTLGrnj9RLxXppKSverPtUvDHvK3M5tsOsJTGcs',
      'U2FsdGVkX199CUrv+zr5X/LlrmiikbbQLOARt13Rya5wR1CuCGe6kdiC8LtDQq6vySIFGCrCZyeq85oAqQeCe6U0c8Qk9HbuwgfgPyPV7MxTsTW67v//Tg2NYyhryUmSam5R0kDKVFcFeuq7WLOzE3ynRw49uX0XbwjeaxSKBYa2QXN3RtGVwOYpbQzUrobi',
      '?Ag<PDvXQK',
      'zhX9ELYa6ffH43CkFchs',
      '2023-05-31 14:11:34.438 +00:00',
      '00406c16-f415-4c13-af7d-77961648be60',
      '2023-05-31 13:11:34.444 +00:00',
      '2023-05-31 13:11:34.444 +00:00'
    ]
  }
]
[2023-05-31T08:11:34.573] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:11:34.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:11:34.713] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+NZGVXMzoRLfu4tUTLGrnj9RLxXppKSverPtUvDHvK3M5tsOsJTGcs' AND "Token"."expiresAt" >= '2023-05-31 13:11:34.708 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+NZGVXMzoRLfu4tUTLGrnj9RLxXppKSverPtUvDHvK3M5tsOsJTGcs' AND "Token"."expiresAt" >= '2023-05-31 13:11:34.708 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:11:34.817] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:11:34.926] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'fOEV\\<0oh%ke8iC;S)9[' AND "Token"."expiresAt" >= '2023-05-31 13:11:34.925 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'fOEV\\<0oh%ke8iC;S)9[' AND "Token"."expiresAt" >= '2023-05-31 13:11:34.925 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:15:33.462] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:33.559] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:33.561] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:33.562] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:33.565] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:33.727] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:33.745] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:33.748] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:33.800] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:33.893] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:33.915] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:34.019] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:34.027] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:34.051] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:34.115] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:34.124] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:34.148] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:34.165] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:34.214] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:34.237] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:34.311] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:34.412] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:34.900] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Dillan_Ondricka38',
      '3iKFCZ6GOTHAf4G',
      'Nicole Kertzmann',
      '2023-05-31 13:15:33.829 +00:00',
      '2023-05-31 13:15:33.829 +00:00'
    ]
  }
]
[2023-05-31T08:15:35.040] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+Fw117voIHtIXLJ6HYviQgKtfzHKsUkxaNcFkJwwyfW4jYl5myMuZJ',
      'U2FsdGVkX19m/mup9qJiTfpI7DXm8f/1lAzIRHnMRMg52YrIlprB3oqVO+bmwLcgIiM4UGoNA2L/lyOLaGbxkYbQ67yEczl4Na1zNMzv5/+f29s/E8TqBqMZfN4ZeARvZI/F9Bf+RRioXWq3lPH1bWnCLsLkTVcIlfq/x/DjrOyd2dEhwD7j5fEZsApB4DSx',
      '"axs!E[#@"',
      'JoKNi6s93hqcwVyoFjM6',
      '2023-05-31 14:15:35.028 +00:00',
      'fc6675dd-e449-459f-a6e8-f59697fa0f67',
      '2023-05-31 13:15:35.038 +00:00',
      '2023-05-31 13:15:35.038 +00:00'
    ]
  }
]
[2023-05-31T08:15:35.187] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:15:35.247] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:15:35.297] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Fw117voIHtIXLJ6HYviQgKtfzHKsUkxaNcFkJwwyfW4jYl5myMuZJ' AND "Token"."expiresAt" >= '2023-05-31 13:15:35.293 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+Fw117voIHtIXLJ6HYviQgKtfzHKsUkxaNcFkJwwyfW4jYl5myMuZJ' AND "Token"."expiresAt" >= '2023-05-31 13:15:35.293 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:15:35.410] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:15:35.527] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'gl-X"{c?qr#h*1PfHRkl' AND "Token"."expiresAt" >= '2023-05-31 13:15:35.526 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'gl-X"{c?qr#h*1PfHRkl' AND "Token"."expiresAt" >= '2023-05-31 13:15:35.526 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:30:29.026] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.038] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.098] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.112] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.123] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.178] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.269] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.282] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.302] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.360] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.357] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.387] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.471] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.528] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.563] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.609] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.654] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.689] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.706] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:29.739] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.780] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:29.878] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:30.098] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Viva87',
      '0NikHXVFqDm8Y2R',
      'Terry Moen',
      '2023-05-31 13:30:29.195 +00:00',
      '2023-05-31 13:30:29.195 +00:00'
    ]
  }
]
[2023-05-31T08:30:30.210] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX198aQQ40XTSh4MmwmF+FNJkIy6PSMZh9CU0CfYlMkZi/sHqirhQfYjR',
      'U2FsdGVkX19rIKA+m8nKdoJZbq2Se0DEoZSsQrrfEid7yOoD+u5/NDrNhBOsWVY2pzJQNDa1IayZ3gcEuVWOxOVY2b2G9GYo4wfQNTv5e91c+2V8pCRxFyry+4fCzz2QKo/7csnILPPrvs6lmtm9jkodQo2kKJ++RfmqEhhmtGKx7KAKRSyflv16Bl7ujsGT',
      'okA!wPRJKg',
      'yOoI1WAhB6brMTEPwkMn',
      '2023-05-31 14:30:30.199 +00:00',
      'dd78cdc1-1413-461c-8233-f5c2df496cb6',
      '2023-05-31 13:30:30.208 +00:00',
      '2023-05-31 13:30:30.208 +00:00'
    ]
  }
]
[2023-05-31T08:30:30.347] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:30:30.447] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX198aQQ40XTSh4MmwmF+FNJkIy6PSMZh9CU0CfYlMkZi/sHqirhQfYjR' AND "Token"."expiresAt" >= '2023-05-31 13:30:30.440 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX198aQQ40XTSh4MmwmF+FNJkIy6PSMZh9CU0CfYlMkZi/sHqirhQfYjR' AND "Token"."expiresAt" >= '2023-05-31 13:30:30.440 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:30:30.453] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:30:30.533] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:30:30.644] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '1Uz*7\\q{TBH3Yy{|W+,S' AND "Token"."expiresAt" >= '2023-05-31 13:30:30.643 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '1Uz*7\\q{TBH3Yy{|W+,S' AND "Token"."expiresAt" >= '2023-05-31 13:30:30.643 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:31:28.215] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.245] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.290] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.325] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.328] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.337] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.345] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.416] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.426] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.434] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.437] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.522] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.572] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.644] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.653] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:28.766] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.770] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.888] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.895] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:28.969] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:29.010] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:29.007] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:29.474] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Jannie.Bergstrom17',
      'afI5nO9cTeNQbWq',
      'Grace Wilderman',
      '2023-05-31 13:31:28.424 +00:00',
      '2023-05-31 13:31:28.424 +00:00'
    ]
  }
]
[2023-05-31T08:31:29.616] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19OzGRJdQOVgtx6mSazVOXS0y/H3ZehKIrIitB+EpeP9CZG2y6K39rv',
      'U2FsdGVkX1+AJ7bsFWo+q6fAklADv5AoemAQMaRlxS5h6nH0Osz1YOOMoW/Vq0YVUshMCNPwFD8Z6ERbMk8xsy/vv+PJfKoQIxi6lv6SAsh9hJC/c7Ri4Ahyy4geRrcv2Du1XSawb3pe/yMgurV7xmFpFPkzNuowyKowv02C1Sb+rgcw50wH0/TY/htcUQFo',
      'UI0tW;y]B&',
      '5Cta2ofenHrshWaat8nR',
      '2023-05-31 14:31:29.609 +00:00',
      'bf6d0ce9-f63f-4b6e-88af-235b59aa7d9a',
      '2023-05-31 13:31:29.614 +00:00',
      '2023-05-31 13:31:29.614 +00:00'
    ]
  }
]
[2023-05-31T08:31:29.779] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:31:29.885] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19OzGRJdQOVgtx6mSazVOXS0y/H3ZehKIrIitB+EpeP9CZG2y6K39rv' AND "Token"."expiresAt" >= '2023-05-31 13:31:29.879 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19OzGRJdQOVgtx6mSazVOXS0y/H3ZehKIrIitB+EpeP9CZG2y6K39rv' AND "Token"."expiresAt" >= '2023-05-31 13:31:29.879 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:31:29.893] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:31:29.998] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:31:30.105] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'bU(g#q5?wc+n`aSUA[hJ\' AND "Token"."expiresAt" >= \'2023-05-31 13:31:30.104 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'bU(g#q5?wc+n`aSUA[hJ\' AND "Token"."expiresAt" >= \'2023-05-31 13:31:30.104 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:33:40.679] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:40.748] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:40.750] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:40.826] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:40.823] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:41.072] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:33:41.218] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:41.297] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:41.496] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:41.508] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:33:41.579] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:41.655] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:41.741] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:33:41.834] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:33:41.980] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:33:42.068] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:33:42.225] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:37:18.854] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:18.925] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:18.926] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:18.936] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:18.958] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:19.036] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:19.061] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:19.130] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:20.223] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.362] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:37:20.373] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.404] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:20.491] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.508] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:20.592] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:20.604] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.688] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.702] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.788] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.792] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.875] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:20.881] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:21.477] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:22.477] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Breanna_Nitzsche85',
      'k_iu3RwCkk3jiL_',
      'Ted Heidenreich',
      '2023-05-31 13:37:21.570 +00:00',
      '2023-05-31 13:37:21.570 +00:00'
    ]
  }
]
[2023-05-31T08:37:22.600] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18/rTcoV6ZWlNGH1/RlWTGcKGl+JsBUDI5udxP3bV+qABFGECroLv+6',
      'U2FsdGVkX1901Pemi01TLgLGyTcjxz7DX3zTbPpX71PTt4PanHSmncax26EapINedvd/sm8z6cGEIdtNcP83pqaSQfR6EBuRoG1ECYRY6DW3bk035SY3ua5hdoHvQf3mM3dCrZTuwoc/LRoElKpt9AVluIpmXKaUijTrh6/QcJnqDAKspY7Un+BqV2WTKSEd',
      'RCryVEFn:g',
      'DzYY5zAnwoAwB0cIX0sq',
      '2023-05-31 14:37:22.588 +00:00',
      '9c7dac75-26d1-487f-82be-331cc5c77da3',
      '2023-05-31 13:37:22.599 +00:00',
      '2023-05-31 13:37:22.599 +00:00'
    ]
  }
]
[2023-05-31T08:37:22.750] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:37:32.471] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18/rTcoV6ZWlNGH1/RlWTGcKGl+JsBUDI5udxP3bV+qABFGECroLv+6' AND "Token"."expiresAt" >= '2023-05-31 13:37:32.466 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18/rTcoV6ZWlNGH1/RlWTGcKGl+JsBUDI5udxP3bV+qABFGECroLv+6' AND "Token"."expiresAt" >= '2023-05-31 13:37:32.466 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:37:32.568] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:37:32.967] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '0:S>>peq_S7=$'')qq7BS' AND "Token"."expiresAt" >= '2023-05-31 13:37:32.965 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '0:S>>peq_S7=$'')qq7BS' AND "Token"."expiresAt" >= '2023-05-31 13:37:32.965 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:40:22.251] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:22.638] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:22.767] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:22.842] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:22.994] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:23.082] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:23.161] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:23.236] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:23.242] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:23.333] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:23.384] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:23.422] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:23.532] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:23.634] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:23.859] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Maximo48',
      'N8D1fHCI5knW0zz',
      'Charlotte Olson',
      '2023-05-31 13:40:22.719 +00:00',
      '2023-05-31 13:40:22.719 +00:00'
    ]
  }
]
[2023-05-31T08:40:23.866] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:23.947] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:23.982] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+RalfOw9mpIpZv/aTknAJkv9NdsDU0xkd8pKZLLMkpplTipBSdf31t',
      'U2FsdGVkX1/h5sBIpUzX4qJD9EYcvXioDIUst1Dgbn6mZ95W0AQDHSQ9PTXydlDibI0IqqLUPOJHPUH9gwS99R9foWWEKGpZVWGdStHszgjtMSrdMa0HuiX2/ypmmBW582vetfugWQ1lgujXfFZBzQDz7ooscxmEqYjlqw6RXO9HTFDrvNjHFBUurHH73X1x',
      `]9'Ogg1J"d`,
      '3KuKpwxjGw7WrWdcWMRk',
      '2023-05-31 14:40:23.974 +00:00',
      '1fa34fdb-3539-40bb-8fb1-865ab8d8bc13',
      '2023-05-31 13:40:23.981 +00:00',
      '2023-05-31 13:40:23.981 +00:00'
    ]
  }
]
[2023-05-31T08:40:24.124] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:24.143] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:24.209] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:24.240] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+RalfOw9mpIpZv/aTknAJkv9NdsDU0xkd8pKZLLMkpplTipBSdf31t' AND "Token"."expiresAt" >= '2023-05-31 13:40:24.235 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+RalfOw9mpIpZv/aTknAJkv9NdsDU0xkd8pKZLLMkpplTipBSdf31t' AND "Token"."expiresAt" >= '2023-05-31 13:40:24.235 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:40:24.320] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:24.334] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:24.409] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:24.414] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:40:24.441] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'kBJ`bBGfT%[%Z2IvVjJ+\' AND "Token"."expiresAt" >= \'2023-05-31 13:40:24.439 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'kBJ`bBGfT%[%Z2IvVjJ+\' AND "Token"."expiresAt" >= \'2023-05-31 13:40:24.439 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:40:24.498] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:24.596] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.171] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.266] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.270] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.355] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.354] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.357] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.445] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.450] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.503] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.587] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.589] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.676] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.707] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.741] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.763] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.790] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.859] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.875] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.945] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:46.965] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:46.967] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:47.051] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:47.223] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Pietro_Howe2',
      'nsssF43k3s4NGj2',
      'Dr. Forrest Hermiston DDS',
      '2023-05-31 13:40:46.354 +00:00',
      '2023-05-31 13:40:46.354 +00:00'
    ]
  }
]
[2023-05-31T08:40:47.367] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+BIoVzn2+35c93HcjQKlC+ajDVyNnR3hR55cwbaA/+JVTkCJjMc1Qu',
      'U2FsdGVkX1/Tas9RkGLX1oJv5D8bbk1wHgylbI50NsjZdq+3YPbuPsC5SZGcGxzzuBrZwJc4Hyuu6wsAwLqDDBrNzY+leUXWvftmRPQOhXihRvmV7Msk+q1jaxXT5N1TSnfPTuzJWCa1VdxcXT6Yg0pV87kjYo7hlnP88Nu0pVVKVM170rpp7hiiu03C/giE',
      'xY]7i62CNu',
      'DTquEhMpJwCnkfqIFTWB',
      '2023-05-31 14:40:47.359 +00:00',
      '8c472adb-d925-42e5-a8a6-03bb3d90bfc4',
      '2023-05-31 13:40:47.365 +00:00',
      '2023-05-31 13:40:47.365 +00:00'
    ]
  }
]
[2023-05-31T08:40:47.525] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T08:40:47.622] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+BIoVzn2+35c93HcjQKlC+ajDVyNnR3hR55cwbaA/+JVTkCJjMc1Qu' AND "Token"."expiresAt" >= '2023-05-31 13:40:47.619 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+BIoVzn2+35c93HcjQKlC+ajDVyNnR3hR55cwbaA/+JVTkCJjMc1Qu' AND "Token"."expiresAt" >= '2023-05-31 13:40:47.619 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T08:40:47.705] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T08:40:47.714] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T08:40:47.812] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'p\\prZ3gWAP%1)*W?`qXE\' AND "Token"."expiresAt" >= \'2023-05-31 13:40:47.810 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'p\\prZ3gWAP%1)*W?`qXE\' AND "Token"."expiresAt" >= \'2023-05-31 13:40:47.810 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:39:05.865] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:05.943] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:06.061] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:06.146] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:06.173] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:06.211] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:06.307] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:06.730] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:07.379] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T09:39:07.523] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:07.690] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:07.780] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:07.896] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:08.005] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:08.120] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:08.222] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:08.687] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:09.680] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Ebony.Schmidt60',
      'NRqPtxqimrWfU7t',
      'Heidi McKenzie',
      '2023-05-31 14:39:08.789 +00:00',
      '2023-05-31 14:39:08.789 +00:00'
    ]
  }
]
[2023-05-31T09:39:09.795] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/iOd0NIADUVghMjsQQ0vO9pi0iXzhm9OJ9qR6IjwH0aQn9kW29P6um',
      'U2FsdGVkX19PYt+5UB8hA4KVAo1NyouLBEgrDsPQGM9es2tzIV20eR7fkEnxDWfLmTutXKWm5r4tpJ8nIZhXoYOSzTy4LDAwf/I6btrV5BU/mh20biCzzJfHV+hipvz6QsQgAPgEQESfa0yClKvkDrjyJ5J0DU/6+OIpJjaaQU7S2r5c7rbKR9rsbS6WRjLM',
      "Ex+X'_-w(S",
      '4JFF0IYHChiZsYDuvqc5',
      '2023-05-31 15:39:09.787 +00:00',
      '3735b50b-cde1-4e2e-9307-a173d86012e5',
      '2023-05-31 14:39:09.794 +00:00',
      '2023-05-31 14:39:09.794 +00:00'
    ]
  }
]
[2023-05-31T09:39:09.935] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:10.325] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/iOd0NIADUVghMjsQQ0vO9pi0iXzhm9OJ9qR6IjwH0aQn9kW29P6um' AND "Token"."expiresAt" >= '2023-05-31 14:39:10.321 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/iOd0NIADUVghMjsQQ0vO9pi0iXzhm9OJ9qR6IjwH0aQn9kW29P6um' AND "Token"."expiresAt" >= '2023-05-31 14:39:10.321 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:39:10.457] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:10.566] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'qHR@>lI=!_qX&CVC`(a|\' AND "Token"."expiresAt" >= \'2023-05-31 14:39:10.565 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'qHR@>lI=!_qX&CVC`(a|\' AND "Token"."expiresAt" >= \'2023-05-31 14:39:10.565 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:39:11.686] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:11.842] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:11.942] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:39:12.040] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:12.154] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:39:12.251] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:02.340] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:02.439] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:02.618] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:02.723] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:02.816] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:02.919] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:03.010] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:04.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:04.610] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:04.677] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:04.677] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:04.687] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:04.693] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:04.740] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:04.801] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:04.824] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:04.857] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:05.645] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:05.749] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:05.838] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:05.840] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Susan.Robel',
      'xZIVVt3XEGk7nLx',
      'Hubert Hudson-Rippin',
      '2023-05-31 14:40:04.893 +00:00',
      '2023-05-31 14:40:04.893 +00:00'
    ]
  }
]
[2023-05-31T09:40:05.843] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T09:40:05.926] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:05.961] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19nD/TvSEZGFt3AdXjNgcMRCQATNKSbhhhg6GyzplNsVx8iubvlhv6s',
      'U2FsdGVkX1/f7ceQT7g2ZjsWUg8WkzHEhCxlsaaJQAoSxFjMMkHExqurGHE9vYlSEquklGvR/N6zgieHGEGe0pcNEy2OGQ6yR2nPMY4snfcyDXXtsaY062U/JODbuTQXOtgU/0lBeI/9f3hs7wVLFapBuF+gRJAJOW1coPbzHPJhyd2EgCjerN8EGj0LDlMA',
      'GbzdtxO1|?',
      '53oT6bWt7Xpoa7qAtHtP',
      '2023-05-31 15:40:05.954 +00:00',
      '56d14c9c-164a-412b-960e-d1ac52c9830d',
      '2023-05-31 14:40:05.960 +00:00',
      '2023-05-31 14:40:05.960 +00:00'
    ]
  }
]
[2023-05-31T09:40:06.029] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:06.115] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:40:06.210] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19nD/TvSEZGFt3AdXjNgcMRCQATNKSbhhhg6GyzplNsVx8iubvlhv6s' AND "Token"."expiresAt" >= '2023-05-31 14:40:06.206 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19nD/TvSEZGFt3AdXjNgcMRCQATNKSbhhhg6GyzplNsVx8iubvlhv6s' AND "Token"."expiresAt" >= '2023-05-31 14:40:06.206 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:40:06.312] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:40:06.423] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'}P=SN6\'\'=8r}mi=3A`wF=\' AND "Token"."expiresAt" >= \'2023-05-31 14:40:06.421 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'}P=SN6\'\'=8r}mi=3A`wF=\' AND "Token"."expiresAt" >= \'2023-05-31 14:40:06.421 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:55:40.532] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:55:40.531] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:55:40.623] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:40.623] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:40.771] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:55:40.860] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:40.986] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:41.085] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:41.181] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:41.274] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:41.661] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Jarrett_Crist57',
      'pLowp_tGIDOs5FZ',
      'Myrtle Cartwright',
      '2023-05-31 14:55:40.712 +00:00',
      '2023-05-31 14:55:40.712 +00:00'
    ]
  }
]
[2023-05-31T09:55:41.697] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:55:41.763] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/D0CMkDwp7AH86YeD/+qkTbUu/ms066g1bSEBteCvgW/tWg/86lcHs',
      'U2FsdGVkX180YAWNUUotX/ISibCrHsw7pjP4jWyS3uykZ/sUU5tKCgKMlt1mfa0zMmNXGQe1SUaHP4S31OgQy5MK5Pr+vjToQ9IgejSpSAa2VWI8giuAbpfQp11EIfGX/2GOjBvnJv9XtiEt9MbllqLjZsEELS45WPUZCwv0mhoQhoSYSB3r1BF4xhMO51Bn',
      '7)v+z{(2S8',
      'lpbcuGZtX5VMtw1xa6lc',
      '2023-05-31 15:55:41.756 +00:00',
      '884097dd-ee41-4ae1-809d-7ba9a2b69a6b',
      '2023-05-31 14:55:41.762 +00:00',
      '2023-05-31 14:55:41.762 +00:00'
    ]
  }
]
[2023-05-31T09:55:41.823] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:55:41.910] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:55:42.001] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/D0CMkDwp7AH86YeD/+qkTbUu/ms066g1bSEBteCvgW/tWg/86lcHs' AND "Token"."expiresAt" >= '2023-05-31 14:55:41.997 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/D0CMkDwp7AH86YeD/+qkTbUu/ms066g1bSEBteCvgW/tWg/86lcHs' AND "Token"."expiresAt" >= '2023-05-31 14:55:41.997 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:55:42.087] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:55:42.185] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'M8OB[yb*M<S8qaes|M0T' AND "Token"."expiresAt" >= '2023-05-31 14:55:42.184 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'M8OB[yb*M<S8qaes|M0T' AND "Token"."expiresAt" >= '2023-05-31 14:55:42.184 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:56:27.635] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T09:56:27.719] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:27.802] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:27.856] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:27.980] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:28.067] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:28.161] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:28.285] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:28.396] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:31.493] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:31.529] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:31.608] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:31.642] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:32.679] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Macey_Schuppe16',
      'Sw1eB8U6M_G2AVD',
      "Kelli O'Conner",
      '2023-05-31 14:56:31.702 +00:00',
      '2023-05-31 14:56:31.702 +00:00'
    ]
  }
]
[2023-05-31T09:56:32.790] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+DoW17fUflmNwnkKaVy+ETEDO6iPyVMzE0OsvsNa5ajms8bvg3KXRv',
      'U2FsdGVkX1+kpXffKXmaOY+yB0A6i2LZvenZ1UqTTunI5ABUA4Nb8adrXjR7e/pu6eMPDTpWw7qklUoGNCa5qB24eo9CO02xA47RNZuQ/H20YdpX/UAdokzpcksNwoTYSUddkliOTfg91qVkuZDHSPMkb7ntlRGQWDgRpMYYhve7L/JC4D2SLQrdTmp100gC',
      '7eqOV=G!x:',
      'uQAWAQG8Oi62rC4HstOO',
      '2023-05-31 15:56:32.782 +00:00',
      'eda82630-9710-4d89-8994-24495738420b',
      '2023-05-31 14:56:32.789 +00:00',
      '2023-05-31 14:56:32.789 +00:00'
    ]
  }
]
[2023-05-31T09:56:32.937] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:33.081] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+DoW17fUflmNwnkKaVy+ETEDO6iPyVMzE0OsvsNa5ajms8bvg3KXRv' AND "Token"."expiresAt" >= '2023-05-31 14:56:33.075 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+DoW17fUflmNwnkKaVy+ETEDO6iPyVMzE0OsvsNa5ajms8bvg3KXRv' AND "Token"."expiresAt" >= '2023-05-31 14:56:33.075 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:56:33.170] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:33.271] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'];+/qcsIF|\\Q.9gxY`Ye\' AND "Token"."expiresAt" >= \'2023-05-31 14:56:33.270 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'];+/qcsIF|\\Q.9gxY`Ye\' AND "Token"."expiresAt" >= \'2023-05-31 14:56:33.270 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:56:34.379] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:34.394] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:34.461] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:34.473] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:34.623] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:56:34.710] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:34.814] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:34.910] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:35.007] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:56:35.100] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:43.613] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:43.696] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:43.857] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:43.949] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:44.032] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:44.143] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:44.262] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:44.752] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:45.942] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T09:59:45.940] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:46.022] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:46.338] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:46.346] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:46.423] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:46.427] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:46.584] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:46.606] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:46.674] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:46.687] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:46.799] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:46.892] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:46.990] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:47.084] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:47.440] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Dario.Borer',
      'G1rmGXuuwXgueXo',
      'Naomi Hane',
      '2023-05-31 14:59:46.520 +00:00',
      '2023-05-31 14:59:46.520 +00:00'
    ]
  }
]
[2023-05-31T09:59:47.557] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18mm08cokZCnNwaGjne3h9lC2SUVeUZuWifVNpAhvI+EAZ32VSkm505',
      'U2FsdGVkX1+gwtfTiCUDVGmuUL5jz3SEi7xAY+z2s9m6WiD8SuLTjQrmazM2/fEn18GaDROdDW1zj0QvJpZI8Ng6hkQKlJxDYRHT44PQAhoQJgSFF7BUI2Qq7O/IpU8TLMn/Tn3ZPP6SvfwuFczMxJocukEg5nbxPokivqBrcJ0Lgv++VJmtCpnsNiBN+gue',
      "XC$lG&$wP'",
      'oJ3EZetEdCNKJV6puR6H',
      '2023-05-31 15:59:47.550 +00:00',
      '980855aa-aa34-44dc-9eb3-513904634012',
      '2023-05-31 14:59:47.556 +00:00',
      '2023-05-31 14:59:47.556 +00:00'
    ]
  }
]
[2023-05-31T09:59:47.704] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T09:59:47.810] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18mm08cokZCnNwaGjne3h9lC2SUVeUZuWifVNpAhvI+EAZ32VSkm505' AND "Token"."expiresAt" >= '2023-05-31 14:59:47.806 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18mm08cokZCnNwaGjne3h9lC2SUVeUZuWifVNpAhvI+EAZ32VSkm505' AND "Token"."expiresAt" >= '2023-05-31 14:59:47.806 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T09:59:47.903] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T09:59:48.012] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'rTXTPA_8@MDaK''a79\\8g' AND "Token"."expiresAt" >= '2023-05-31 14:59:48.011 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'rTXTPA_8@MDaK''a79\\8g' AND "Token"."expiresAt" >= '2023-05-31 14:59:48.011 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:12:58.636] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:12:58.688] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:01.050] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:01.050] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:01.059] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:01.161] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:01.438] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:13:01.452] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:13:01.606] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:01.765] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:01.837] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:02.498] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Nakia_Dach',
      'LAnj55v7B2FLWnN',
      'Yolanda Gibson-Rohan',
      '2023-05-31 15:13:01.564 +00:00',
      '2023-05-31 15:13:01.564 +00:00'
    ]
  }
]
[2023-05-31T10:13:02.614] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/UhAiHFUWtdo5wWZU+Aw9sey1BT0fxuzW7LrtxeK7NUBr3Lu71vhBS',
      'U2FsdGVkX1/xBEY0FSc9vC2eSbPVfDyUY5HvR7rkZj1NofK84D/G2LGSE4CpPQHPttrrwnfyC5FUMMYGikGHizW4Wrda93Le816Fkf6BfSfeCvg8JKSQ3vvzYq9x/8X28QamkY9b7wydXpP62Sw0/nduMMjhzo9rQuTXUhkUTIpDBARXLcGNS5DpxGjcN/sS',
      'FP%"%L=:mS',
      'cAeBQKXNaSgGeYVv5IMM',
      '2023-05-31 16:13:02.606 +00:00',
      '14133d6e-6ae5-4427-b84a-ca78b3b3066a',
      '2023-05-31 15:13:02.613 +00:00',
      '2023-05-31 15:13:02.613 +00:00'
    ]
  }
]
[2023-05-31T10:13:02.785] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:13:03.249] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:14:15.852] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:18.153] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:18.177] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:18.321] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:18.397] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:18.956] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:19.160] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:19.243] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:19.457] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:20.434] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Shanelle33',
      'E92aVHNDEQAmxo7',
      'Mr. Aaron Jacobson Jr.',
      '2023-05-31 15:14:19.565 +00:00',
      '2023-05-31 15:14:19.565 +00:00'
    ]
  }
]
[2023-05-31T10:14:20.547] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/rM/CnuNq4O2KsiZb3l9KCuHYyskwm0564Z3GRVZdvzkORppbub0j6',
      'U2FsdGVkX1/H8HouiQrg6SBH3L0XmqB7AsAEHL8fx9of8jt3x1bPeTfwGRXvEz1e4RX6VcWyRv7veJCXnaOgtGQ92ewJgigwNV0gMrExJI+tokm/mB1z5TwxuWkSzRJSJ4X8vAcHrnXh1o39IWry40G+cSJlaE4DtLGfSaKRbfVJ+tV6WFsARIxar0nZePba',
      'Td0g{%#H5;',
      'Bs07eCNiAhkTSDkneQaI',
      '2023-05-31 16:14:20.540 +00:00',
      'e2037180-93cb-4e3e-b025-0c74362320f1',
      '2023-05-31 15:14:20.545 +00:00',
      '2023-05-31 15:14:20.545 +00:00'
    ]
  }
]
[2023-05-31T10:14:20.652] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:14:20.695] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:20.709] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:20.763] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:20.785] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/rM/CnuNq4O2KsiZb3l9KCuHYyskwm0564Z3GRVZdvzkORppbub0j6' AND "Token"."expiresAt" >= '2023-05-31 15:14:20.781 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/rM/CnuNq4O2KsiZb3l9KCuHYyskwm0564Z3GRVZdvzkORppbub0j6' AND "Token"."expiresAt" >= '2023-05-31 15:14:20.781 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:14:20.858] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:20.872] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:20.905] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:20.949] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:20.974] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'=l`Y]\'\'cv+Wn\'\'B|ZZPp,F\' AND "Token"."expiresAt" >= \'2023-05-31 15:14:20.973 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'=l`Y]\'\'cv+Wn\'\'B|ZZPp,F\' AND "Token"."expiresAt" >= \'2023-05-31 15:14:20.973 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:14:20.986] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:21.066] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:21.072] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:21.172] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:21.181] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:21.274] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:21.270] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:21.375] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:52.306] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:53.013] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:53.184] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:53.271] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:53.350] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:53.455] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:53.549] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.143] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:55.154] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:55.189] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:55.224] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.237] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.330] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:55.406] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:55.411] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:55.496] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.613] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.707] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.789] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.871] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:55.882] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:14:55.966] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:56.238] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Ashleigh.Watsica',
      'iYgFMlM35C8OaEB',
      'Dr. Jaime Hansen',
      '2023-05-31 15:14:55.306 +00:00',
      '2023-05-31 15:14:55.306 +00:00'
    ]
  }
]
[2023-05-31T10:14:56.348] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19BqRzI0cEpvDw+zDeNcoCAQ5Tkd6qeov9nn5/Pj8jziJgnSjGtmqEO',
      'U2FsdGVkX19SUPCH0zfQIxSP5V02m/b70qXE0+gm97j0EoZRha3wK9Rm/vvwNyvu/7sX7PTiZayjQ6Z3r687cRjcuQ9uwLT/owJm4zeAZ28oUKQF7PB/PGe3KI1cl6l5oMDWyebosw51mjeDqaG3tMIO1X0+bBsd0np2ny0lywS5y4MXoQlXJULaQcPf8t+4',
      'jxMvKaKWX[',
      'GkA1utct2DumLsX5UdbC',
      '2023-05-31 16:14:56.337 +00:00',
      '09a81aca-cb20-4307-9845-df538e0af0e1',
      '2023-05-31 15:14:56.346 +00:00',
      '2023-05-31 15:14:56.346 +00:00'
    ]
  }
]
[2023-05-31T10:14:56.492] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:14:56.598] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:15:01.428] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19BqRzI0cEpvDw+zDeNcoCAQ5Tkd6qeov9nn5/Pj8jziJgnSjGtmqEO' AND "Token"."expiresAt" >= '2023-05-31 15:15:01.421 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19BqRzI0cEpvDw+zDeNcoCAQ5Tkd6qeov9nn5/Pj8jziJgnSjGtmqEO' AND "Token"."expiresAt" >= '2023-05-31 15:15:01.421 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:15:01.542] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:15:01.637] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'F?,:%Vk^Srng(]|*n2Kw' AND "Token"."expiresAt" >= '2023-05-31 15:15:01.636 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'F?,:%Vk^Srng(]|*n2Kw' AND "Token"."expiresAt" >= '2023-05-31 15:15:01.636 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:17:50.065] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:50.155] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:50.164] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:50.182] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:50.248] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:50.264] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:50.886] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:50.968] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:51.123] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:51.159] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Beth_Metz',
      'lxeOrlhDC46Ab4Z',
      'Sandra Konopelski DVM',
      '2023-05-31 15:17:50.244 +00:00',
      '2023-05-31 15:17:50.244 +00:00'
    ]
  }
]
[2023-05-31T10:17:51.211] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:51.277] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19kMEy1+lEdmzuGn0eAKrTGzYpq2EQMvZ0LnF93rJUYFwuRlVEb6TeY',
      'U2FsdGVkX19EDbdJz1fxwWwPp8c/wpAN9yhkDEjPNLSa+jnfrknKjDhO4s3nfpesZcYJX66xwiY5+3NgGEjo9ebYdr6ONYRu5KcsaOmu6/ABD/UWlgDvm9WVv2UmV4w27P0ArERuhzBDqprQyUryZr8SkbGEewdqiXWJAGIwL4kaZshORBzXQGkPL2GqMFIC',
      'pGnRoyhZJ,',
      'X0cHATDZjVxU1wHOy3eC',
      '2023-05-31 16:17:51.270 +00:00',
      '629f63fb-0fa0-4b4e-85f4-60e3818549cb',
      '2023-05-31 15:17:51.276 +00:00',
      '2023-05-31 15:17:51.276 +00:00'
    ]
  }
]
[2023-05-31T10:17:51.324] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:51.419] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:51.442] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:51.507] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:51.595] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:51.664] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:51.659] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:17:56.748] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:56.832] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:56.969] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:57.055] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:17:57.140] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:57.243] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:17:57.348] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:18:01.166] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19kMEy1+lEdmzuGn0eAKrTGzYpq2EQMvZ0LnF93rJUYFwuRlVEb6TeY' AND "Token"."expiresAt" >= '2023-05-31 15:18:01.157 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19kMEy1+lEdmzuGn0eAKrTGzYpq2EQMvZ0LnF93rJUYFwuRlVEb6TeY' AND "Token"."expiresAt" >= '2023-05-31 15:18:01.157 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:18:01.274] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:18:01.391] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '}l3QMaEGK>=C\\nS|CRt=' AND "Token"."expiresAt" >= '2023-05-31 15:18:01.390 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '}l3QMaEGK>=C\\nS|CRt=' AND "Token"."expiresAt" >= '2023-05-31 15:18:01.390 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:18:42.481] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:18:44.208] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:18:44.211] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:18:44.276] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:18:44.417] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:18:44.532] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:18:44.680] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:18:44.922] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:18:45.538] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:18:45.695] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.216] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.236] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.243] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.356] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.359] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.356] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.362] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.460] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.541] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.611] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.638] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.699] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.764] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.787] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.860] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.894] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.950] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:07.963] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:07.981] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:08.046] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:08.044] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:08.320] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Norwood.Kuphal1',
      'sgcm325ZfKXPWpd',
      'Wilbur Halvorson',
      '2023-05-31 15:20:07.459 +00:00',
      '2023-05-31 15:20:07.459 +00:00'
    ]
  }
]
[2023-05-31T10:20:08.429] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/OCSB+Cbmq6C3U0GRbe5Y0Iezmw2YNkeb05ZKEHnV29AkkrsI8zzOQ',
      'U2FsdGVkX184P+O4D9t7ed6eIJQNaYWl8Y40008O2hc/BFsKwkh3kQeMVv6EZDDjjP4X0LmpPpG5JjvmkPp7KEQF7QoYcnxbi5V66J+zsppq6kcR7KJLxZ6noArgH01Srgbs1JnL27Q8on0crtoIiaDCuMy2uYr8ZSNiMQy2pt9u5guTn3kgGLXVnsi+Mdcj',
      'PqmPF,JAZW',
      'CV92KEKYqSOXiLX6AQ2I',
      '2023-05-31 16:20:08.417 +00:00',
      '37c58164-f315-451e-82af-60aa8daac59e',
      '2023-05-31 15:20:08.426 +00:00',
      '2023-05-31 15:20:08.426 +00:00'
    ]
  }
]
[2023-05-31T10:20:08.576] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:08.664] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/OCSB+Cbmq6C3U0GRbe5Y0Iezmw2YNkeb05ZKEHnV29AkkrsI8zzOQ' AND "Token"."expiresAt" >= '2023-05-31 15:20:08.660 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/OCSB+Cbmq6C3U0GRbe5Y0Iezmw2YNkeb05ZKEHnV29AkkrsI8zzOQ' AND "Token"."expiresAt" >= '2023-05-31 15:20:08.660 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:20:08.709] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:20:08.757] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:20:08.872] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'XFU4pSd"bp>>K]aNWtR1' AND "Token"."expiresAt" >= '2023-05-31 15:20:08.871 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'XFU4pSd"bp>>K]aNWtR1' AND "Token"."expiresAt" >= '2023-05-31 15:20:08.871 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:20:09.229] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:21:03.345] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:03.438] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:03.599] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:03.679] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:03.770] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:03.876] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:03.967] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:05.727] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:05.730] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:05.794] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:05.800] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:05.814] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:05.873] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:05.947] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:06.067] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:06.184] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:06.267] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:06.400] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:06.494] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:06.491] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:06.566] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:06.658] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:21:06.734] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Carmine.Moen73',
      'pjhLlwcjuFY3DXU',
      'Marilyn Kuvalis',
      '2023-05-31 15:21:05.902 +00:00',
      '2023-05-31 15:21:05.902 +00:00'
    ]
  }
]
[2023-05-31T10:21:06.864] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+DdGB4dOu69e09mL8pgnQwJUccqKuAwvYtGyI3cMv0AxGzTVk2hkm1',
      'U2FsdGVkX196xqtcDimHR1Z9p6pb2H+vHw1eHcMFkgIbtdEklLmCUTO3ArEqV2+LVK1fxNGzKypoFk7NK9JMJmCp3HpHfCvgA9YXwzWf3UQ9K145dXd9YrMbSSdg6yv5LrVCoA3QXSW1h7Uew8TjSougcq8x25d0A2iTYVkHydp8aYMUGMOxAcyYPJXEM5Gs',
      "Qi1q?eV'Y?",
      'VmAGkMv5tkibsyoIESZ6',
      '2023-05-31 16:21:06.854 +00:00',
      '16802d41-2c78-4eba-ba3b-062da401bcfe',
      '2023-05-31 15:21:06.862 +00:00',
      '2023-05-31 15:21:06.862 +00:00'
    ]
  }
]
[2023-05-31T10:21:07.024] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:07.120] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+DdGB4dOu69e09mL8pgnQwJUccqKuAwvYtGyI3cMv0AxGzTVk2hkm1' AND "Token"."expiresAt" >= '2023-05-31 15:21:07.114 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+DdGB4dOu69e09mL8pgnQwJUccqKuAwvYtGyI3cMv0AxGzTVk2hkm1' AND "Token"."expiresAt" >= '2023-05-31 15:21:07.114 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:21:07.204] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:07.306] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'A:_Y+yV3Lo}[@*1t@5O"' AND "Token"."expiresAt" >= '2023-05-31 15:21:07.305 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'A:_Y+yV3Lo}[@*1t@5O"' AND "Token"."expiresAt" >= '2023-05-31 15:21:07.305 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:21:07.936] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:41.103] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.585] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.588] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.579] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.649] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:44.672] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.676] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:44.768] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.827] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.852] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:44.931] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:45.054] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:45.157] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:45.243] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:45.353] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:45.657] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Tony.Goyette',
      'HVmlHbTZyHlK0kw',
      'Ida Collins',
      '2023-05-31 15:21:44.741 +00:00',
      '2023-05-31 15:21:44.741 +00:00'
    ]
  }
]
[2023-05-31T10:21:45.761] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19A4URrBZe0yok6iTUZQF59p5r6W8K348QMGyJiWJGLEoP+o/dpSqDo',
      'U2FsdGVkX19hXlwRgzLB0Zjal/KhS5OKNHuN5QUS5lmRPDYCROCahmiZxV59fw6jUHaDk044+7HHwKM8WG+IiaLkEBm4ZkiGBq43kE13y4AO+9sGQCwCnWyYRdSyocKbzrUQrSKLwACB9g8GHDYr+vouIXqdPN1xndjSCxQiCtcfP4WzaIvx4z+EMc5wTdYx',
      '%((|A%0q/s',
      'EPDjHEiPuBbrG6TO7ruy',
      '2023-05-31 16:21:45.751 +00:00',
      '4d65ca2b-b11a-4952-ae9e-dc7a66f33ba2',
      '2023-05-31 15:21:45.759 +00:00',
      '2023-05-31 15:21:45.759 +00:00'
    ]
  }
]
[2023-05-31T10:21:45.925] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:46.030] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:46.025] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19A4URrBZe0yok6iTUZQF59p5r6W8K348QMGyJiWJGLEoP+o/dpSqDo' AND "Token"."expiresAt" >= '2023-05-31 15:21:46.017 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19A4URrBZe0yok6iTUZQF59p5r6W8K348QMGyJiWJGLEoP+o/dpSqDo' AND "Token"."expiresAt" >= '2023-05-31 15:21:46.017 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:21:46.119] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:46.190] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:46.233] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'acN{uapmD*OUk@HmIT(T' AND "Token"."expiresAt" >= '2023-05-31 15:21:46.232 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'acN{uapmD*OUk@HmIT(T' AND "Token"."expiresAt" >= '2023-05-31 15:21:46.232 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:21:46.267] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:21:46.356] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:46.457] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:46.561] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:21:46.682] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:21:47.006] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:04.226] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:05.528] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:05.671] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:05.761] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:05.852] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:05.952] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:05.971] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:05.994] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:06.043] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:06.049] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:06.069] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:06.076] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:06.156] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:06.256] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:06.974] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:07.066] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Bret.Weissnat',
      'JPD4pWRVuu4YFMk',
      'Deborah Jones',
      '2023-05-31 15:32:06.132 +00:00',
      '2023-05-31 15:32:06.132 +00:00'
    ]
  }
]
[2023-05-31T10:32:07.098] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:07.171] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19X/0ybXHJbX3NUDyLMF7ghJmtib6tpx0GBfXCd0aTdqVssS+KMO9gO',
      'U2FsdGVkX1+mFN1CgyqoJXtRkQuUvDTn6TH1kJQHdpscnzZCEIrWq7PgH0ib+ld3NI1SY/uh0Ct83jZeRx5tbjjJ5tZV+tsX8nWQQKWiavx+9/41cSNw3QlInrWSD73VUtj7mzTw+tARwglA3bWf2Bb7aTTuzO8NLaWGCqKU9q38M53qq5WwJw1zbF0HJoDB',
      'xql=|+;U}^',
      'IX0WPRASo4NMPksnGGvL',
      '2023-05-31 16:32:07.158 +00:00',
      '9aedf24f-fd65-4433-a3f9-3c0b7ced46ec',
      '2023-05-31 15:32:07.169 +00:00',
      '2023-05-31 15:32:07.169 +00:00'
    ]
  }
]
[2023-05-31T10:32:07.187] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:07.290] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:07.339] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:07.384] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:07.415] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:07.494] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:07.756] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19X/0ybXHJbX3NUDyLMF7ghJmtib6tpx0GBfXCd0aTdqVssS+KMO9gO' AND "Token"."expiresAt" >= '2023-05-31 15:32:07.749 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19X/0ybXHJbX3NUDyLMF7ghJmtib6tpx0GBfXCd0aTdqVssS+KMO9gO' AND "Token"."expiresAt" >= '2023-05-31 15:32:07.749 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:32:07.847] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:32:07.963] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'z]zsn{W}Y+"OW`Z}ETgb\' AND "Token"."expiresAt" >= \'2023-05-31 15:32:07.961 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'z]zsn{W}Y+"OW`Z}ETgb\' AND "Token"."expiresAt" >= \'2023-05-31 15:32:07.961 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:32:08.195] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:32:09.604] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:34:49.830] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:49.921] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:49.920] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:49.930] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:49.998] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.009] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.069] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:50.144] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:50.154] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.234] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:50.259] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.316] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.349] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.345] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:50.420] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.430] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.427] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:50.502] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.522] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:34:50.770] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:34:50.999] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Mikayla_Adams15',
      '4Mab3AyvXVCGnwo',
      'Gregg Lehner-Brakus',
      '2023-05-31 15:34:50.080 +00:00',
      '2023-05-31 15:34:50.080 +00:00'
    ]
  }
]
[2023-05-31T10:34:51.117] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19Ti120WCcWRbcCsdOQY7j+JHZgEG7XqPOoQJOureL8v0tctA9LSFVC',
      'U2FsdGVkX19oSRBBni4SGRTZzZhdwyv5WoBxAeJLV+RukG9YEQW81MI1r+orcMSLzEwPjlOCXtOiwvCC8tWNOs8UN7UC/pyoRrkly6ShMRbN0Qe6XtB/1Xv9PJytwNnLYJffzrcuS9VfvJjJuapgaiJnsCAa6wFQgC6+15zuHlXB+F+o4oQVlTDRPd8KifDa',
      '3K#Y]X\\O85',
      'FBSWKoUshVy8zOo23QIr',
      '2023-05-31 16:34:51.104 +00:00',
      '3aed61e8-5946-44c1-94aa-48f8292b4dde',
      '2023-05-31 15:34:51.115 +00:00',
      '2023-05-31 15:34:51.115 +00:00'
    ]
  }
]
[2023-05-31T10:34:51.287] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:51.285] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:34:51.373] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:35:21.502] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:38.612] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:40.345] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:40.415] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:40.587] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:40.666] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:40.758] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:40.869] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:40.966] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:42.334] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:42.420] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:42.428] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:42.434] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:42.498] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:42.513] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:42.617] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:42.711] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:42.835] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:42.927] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:43.026] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:43.118] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:43.485] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Keira63',
      'fmjprXs1pOynusa',
      'Gerald Beahan',
      '2023-05-31 15:38:42.598 +00:00',
      '2023-05-31 15:38:42.598 +00:00'
    ]
  }
]
[2023-05-31T10:38:43.614] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/ZgUaAmIIROsEuahczfoFhTCmHlRLkYRA+RQDw/QHbmznNkFST33AH',
      'U2FsdGVkX1/8PgCpXhFuT/ywofqmTo6KgO3wknQ6A/ZEfEG/6RWAI1O36KL1KrcxQ9Zmcx48fMiQZFpVYRHxZRrxEoZw+tWCs8KJFlAC6QI5of4Wze+t5diNxlC5zhxAQ5kj4N/jdXttta39b+drCotnIN/1i6Vo7qusYpG+FNHxCfGIxaJEmiOLYtrWx3Rf',
      '-^\\d5X#kpY',
      'RkQ2xTheo0RtULIgjNOe',
      '2023-05-31 16:38:43.606 +00:00',
      '844b69e3-f598-41ac-bc8c-f7a028efe3ba',
      '2023-05-31 15:38:43.613 +00:00',
      '2023-05-31 15:38:43.613 +00:00'
    ]
  }
]
[2023-05-31T10:38:43.772] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:43.772] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:43.848] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:38:43.877] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/ZgUaAmIIROsEuahczfoFhTCmHlRLkYRA+RQDw/QHbmznNkFST33AH' AND "Token"."expiresAt" >= '2023-05-31 15:38:43.869 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/ZgUaAmIIROsEuahczfoFhTCmHlRLkYRA+RQDw/QHbmznNkFST33AH' AND "Token"."expiresAt" >= '2023-05-31 15:38:43.869 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:38:43.963] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:38:44.085] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'tr{LEDbbMlW%L[+*b+{_' AND "Token"."expiresAt" >= '2023-05-31 15:38:44.083 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'tr{LEDbbMlW%L[+*b+{_' AND "Token"."expiresAt" >= '2023-05-31 15:38:44.083 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:38:44.300] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:41:08.581] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:11.044] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:11.122] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:11.300] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:11.404] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:11.482] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:11.606] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:11.697] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:12.750] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:14.077] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:14.157] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:14.250] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:14.251] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:14.350] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:14.467] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:14.570] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:14.670] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:14.760] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:15.173] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:15.181] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:15.291] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:15.869] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:16.418] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:41:16.825] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Coby13',
      '36cKJV9rcfv1wYN',
      'Annette Jones',
      '2023-05-31 15:41:15.962 +00:00',
      '2023-05-31 15:41:15.962 +00:00'
    ]
  }
]
[2023-05-31T10:41:16.934] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18qUq0w5ENPB3h3TZbhJ6ErMseMMvIRWC39aa4dzAjsIA62BWD91WFU',
      'U2FsdGVkX1+LC086GRVO/Abg0C+zaN1qsiiyiW5ilFeJq/AY136WnXIonrRMqIv1PIOpjDOGAnmtqGQnsXCYcn15Vaw1yJ40/RvQyTnY4bO2RHM+7kgI70xYKqiHUe4RJdvZVNh08H/LhbOtLRkaRwLIyAB3D2M3X0zBUDYsXHRc0PHVl5SMaRbU51JA2cBq',
      '9,B{0it&%<',
      'xUju9J09QnSQth8Vb176',
      '2023-05-31 16:41:16.927 +00:00',
      'f82c3083-eadb-45d0-aa24-804c07f9e0d0',
      '2023-05-31 15:41:16.933 +00:00',
      '2023-05-31 15:41:16.933 +00:00'
    ]
  }
]
[2023-05-31T10:41:17.077] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:17.170] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18qUq0w5ENPB3h3TZbhJ6ErMseMMvIRWC39aa4dzAjsIA62BWD91WFU' AND "Token"."expiresAt" >= '2023-05-31 15:41:17.163 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18qUq0w5ENPB3h3TZbhJ6ErMseMMvIRWC39aa4dzAjsIA62BWD91WFU' AND "Token"."expiresAt" >= '2023-05-31 15:41:17.163 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:41:17.261] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:17.368] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'F_X$EdC`7FKx=&\\m>gB$\' AND "Token"."expiresAt" >= \'2023-05-31 15:41:17.366 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'F_X$EdC`7FKx=&\\m>gB$\' AND "Token"."expiresAt" >= \'2023-05-31 15:41:17.366 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:41:42.753] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:44.827] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:44.907] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:45.086] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:45.178] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:45.267] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:45.375] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:45.468] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:46.490] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:46.567] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:46.628] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:46.663] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:46.708] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:46.734] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:46.748] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:46.813] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:46.948] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:47.052] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:47.144] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:47.231] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:47.779] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Rahsaan8',
      'AvDGECWefGtm4Wj',
      'Earnest Hamill',
      '2023-05-31 15:41:46.809 +00:00',
      '2023-05-31 15:41:46.809 +00:00'
    ]
  }
]
[2023-05-31T10:41:47.900] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+x/G95semGzsSrArKeEbxPL2nXIMkvkUT7wP0OwARyRbhKilu0TqdQ',
      'U2FsdGVkX1+6qeIiwBqYCBs7T/cwhwGYg8b95bnSwXFN3Mf+VJeiR5kmXsrCgg93n9mD1IWCow27QprsSWGCcd2yBf0VRWvL/3QZniIVXpbJzUe8+3VQ7ajfhoHPm51bH0QbgU8M1OhowpbBDaQ2PHj0bVrwqunb98Eu3cF8/QRdTBTpmi1YvVqR/vJE5EGE',
      'bK0RtGSPaU',
      'Me051MugVT4Fp5Tkba9C',
      '2023-05-31 16:41:47.886 +00:00',
      '8a2d81ae-4a2b-48af-94f0-4b3031022bdd',
      '2023-05-31 15:41:47.898 +00:00',
      '2023-05-31 15:41:47.898 +00:00'
    ]
  }
]
[2023-05-31T10:41:48.069] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:48.084] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:48.145] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:41:48.187] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+x/G95semGzsSrArKeEbxPL2nXIMkvkUT7wP0OwARyRbhKilu0TqdQ' AND "Token"."expiresAt" >= '2023-05-31 15:41:48.180 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+x/G95semGzsSrArKeEbxPL2nXIMkvkUT7wP0OwARyRbhKilu0TqdQ' AND "Token"."expiresAt" >= '2023-05-31 15:41:48.180 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:41:48.278] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:41:48.391] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'2\'\'S;,^H>$2OW9mK>\'\'`\\:\' AND "Token"."expiresAt" >= \'2023-05-31 15:41:48.389 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'2\'\'S;,^H>$2OW9mK>\'\'`\\:\' AND "Token"."expiresAt" >= \'2023-05-31 15:41:48.389 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:41:48.550] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:42:23.536] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:23.807] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:23.894] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:24.073] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:24.154] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:24.259] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:24.388] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:24.487] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:27.125] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:27.206] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:27.258] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:27.286] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:27.453] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:27.507] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:27.533] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:27.692] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:37.011] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:37.449] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:37.562] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:37.664] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:37.760] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:37.859] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:38.133] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Durward89',
      'JRMz5qskFaf3El6',
      'Julius Toy',
      '2023-05-31 15:42:37.211 +00:00',
      '2023-05-31 15:42:37.211 +00:00'
    ]
  }
]
[2023-05-31T10:42:38.241] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18A5wtwOgGEucpOu7cYCIb+diVoX6jgTKgI+LZVx65WBYx2J85LcCyg',
      'U2FsdGVkX19hdFA1iYFYuAZ52Qkz28wNSsIy2YQ9fV+xoU/ndfp9p+UsNUCOEepFHtUj3ssaGZgvEOw/X/1q3I6VmXwId+y9pM06Sz7jbEdXn2PpSJpXBv3pEns0LXct6I4cEueDGXElshH8gToUYWAngrtvWpDwGYaGgDLM/qYSl4erui9SdobhJmQWHbyx',
      '@PrnsxYlM1',
      'IhlIi9BRUWYi4WAobX8t',
      '2023-05-31 16:42:38.234 +00:00',
      '530ef37f-e648-46f4-9ba9-bfe820df02c7',
      '2023-05-31 15:42:38.240 +00:00',
      '2023-05-31 15:42:38.240 +00:00'
    ]
  }
]
[2023-05-31T10:42:38.387] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:42:38.869] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18A5wtwOgGEucpOu7cYCIb+diVoX6jgTKgI+LZVx65WBYx2J85LcCyg' AND "Token"."expiresAt" >= '2023-05-31 15:42:38.863 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18A5wtwOgGEucpOu7cYCIb+diVoX6jgTKgI+LZVx65WBYx2J85LcCyg' AND "Token"."expiresAt" >= '2023-05-31 15:42:38.863 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:42:38.959] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:42:39.063] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'NXKF\\GUns)2cwMV@f_>D' AND "Token"."expiresAt" >= '2023-05-31 15:42:39.062 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'NXKF\\GUns)2cwMV@f_>D' AND "Token"."expiresAt" >= '2023-05-31 15:42:39.062 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:42:53.325] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:49:39.315] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T10:49:41.363] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:41.765] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:43.180] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:43.260] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:43.266] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:43.287] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:43.396] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:43.448] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:43.838] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:43.955] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:44.057] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:44.217] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:44.318] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:44.567] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:44.699] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:44.788] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:45.828] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Dovie.Schoen48',
      'HsjKihfJ0BV25z7',
      'Alfonso Frami',
      '2023-05-31 15:49:44.664 +00:00',
      '2023-05-31 15:49:44.664 +00:00'
    ]
  }
]
[2023-05-31T10:49:45.941] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/2mpQ9XJyp14s1DY+9fBQyKNC5sUf6pLtg66f9k1XvShmTIoeo3ouh',
      'U2FsdGVkX19F/kVppatC4nq7ZCs4HxcHHC425iNxA5mHv5gr1rRqN9lN3uVh4/c2idz5HVyuXAjVGMfwHNL/IRcJAM503rm3AhleWrgO1Ti12l0vsle7rET8ESgjrseXYRXSglx/3+sQq/1GTOYC7XXij7dJrV1/q9a+Ynj2NumWDan2hh7k7QDyz8IjBHvb',
      'dtx]1YSt"g',
      'osiuRnuWnqlI61uQT8e9',
      '2023-05-31 16:49:45.928 +00:00',
      '2f7fa4bc-ef7f-4dd6-8c08-029e1f352e02',
      '2023-05-31 15:49:45.939 +00:00',
      '2023-05-31 15:49:45.939 +00:00'
    ]
  }
]
[2023-05-31T10:49:46.141] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:46.561] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/2mpQ9XJyp14s1DY+9fBQyKNC5sUf6pLtg66f9k1XvShmTIoeo3ouh' AND "Token"."expiresAt" >= '2023-05-31 15:49:46.553 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/2mpQ9XJyp14s1DY+9fBQyKNC5sUf6pLtg66f9k1XvShmTIoeo3ouh' AND "Token"."expiresAt" >= '2023-05-31 15:49:46.553 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:49:46.652] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:46.727] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:46.776] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'q&G51ipJ1pJi0`oqhzX#\' AND "Token"."expiresAt" >= \'2023-05-31 15:49:46.774 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'q&G51ipJ1pJi0`oqhzX#\' AND "Token"."expiresAt" >= \'2023-05-31 15:49:46.774 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T10:49:46.881] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:46.973] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:49:47.059] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:47.192] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:49:47.322] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:53:18.577] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:53:23.508] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:53:23.676] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:53:25.071] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake@') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake@')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:54:01.433] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:54:01.513] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:54:01.656] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:54:01.741] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake%7C') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake%7C')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:54:17.783] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:54:17.868] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:54:18.015] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:54:18.103] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeZ') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeZ')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:55:04.685] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:55:04.764] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:55:04.917] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:55:05.002] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeY') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeY')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:56:43.616] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:56:43.709] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:56:43.868] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:56:43.964] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeG') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeG')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:57:03.208] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:57:03.288] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T10:57:03.424] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T10:57:03.506] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake6') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake6')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:00:09.268] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:00:10.094] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:00:10.223] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:00:12.848] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:00:30.807] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:00:30.892] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:00:31.040] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:00:31.124] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:01:58.199] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:01:58.275] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:01:58.435] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:01:58.515] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:04:02.157] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:04:07.092] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:04:07.250] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:04:07.333] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:05:24.115] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:05:24.202] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:05:24.348] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:05:24.435] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:06:49.243] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:06:58.958] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:06:59.105] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:06:59.192] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:08:19.413] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:08:20.140] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:08:20.280] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:08:20.707] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeq') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeq')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:09:03.922] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:09:04.010] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:09:04.201] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:09:04.303] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakec') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakec')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:09:34.652] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:09:34.741] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:09:34.872] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:09:35.604] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeS') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeS')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:10:34.312] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:10:36.868] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:10:37.019] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:10:39.554] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:11:01.902] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:11:01.982] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:11:02.109] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:11:07.027] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:11:27.478] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:11:27.611] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:11:27.757] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:11:27.891] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:45:18.711] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:45:18.803] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:45:18.970] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:45:19.053] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:46:03.041] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:46:03.436] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:46:03.589] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:46:03.676] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:46:29.456] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:46:29.542] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:46:29.696] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:47:17.068] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:47:17.155] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:47:17.312] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:47:17.737] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:50:43.792] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:50:48.714] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:50:48.858] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:50:49.284] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:55:24.485] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:55:24.572] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:55:24.744] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:55:24.828] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakec') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakec')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:55:39.707] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:55:39.782] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:55:39.911] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:55:39.991] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake0') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake0')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:55:57.521] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:55:57.612] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:55:57.759] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:55:57.849] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:56:07.254] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:56:07.336] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T11:56:07.466] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T11:56:07.556] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:00:03.262] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:00:03.353] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:00:03.508] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:00:03.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:00:25.398] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:00:25.476] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:00:25.634] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:00:25.722] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:01:37.219] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:01:37.634] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:01:37.821] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:01:37.913] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:01:50.296] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:01:52.819] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:01:52.973] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:02:33.951] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:02:34.039] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:02:37.858] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:02:40.550] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:03:26.765] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:03:26.846] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:03:32.616] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:04:02.123] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:04:02.221] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:04:02.383] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:04:02.486] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:04:47.020] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:04:47.115] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:04:47.257] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:04:47.346] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:05:34.410] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:05:35.742] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:05:35.889] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:05:35.982] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:14:30.827] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:18:00.506] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'any') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'any')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:19:55.114] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:19:55.196] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:19:55.342] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:19:55.428] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:20:33.173] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:20:47.368] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:22:33.131] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:23:25.576] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:23:53.748] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:24:40.583] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:39.073] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T12:25:39.462] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:39.552] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:39.761] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:39.848] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:39.936] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:40.048] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:40.135] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:43.233] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:43.329] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:43.506] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:43.626] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:44.843] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:44.858] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:44.925] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:44.958] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:45.081] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:45.141] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:45.186] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:45.222] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:45.274] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:45.283] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:45.411] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakef') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakef')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:45.656] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:46.626] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Francis84',
      '8PM0KEVOZ9WQ4sb',
      'Pearl Abernathy',
      '2023-05-31 17:25:45.752 +00:00',
      '2023-05-31 17:25:45.752 +00:00'
    ]
  }
]
[2023-05-31T12:25:46.833] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19XDP3pklhcxEMeGkQlw8H6PJs+3Lrtsik70aYDa4brbtqhZKoT1Dwa',
      'U2FsdGVkX1/cebSf9VJX62h6cEYnRCCUIyaZ+FsEdj/j/qEugleObcPDg6PWyzNHIyusEYaDL2TxZd7s+RFrd2cxExN5eAae8ByKltv+X2jNLF9ZygjaOiN2W0VzvTBcPwnxZq2ht5bzhSxPOZms1JyGG1Pc8ar8Z8FVBmnQSMzFpLrMl97G611+RQJSXUHq',
      'a|hgIyzbp@',
      'ospiAugTOk83PWVyMGi6',
      '2023-05-31 18:25:46.820 +00:00',
      '061d419c-e25b-469b-8c82-1d545c1e251c',
      '2023-05-31 17:25:46.831 +00:00',
      '2023-05-31 17:25:46.831 +00:00'
    ]
  }
]
[2023-05-31T12:25:46.982] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:25:47.072] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19XDP3pklhcxEMeGkQlw8H6PJs+3Lrtsik70aYDa4brbtqhZKoT1Dwa' AND "Token"."expiresAt" >= '2023-05-31 17:25:47.067 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19XDP3pklhcxEMeGkQlw8H6PJs+3Lrtsik70aYDa4brbtqhZKoT1Dwa' AND "Token"."expiresAt" >= '2023-05-31 17:25:47.067 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T12:25:47.149] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:25:47.255] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'H=*L+_RMiKR(aLkJ0j!1' AND "Token"."expiresAt" >= '2023-05-31 17:25:47.254 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'H=*L+_RMiKR(aLkJ0j!1' AND "Token"."expiresAt" >= '2023-05-31 17:25:47.254 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T12:25:47.676] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:30.877] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T12:26:33.331] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:33.414] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:33.587] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:33.670] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:33.758] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:33.863] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:33.948] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:34.819] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:34.857] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:34.888] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:34.934] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:34.962] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:35.040] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:35.110] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:35.190] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:35.304] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:35.389] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:35.471] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:35.554] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:35.640] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeO') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeO')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:35.942] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Queenie.Blick-Larkin',
      '9Z62__WBcq5t8nY',
      'Darin Boehm',
      '2023-05-31 17:26:35.126 +00:00',
      '2023-05-31 17:26:35.126 +00:00'
    ]
  }
]
[2023-05-31T12:26:36.052] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18f7On+8epHtiaQyMfjzKThEzIlpjRTmylGi8y6MlaaIpASvhxM2qaW',
      'U2FsdGVkX1/TibQGRPWWLXd8E9poOAEAqTeWg7FjLjlDAF70mhIJs77M9Fdos46wY0xxNqBnihJuopm2kz8BJK0icDw78ECcQ7RwTSMpCboUeevaIbjxEfQwWNTkM4Npre7DiXKsgKTV/2fbIa7iXm/gIVZVIXKX/XQ2zEwU4w1cVXXmMxrP8R1JK7o6r86s',
      'J"E=lir!bd',
      'aIgZcNrEap6lQlfUEXNp',
      '2023-05-31 18:26:36.043 +00:00',
      'a06038cb-c21f-46e5-acee-dc365bf75393',
      '2023-05-31 17:26:36.051 +00:00',
      '2023-05-31 17:26:36.051 +00:00'
    ]
  }
]
[2023-05-31T12:26:36.221] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:36.308] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18f7On+8epHtiaQyMfjzKThEzIlpjRTmylGi8y6MlaaIpASvhxM2qaW' AND "Token"."expiresAt" >= '2023-05-31 17:26:36.303 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18f7On+8epHtiaQyMfjzKThEzIlpjRTmylGi8y6MlaaIpASvhxM2qaW' AND "Token"."expiresAt" >= '2023-05-31 17:26:36.303 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T12:26:36.408] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:36.502] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:36.517] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '}_R9:w|Mn2N3\\eOM7vwr' AND "Token"."expiresAt" >= '2023-05-31 17:26:36.516 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '}_R9:w|Mn2N3\\eOM7vwr' AND "Token"."expiresAt" >= '2023-05-31 17:26:36.516 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T12:26:36.570] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:26:36.631] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T12:26:37.652] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:28:27.368] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:28:27.452] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:29:17.007] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T12:29:17.090] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:17:31.988] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:17:32.100] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:18:28.073] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:18:28.152] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:18:52.108] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:18:52.186] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:31.793] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:31.883] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:51.493] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:19:54.154] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:54.241] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:54.405] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:54.494] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:54.588] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:54.702] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:54.792] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:56.389] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:56.473] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:58.113] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:58.191] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:58.282] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:58.317] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:58.375] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:58.368] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:58.397] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:19:58.451] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:58.587] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:58.682] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:58.780] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:58.883] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:58.970] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakek') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakek')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:19:59.418] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Ava_Tillman',
      '9NmohJu7iMhJhUD',
      'Aubrey McCullough',
      '2023-05-31 19:19:58.471 +00:00',
      '2023-05-31 19:19:58.471 +00:00'
    ]
  }
]
[2023-05-31T14:20:00.255] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX186w+qXG7TVWGvzzpaYAOApR5F7c90+0B86y+S0y2qKWT4xkd7WRz3E',
      'U2FsdGVkX18AkhTkq2zQUw/sZnAg3l5bwLjCybzM2ux9raO4N5mT7dMgHKqXGm0cSrtdA2amYxtsHenbZsfKe184EOmt4rmvbEv5k448r4UKz96RjYL82WekqX6FiLWqgvYhCqKKgpDWkKFbz5aO/X7OSUV3V+DvhoIYi5FpswYwZZ4lwq3cIJtGCApJd0G/',
      '#SZ9--}Cz/',
      'UAKo857ITJYiQTKY8Z4h',
      '2023-05-31 20:20:00.245 +00:00',
      '0191a65b-db15-44a6-bb6d-0c1be559fe37',
      '2023-05-31 19:20:00.253 +00:00',
      '2023-05-31 19:20:00.253 +00:00'
    ]
  }
]
[2023-05-31T14:20:00.395] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:20:00.492] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX186w+qXG7TVWGvzzpaYAOApR5F7c90+0B86y+S0y2qKWT4xkd7WRz3E' AND "Token"."expiresAt" >= '2023-05-31 19:20:00.483 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX186w+qXG7TVWGvzzpaYAOApR5F7c90+0B86y+S0y2qKWT4xkd7WRz3E' AND "Token"."expiresAt" >= '2023-05-31 19:20:00.483 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:20:00.502] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:20:00.585] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:20:00.688] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '(BWIY3E!bp;1XHkWL6&d' AND "Token"."expiresAt" >= '2023-05-31 19:20:00.687 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '(BWIY3E!bp;1XHkWL6&d' AND "Token"."expiresAt" >= '2023-05-31 19:20:00.687 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:20:00.758] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:22:36.486] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:24:49.148] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:25:47.388] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:26:43.142] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:27:01.280] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:01.364] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:01.529] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:01.625] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:01.723] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:01.850] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:01.947] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:02.073] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:02.160] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:04.273] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:27:04.490] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:04.602] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:04.604] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:04.747] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:04.751] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:04.780] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:04.822] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:04.831] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:04.896] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:05.048] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:05.180] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:05.320] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:05.443] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:05.564] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakex') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakex')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:05.692] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:06.045] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Manley.Okuneva',
      'my5Z0TW7V1i_fdr',
      'Allison Beier',
      '2023-05-31 19:27:04.962 +00:00',
      '2023-05-31 19:27:04.962 +00:00'
    ]
  }
]
[2023-05-31T14:27:06.179] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/msskEaIBSpi88o98le/TBHDYJcYJyOVLgYDA7JTXARsEG/xK58+L4',
      'U2FsdGVkX1+/4dbdD8p4z1EZK/gvSbSy3lNrMlxSW3zQuQolzVU05fsttHeYjENuxajUWhC0NRCTBeQTJ1gT107zyEgphVDT29HArOHJT/3b9kuHSCREOvmjDkgjmBjX2ncbu/bZZVDLJOdj2eOI37Evh1ctXYqdDLCoEXATe4DZJ8aoCwY8wWPJ7Nr9eUb9',
      '$mk{d5h(X$',
      'BOj45nmwBYHh1pmNF3IG',
      '2023-05-31 20:27:06.171 +00:00',
      'c97d1e29-01ed-4d80-ac79-31578649a2f0',
      '2023-05-31 19:27:06.179 +00:00',
      '2023-05-31 19:27:06.179 +00:00'
    ]
  }
]
[2023-05-31T14:27:06.354] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:27:06.470] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/msskEaIBSpi88o98le/TBHDYJcYJyOVLgYDA7JTXARsEG/xK58+L4' AND "Token"."expiresAt" >= '2023-05-31 19:27:06.464 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/msskEaIBSpi88o98le/TBHDYJcYJyOVLgYDA7JTXARsEG/xK58+L4' AND "Token"."expiresAt" >= '2023-05-31 19:27:06.464 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:27:06.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:27:06.727] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Es}Xo%2(.WNO)Z#@fW_q' AND "Token"."expiresAt" >= '2023-05-31 19:27:06.725 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Es}Xo%2(.WNO)Z#@fW_q' AND "Token"."expiresAt" >= '2023-05-31 19:27:06.725 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:29:44.559] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:44.650] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:44.813] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:44.902] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:44.992] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:45.100] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:45.189] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:45.417] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:45.499] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:47.121] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:47.217] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:47.389] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:47.476] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:47.612] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:47.708] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:47.807] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:47.836] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:47.898] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:47.925] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:47.989] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakee') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakee')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:48.005] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:48.115] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:48.201] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:48.882] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:49.238] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Ludie_Crooks88',
      'dGhcCdn1TCvEpvn',
      'Omar Collier',
      '2023-05-31 19:29:48.295 +00:00',
      '2023-05-31 19:29:48.295 +00:00'
    ]
  }
]
[2023-05-31T14:29:49.349] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19SZavSMUp6a0IHKqEeWpiwpvkPySPCGQc/mbn8gUHv4V1R9ZtNF45K',
      'U2FsdGVkX19wojRx+jng3+VNhsRUfnXcjQp8kY7QPa91WuZabBd3r66RDSnEbg030vIqvsrFUOFtJqCl+D8MUSaUnMucCc2ZzCEsytpZsddxDtGD8FHLLr2h4ATlYxLMOnpQ6NiPAGgj+zgGp4Zd619EsyM6NQsTGD6WsryEWQeS3y94nta1+Lw+y8x8bo9y',
      'xfcZu>-t5^',
      'aXIM3dklEAr5D6qKxNUD',
      '2023-05-31 20:29:49.342 +00:00',
      'c365c42e-fb59-4737-a70f-878ba3d6da08',
      '2023-05-31 19:29:49.348 +00:00',
      '2023-05-31 19:29:49.348 +00:00'
    ]
  }
]
[2023-05-31T14:29:49.499] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:29:49.598] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19SZavSMUp6a0IHKqEeWpiwpvkPySPCGQc/mbn8gUHv4V1R9ZtNF45K' AND "Token"."expiresAt" >= '2023-05-31 19:29:49.593 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19SZavSMUp6a0IHKqEeWpiwpvkPySPCGQc/mbn8gUHv4V1R9ZtNF45K' AND "Token"."expiresAt" >= '2023-05-31 19:29:49.593 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:29:49.695] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:29:49.809] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'e%0s|Kco!NyXOw7|=|No' AND "Token"."expiresAt" >= '2023-05-31 19:29:49.807 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'e%0s|Kco!NyXOw7|=|No' AND "Token"."expiresAt" >= '2023-05-31 19:29:49.807 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:30:13.415] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:13.507] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:13.693] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:13.775] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:13.862] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:13.983] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:14.092] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:16.452] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:16.471] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:16.515] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:16.523] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:16.555] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:16.602] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:16.772] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:16.783] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:16.860] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:16.859] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:16.992] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:17.085] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:17.198] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:17.292] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:17.397] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'faker') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'faker')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:17.572] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Laron.Schaden',
      'D0JKH7w2J3EzvkT',
      'Spencer Huels',
      '2023-05-31 19:30:16.653 +00:00',
      '2023-05-31 19:30:16.653 +00:00'
    ]
  }
]
[2023-05-31T14:30:17.684] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18lF3BrcDM5S7mzolsjJfzTHfcxiGK3UZRvaB9pbhqXzhO9omYN2TrA',
      'U2FsdGVkX19bWoLw0jK1cghapR2DiNgLm+TuY1dbMMyQg1v62gyBmdyS1mwiuk3Z8zZsWHLZ44fzbtr0ru1cxPlkh0MuHSXbJB+pNzHw8QjdHS56EGRNgBEcrb8DKo9RfhMoA54zjxF9r5ZY7pj4omzs5t6QdjS5wX3aEhLTldAOkOIk7LUsP3IfAOkE9r2s',
      'y$rDi66esp',
      'FguGBciSiJXpyH3Rq3tc',
      '2023-05-31 20:30:17.675 +00:00',
      'c22dbefe-cf23-4d33-9451-8997fcbfa2ff',
      '2023-05-31 19:30:17.683 +00:00',
      '2023-05-31 19:30:17.683 +00:00'
    ]
  }
]
[2023-05-31T14:30:17.842] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:17.944] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18lF3BrcDM5S7mzolsjJfzTHfcxiGK3UZRvaB9pbhqXzhO9omYN2TrA' AND "Token"."expiresAt" >= '2023-05-31 19:30:17.936 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18lF3BrcDM5S7mzolsjJfzTHfcxiGK3UZRvaB9pbhqXzhO9omYN2TrA' AND "Token"."expiresAt" >= '2023-05-31 19:30:17.936 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:30:18.035] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:18.170] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \')px\\Gwp;hB"HnkNV`trw\' AND "Token"."expiresAt" >= \'2023-05-31 19:30:18.169 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \')px\\Gwp;hB"HnkNV`trw\' AND "Token"."expiresAt" >= \'2023-05-31 19:30:18.169 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:30:18.651] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:18.992] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:20.722] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:30:56.270] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:56.350] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:56.540] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:56.627] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:30:56.717] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:56.830] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:30:56.927] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:00.123] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:00.207] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:00.293] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:00.303] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:00.388] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:00.396] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:00.397] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:00.473] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:00.546] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:00.640] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:00.756] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:00.855] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:00.947] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:01.048] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:01.146] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakev') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakev')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:01.163] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Elmore69',
      't3jQG2bxZ7CcAoO',
      'Dr. Irvin Rice',
      '2023-05-31 19:31:00.291 +00:00',
      '2023-05-31 19:31:00.291 +00:00'
    ]
  }
]
[2023-05-31T14:31:01.278] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:31:01.295] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/81Gf2Bd69caPxkPD6iRstcTrg9NoffFbxvQJ9vIO7W4eI+5bttS6B',
      'U2FsdGVkX1/xEMGr3ya3X5lnmuKTxUJVOURZEzw/Lr+Dip/CyqkqmoooPEaVk1TTxCP2mc9vFZsciZXC+hw5aVbhArzWCwq7xxh2egFAZmwF3YdPKFXfN0MmzoZJR3bCCDBn1DPf5A1U74l9GtN8CxWpuZqgfhhjI/NsGVKMHA6n0GWqhBeVf5n+iTWKO/wu',
      '7fWC2Im<Wv',
      'MCcaaYnllU8neG2Ikafo',
      '2023-05-31 20:31:01.285 +00:00',
      'cd4a7152-9353-41f6-bbd5-739769ad5e4d',
      '2023-05-31 19:31:01.294 +00:00',
      '2023-05-31 19:31:01.294 +00:00'
    ]
  }
]
[2023-05-31T14:31:01.462] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:01.891] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/81Gf2Bd69caPxkPD6iRstcTrg9NoffFbxvQJ9vIO7W4eI+5bttS6B' AND "Token"."expiresAt" >= '2023-05-31 19:31:01.884 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/81Gf2Bd69caPxkPD6iRstcTrg9NoffFbxvQJ9vIO7W4eI+5bttS6B' AND "Token"."expiresAt" >= '2023-05-31 19:31:01.884 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:31:01.998] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:02.109] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 's8)D"^uB4+7M},7ZscGq' AND "Token"."expiresAt" >= '2023-05-31 19:31:02.107 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 's8)D"^uB4+7M},7ZscGq' AND "Token"."expiresAt" >= '2023-05-31 19:31:02.107 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:31:02.527] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:02.843] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:31:32.516] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:31:32.602] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:17.606] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:17.702] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:17.899] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:17.990] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:18.089] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:18.220] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:18.324] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:20.487] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:20.875] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:21.061] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:21.156] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:21.235] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:21.280] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:21.320] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:21.376] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:21.502] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:21.591] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:21.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:21.710] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake2') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake2')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:21.807] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:21.901] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:21.990] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:37:22.014] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:22.509] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:23.030] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Emmet_Flatley',
      'uFIhlRTVW3cFjAk',
      'Cecilia Lehner',
      '2023-05-31 19:37:22.115 +00:00',
      '2023-05-31 19:37:22.115 +00:00'
    ]
  }
]
[2023-05-31T14:37:23.136] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19DarHVGirEYSLkmjuHWKZLuXDfu7HouKBxPWiuqzCrLdfTJ32ZIUsc',
      'U2FsdGVkX1/NFfF+4TS/6atgtRguZ7bcBJB1OPl6+87xKItk4aKSJwXHwHppgcyFcA24xro0zJ+TVItBqpVVFTUCxLGgLKehe7Hb71lI2X1U9WSQvLC5cRv/jYbPLeWTY4ZtYXq0yQ5vJuAQj3+dnCR99LYnpiNnt27j8P577nbdGREiEWDBRwUgoYoeu4l/',
      '.#Qk,d`MKQ',
      'oY66zwIpPT2S0qzjPjCv',
      '2023-05-31 20:37:23.129 +00:00',
      'b0392119-c0cd-4d56-bd13-2b0307c1787e',
      '2023-05-31 19:37:23.135 +00:00',
      '2023-05-31 19:37:23.135 +00:00'
    ]
  }
]
[2023-05-31T14:37:23.294] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:23.362] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:37:23.393] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19DarHVGirEYSLkmjuHWKZLuXDfu7HouKBxPWiuqzCrLdfTJ32ZIUsc' AND "Token"."expiresAt" >= '2023-05-31 19:37:23.387 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19DarHVGirEYSLkmjuHWKZLuXDfu7HouKBxPWiuqzCrLdfTJ32ZIUsc' AND "Token"."expiresAt" >= '2023-05-31 19:37:23.387 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:37:23.487] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:37:23.596] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'^iHoY<}q*a|Mqd*M`5mv\' AND "Token"."expiresAt" >= \'2023-05-31 19:37:23.595 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \'^iHoY<}q*a|Mqd*M`5mv\' AND "Token"."expiresAt" >= \'2023-05-31 19:37:23.595 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:38:53.875] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:38:53.957] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:39:58.233] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:39:58.312] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:11.761] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:15.095] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:15.107] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:15.168] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:15.281] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:15.455] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:15.509] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:15.537] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:15.541] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:40:16.822] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Frederick93',
      'BEP5MU3n2AYj9A0',
      'Jody Goyette',
      '2023-05-31 19:40:15.595 +00:00',
      '2023-05-31 19:40:15.595 +00:00'
    ]
  }
]
[2023-05-31T14:40:16.942] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19PwDXaqSdIUM3wErGE8MUMLy2M6qBw4CD+9X7WsF7GyU+n4ejTXeSH',
      'U2FsdGVkX19+nc0GE/n2cEZ6O/O1SKlqA2lCyxqYbdPMMw2G7kK9BjsAdUBRbwBnXacvcEOVcEvsdP7R8hI4J1NgPpBTyy+fJb9NN2p83FKHjmQeX92rKuCkox1st1QAX3i2AhK0WFXdlgdlQPywLrdMf+pPbgp5XR5eumi3SatXGMvuIFfFXhLnXdoPUfFa',
      '07wv/v32Ln',
      'iyxLkwHrnHU6dWW7F18O',
      '2023-05-31 20:40:16.930 +00:00',
      '2787fac4-5ac3-4688-9197-ae67e669fdbb',
      '2023-05-31 19:40:16.941 +00:00',
      '2023-05-31 19:40:16.941 +00:00'
    ]
  }
]
[2023-05-31T14:40:17.114] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:17.310] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:17.538] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19PwDXaqSdIUM3wErGE8MUMLy2M6qBw4CD+9X7WsF7GyU+n4ejTXeSH' AND "Token"."expiresAt" >= '2023-05-31 19:40:17.531 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19PwDXaqSdIUM3wErGE8MUMLy2M6qBw4CD+9X7WsF7GyU+n4ejTXeSH' AND "Token"."expiresAt" >= '2023-05-31 19:40:17.531 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:40:17.653] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:17.758] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'D\\D,ui|S}J>B%s8AF\\+P' AND "Token"."expiresAt" >= '2023-05-31 19:40:17.757 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'D\\D,ui|S}J>B%s8AF\\+P' AND "Token"."expiresAt" >= '2023-05-31 19:40:17.757 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:40:19.922] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:51.588] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:51.678] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:51.852] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:51.942] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:52.036] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:52.156] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:52.259] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:54.372] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:54.818] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:54.898] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:54.999] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:55.011] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:55.071] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:55.083] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:55.087] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:55.088] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:55.161] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:55.172] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:55.294] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:55.387] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:55.487] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:55.577] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:55.667] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake%3C') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake%3C')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:57.267] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:57.289] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:40:57.313] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Luna67',
      'GJBQXeOCBxXSmaX',
      'Camille Gulgowski',
      '2023-05-31 19:40:55.190 +00:00',
      '2023-05-31 19:40:55.190 +00:00'
    ]
  }
]
[2023-05-31T14:40:57.414] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18l4vtTTOAA8uiW7N+laTth1n2wItD7dolOnuSROTMlnyzLnOOsFWnV',
      'U2FsdGVkX18ZwH3Kr/5sXZuV20qr7ZCr2eU9FG5iBsxwYuuoA/lhbLfe3UwuXh0Px9qDUqGK3KoO+4qCAq4oAVNtj8MrP7O41MR4HjxWzgb3HQ5MORMSvDeFIxlnRkX4CN9W72PTi9ZIyfs1Bv20ttYm0KG4CGU0T2NYkAGuqsYCEhDFzMBw64Abfwv788Tp',
      'dQIass0efM',
      '7L1xPeo1pKWJsc4dPEYb',
      '2023-05-31 20:40:57.406 +00:00',
      '148c8fa0-6149-456d-b3cd-43cb75edec24',
      '2023-05-31 19:40:57.413 +00:00',
      '2023-05-31 19:40:57.413 +00:00'
    ]
  }
]
[2023-05-31T14:40:57.577] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:40:57.685] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18l4vtTTOAA8uiW7N+laTth1n2wItD7dolOnuSROTMlnyzLnOOsFWnV' AND "Token"."expiresAt" >= '2023-05-31 19:40:57.680 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18l4vtTTOAA8uiW7N+laTth1n2wItD7dolOnuSROTMlnyzLnOOsFWnV' AND "Token"."expiresAt" >= '2023-05-31 19:40:57.680 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:40:57.777] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:40:57.885] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '#s(s90W$)4qu=l_(\\G)"' AND "Token"."expiresAt" >= '2023-05-31 19:40:57.883 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '#s(s90W$)4qu=l_(\\G)"' AND "Token"."expiresAt" >= '2023-05-31 19:40:57.883 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T14:43:08.087] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:43:08.397] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:43:25.505] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:43:25.588] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:43:32.419] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:43:32.508] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:43:45.233] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:43:45.339] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:45:51.030] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:45:51.124] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:55:00.841] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:55:00.922] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:51.586] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:54.427] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:54.588] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:54.673] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:54.831] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:58:55.011] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:55.220] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:55.282] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:55.380] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:55.613] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:58:56.167] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T14:58:56.632] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Alexanne.Wuckert',
      'uDTbE4K3_z1Yi5U',
      'Billie Morissette',
      '2023-05-31 19:58:55.702 +00:00',
      '2023-05-31 19:58:55.702 +00:00'
    ]
  }
]
[2023-05-31T14:58:56.630] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T14:58:56.738] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19uNfbZL8OlKWAXAzJoZzWKBDws+xpRfaIrELwzHliKrTjUBhYNYUtF',
      'U2FsdGVkX18RuuInTJAjss678MaS1W/AzTCGPfxKE+wAbUg+W1d5FPVqtuMPx57R6c/OHBiLi8xwaAMAvLvG4I2g8p7qSxLCndF8qzzViZZiS+9NkD1i05DhZO1eCr16hFkJRd76Ag2fSsPMC2NRRzFlOKhFacFKACJCI6ndbd+pXIan2g8E/jSXno3ftdU/',
      'v!h:#I/i#0',
      'WQPLUDVbtUxjQIQpUFxS',
      '2023-05-31 20:58:56.729 +00:00',
      '71090be1-5a88-4650-8445-5f1688a3ab46',
      '2023-05-31 19:58:56.737 +00:00',
      '2023-05-31 19:58:56.737 +00:00'
    ]
  }
]
[2023-05-31T14:58:56.895] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T14:58:57.640] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:31.228] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:34.623] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:34.640] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:34.708] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:34.889] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:35.929] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:36.019] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:36.171] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:00:36.329] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:36.409] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:36.491] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:00:36.520] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T15:00:36.603] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:00:36.694] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:00:37.797] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:00:38.491] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:01:36.157] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:01:36.237] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:02:26.035] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:02:26.119] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:03:15.600] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:03:15.684] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:05:53.929] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:05:54.023] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:09:49.109] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:09:49.193] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:09:49.331] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:09:49.409] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:10:28.965] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:10:29.045] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:10:29.178] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:21:34.873] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:21:34.967] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:21:35.973] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Ollie_Waters',
      'jZaTEMT06cbg7jU',
      'Yolanda Mitchell',
      '2023-05-31 20:21:35.058 +00:00',
      '2023-05-31 20:21:35.058 +00:00'
    ]
  }
]
[2023-05-31T15:21:36.081] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18FUguVPDt11xQb9ixHas+Tg2fsAU5lVoCSJyejnB7obEZNUntnmrlE',
      'U2FsdGVkX1/jFBy0CqDa5FDgQuaW0yoJt0FTQ0Kzq+FiRDkRTvUrd7hX6JXL7g5zJet3ORmLjrfixmP6BYmItTjp9jX9xAN0OB+Zc2CJxKsodeApov1hb06lKmcVz711ae0pjKhiWf81HrZmRC9CkHsc/J6JOgA+LuoZhogVs6ZPgwfrqhMMmlOcnG4zIcyb',
      '"DM3^RZY=(',
      '3NWMyh8n9tyV6qbBy9iR',
      '2023-05-31 21:21:36.072 +00:00',
      '70cf35ca-4d82-460f-aa92-0f1c992939f8',
      '2023-05-31 20:21:36.079 +00:00',
      '2023-05-31 20:21:36.079 +00:00'
    ]
  }
]
[2023-05-31T15:21:36.231] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:21:36.333] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18FUguVPDt11xQb9ixHas+Tg2fsAU5lVoCSJyejnB7obEZNUntnmrlE' AND "Token"."expiresAt" >= '2023-05-31 20:21:36.325 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18FUguVPDt11xQb9ixHas+Tg2fsAU5lVoCSJyejnB7obEZNUntnmrlE' AND "Token"."expiresAt" >= '2023-05-31 20:21:36.325 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:22:38.028] [DEBUG] debug - [
  `Executing (default): DELETE FROM "token" WHERE "id" = '2418ac8f-5b09-4dea-b91d-b44ac6e3f084' AND "userId" = '70cf35ca-4d82-460f-aa92-0f1c992939f8'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: Token
  }
]
[2023-05-31T15:22:38.128] [DEBUG] debug - [
  `Executing (default): DELETE FROM "user" WHERE "id" = '70cf35ca-4d82-460f-aa92-0f1c992939f8'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: User
  }
]
[2023-05-31T15:22:58.650] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:22:58.740] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:22:59.767] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Darien.Little',
      '_MVRbmU93YTPJ7F',
      'Jerald Bartell-Schuppe',
      '2023-05-31 20:22:58.835 +00:00',
      '2023-05-31 20:22:58.835 +00:00'
    ]
  }
]
[2023-05-31T15:22:59.878] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/5MUNkfvotTl9DlBOLJhd+rJPKvmmeCmLvu+QB0RWGoPCht/z7jsyl',
      'U2FsdGVkX18Ykjky35uPewyQF9vTeSlcgw+BLzMjcD1J+gS6Su+JNWDOlZ+hPr7HbwDSaA1lqi4riv/dGnR1C8zzcXfdFFzgmXZf5WLH10sTyrv9afWTsRMp09IiDYeHKZbngB9HeFTXiekBx5m11ksAS26MIy4VABP8+VdqYDB9/oy0155fa8EO+ITeIVTA',
      'H2@MO?6h^&',
      'Pakrv7PXEyDy5PoAb6ZH',
      '2023-05-31 21:22:59.870 +00:00',
      'bd24d0ac-193f-4c03-977f-f9b4b64f73d4',
      '2023-05-31 20:22:59.877 +00:00',
      '2023-05-31 20:22:59.877 +00:00'
    ]
  }
]
[2023-05-31T15:23:00.029] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:23:01.348] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/5MUNkfvotTl9DlBOLJhd+rJPKvmmeCmLvu+QB0RWGoPCht/z7jsyl' AND "Token"."expiresAt" >= '2023-05-31 20:23:01.343 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/5MUNkfvotTl9DlBOLJhd+rJPKvmmeCmLvu+QB0RWGoPCht/z7jsyl' AND "Token"."expiresAt" >= '2023-05-31 20:23:01.343 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:23:01.462] [DEBUG] debug - [
  `Executing (default): DELETE FROM "token" WHERE "id" = 'f17ad4de-95ff-418e-a6ee-c9fd6b85f9de' AND "userId" = 'bd24d0ac-193f-4c03-977f-f9b4b64f73d4'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: Token
  }
]
[2023-05-31T15:23:01.571] [DEBUG] debug - [
  `Executing (default): DELETE FROM "user" WHERE "id" = 'bd24d0ac-193f-4c03-977f-f9b4b64f73d4'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: User
  }
]
[2023-05-31T15:23:18.696] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:23:19.096] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:23:20.084] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Danyka55',
      'sxCmL7H_YAk2mr9',
      'Jaime Kub',
      '2023-05-31 20:23:19.187 +00:00',
      '2023-05-31 20:23:19.187 +00:00'
    ]
  }
]
[2023-05-31T15:23:20.216] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/J39oSWWLR2i1RTBY2tlRl7I4cgH2xOV31x8/bSw/pu6N/98Ct2Zzw',
      'U2FsdGVkX18VkDx/c+Al15p7Ch2z1MoOFP2FO+OA1AeRWhn6h11ebifJgaPvckeNyhQem6F449foktOmYd+biWGgq8PumQwUWxhOzNRBbjrXGf8fvw+d13wUl3AeOU0bQMeBUl8g8PHLSAdN7WQB8Bh5ItajvKI1qHL4Ilhk/iEeNuFNCZTc3thQ0IwLivK6',
      "?cw)}ko'j/",
      'nKjbPmu8QeXTTKaZgE8v',
      '2023-05-31 21:23:20.204 +00:00',
      'ef5f0eb3-bbe3-4906-bdff-1a7cfba451eb',
      '2023-05-31 20:23:20.215 +00:00',
      '2023-05-31 20:23:20.215 +00:00'
    ]
  }
]
[2023-05-31T15:23:20.367] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:23:59.282] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:23:59.364] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:24:00.317] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Taylor.Funk85',
      'VR2ZcjLcd1uxvwo',
      'Joseph Bahringer-Purdy',
      '2023-05-31 20:23:59.456 +00:00',
      '2023-05-31 20:23:59.456 +00:00'
    ]
  }
]
[2023-05-31T15:24:00.427] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+eNODPJO6TYsWrYSHDCfHi/47jXE255r14VE7gW4l5zfUmdJij+VZA',
      'U2FsdGVkX18f8Gj6FSxtRQgQDIOQib2uuzLR/Jmn8UHXCiLt+heuMPqqhvPaWCKBDiuqm/aqVEOFz/A+6jKXeF0qRj8YNxoJqfZ20vXfv1a2fPC+jlMOoiqIC0YmO6Cif0ollkog0L16167e01ish2BIWrbwGNTrWW3P6QUTm1JDTGFNtT6gpMndQapiM1EM',
      'O0FN[5,P_B',
      'seS8JgOy7f0RDshzZ89e',
      '2023-05-31 21:24:00.414 +00:00',
      '1ac25002-2891-407b-9824-17fc84b5eb47',
      '2023-05-31 20:24:00.425 +00:00',
      '2023-05-31 20:24:00.425 +00:00'
    ]
  }
]
[2023-05-31T15:24:00.600] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:24:01.016] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+eNODPJO6TYsWrYSHDCfHi/47jXE255r14VE7gW4l5zfUmdJij+VZA' AND "Token"."expiresAt" >= '2023-05-31 20:24:01.007 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+eNODPJO6TYsWrYSHDCfHi/47jXE255r14VE7gW4l5zfUmdJij+VZA' AND "Token"."expiresAt" >= '2023-05-31 20:24:01.007 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:24:37.112] [DEBUG] debug - [
  `Executing (default): DELETE FROM "token" WHERE "id" = 'c66a6776-4311-4771-9f22-bd463e985d7a' AND "userId" = '1ac25002-2891-407b-9824-17fc84b5eb47'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: Token
  }
]
[2023-05-31T15:24:37.219] [DEBUG] debug - [
  `Executing (default): DELETE FROM "user" WHERE "id" = '1ac25002-2891-407b-9824-17fc84b5eb47'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: User
  }
]
[2023-05-31T15:24:50.993] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:25:55.168] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:25:55.248] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:25:56.233] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Nick_Larkin31',
      '7UM3e94VakZHoz4',
      'Dr. Felipe Padberg',
      '2023-05-31 20:25:55.338 +00:00',
      '2023-05-31 20:25:55.338 +00:00'
    ]
  }
]
[2023-05-31T15:25:56.360] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19kLyU4PNb8NBgKswl0y6HKlhNSOlKCEucoAk2AO6S9Ac9EIqB88R01',
      'U2FsdGVkX1/2Jty7Jb06P3G+31M7k41K4S6649aHjoEfA0MFTxtgF61spcn9vyzEzfFNfZ1EkNS5FqRLfNVD9wNED9QhZiblSXMVf/36yXChSArJegLVkbNxBE8SbSwbVrYQhAS52TGXfe91w7EZRYjLX0JrOpwvxiTCglACWuuBNWDgNiifJcdFn2W6V9IM',
      '%NgaSf0Z!-',
      '8zVaHHfhfblijMkGojIo',
      '2023-05-31 21:25:56.348 +00:00',
      '4438ac40-6258-4552-8c14-1eb4dd803f88',
      '2023-05-31 20:25:56.359 +00:00',
      '2023-05-31 20:25:56.359 +00:00'
    ]
  }
]
[2023-05-31T15:25:56.510] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:25:56.603] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19kLyU4PNb8NBgKswl0y6HKlhNSOlKCEucoAk2AO6S9Ac9EIqB88R01' AND "Token"."expiresAt" >= '2023-05-31 20:25:56.599 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19kLyU4PNb8NBgKswl0y6HKlhNSOlKCEucoAk2AO6S9Ac9EIqB88R01' AND "Token"."expiresAt" >= '2023-05-31 20:25:56.599 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:25:56.714] [DEBUG] debug - [
  `Executing (default): DELETE FROM "token" WHERE "id" = '4b99db07-e3b5-49e7-bcd5-79625b763e9a' AND "userId" = '4438ac40-6258-4552-8c14-1eb4dd803f88'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: Token
  }
]
[2023-05-31T15:25:56.810] [DEBUG] debug - [
  `Executing (default): DELETE FROM "user" WHERE "id" = '4438ac40-6258-4552-8c14-1eb4dd803f88'`,
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    type: 'DELETE',
    limit: null,
    hooks: true,
    force: true,
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    },
    model: User
  }
]
[2023-05-31T15:26:52.991] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:53.084] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:53.259] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:53.346] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:53.433] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:53.561] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:53.662] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:56.359] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:56.735] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:56.837] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:56.840] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:56.857] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:57.056] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:57.067] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.135] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.255] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.311] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:57.407] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.410] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:57.493] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:57.533] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.630] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.719] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.816] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:57.913] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakea') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakea')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:58.044] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Napoleon94',
      'S25LsUus12KAhcN',
      'Preston Nader',
      '2023-05-31 20:26:57.163 +00:00',
      '2023-05-31 20:26:57.163 +00:00'
    ]
  }
]
[2023-05-31T15:26:58.171] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18WrdTd4KZcNew5m7sEWTC0U4XCApoUY/HX39Ipn5o8cIw093Plz6SQ',
      'U2FsdGVkX1+4dCfXcUNsqmXx7557enzQAorkAJ+fJRUf3/2FXNPtyg70OVa+0TwEzxfVPJb/7zobOYGGIySG7jJI4LVC1WYLF9MffwVj4Yu/gH5xOkFHw87bHKZ9/BoW5pJUxNDwN+0CHmYy4aAZUaVxOxf+8Yw6am9zVrodk0R0MOdpVG3nM6mhSc/4VVXC',
      'NB+NDF]pui',
      'vKwbEhK5P7tzatpW9XOC',
      '2023-05-31 21:26:58.158 +00:00',
      '6430a669-1870-496d-a3da-474a2aa1cd53',
      '2023-05-31 20:26:58.169 +00:00',
      '2023-05-31 20:26:58.169 +00:00'
    ]
  }
]
[2023-05-31T15:26:58.347] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:59.027] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:26:59.070] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18WrdTd4KZcNew5m7sEWTC0U4XCApoUY/HX39Ipn5o8cIw093Plz6SQ' AND "Token"."expiresAt" >= '2023-05-31 20:26:59.064 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18WrdTd4KZcNew5m7sEWTC0U4XCApoUY/HX39Ipn5o8cIw093Plz6SQ' AND "Token"."expiresAt" >= '2023-05-31 20:26:59.064 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:26:59.164] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:26:59.273] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18WrdTd4KZcNew5m7sEWTC0U4XCApoUY/HX39Ipn5o8cIw093Plz6SQ' AND "Token"."expiresAt" >= '2023-05-31 20:26:59.271 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18WrdTd4KZcNew5m7sEWTC0U4XCApoUY/HX39Ipn5o8cIw093Plz6SQ' AND "Token"."expiresAt" >= '2023-05-31 20:26:59.271 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:26:59.371] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Ja:[B1_PLUhaP:$@xAj]' AND "Token"."expiresAt" >= '2023-05-31 20:26:59.370 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Ja:[B1_PLUhaP:$@xAj]' AND "Token"."expiresAt" >= '2023-05-31 20:26:59.370 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:26:59.695] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T15:28:16.084] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:16.165] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:16.333] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:16.420] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:16.506] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:16.612] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:16.706] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:19.463] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:19.500] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:19.597] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:19.604] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:20.314] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:20.766] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:20.858] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:20.940] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:20.938] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:21.103] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:21.193] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:21.335] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:21.450] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:21.539] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:21.626] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:21.713] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:21.821] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake;') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake;')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:21.903] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Noble_Hintz',
      'w_QUjgcqvGAvWcJ',
      'Charlie Schamberger',
      '2023-05-31 20:28:20.411 +00:00',
      '2023-05-31 20:28:20.411 +00:00'
    ]
  }
]
[2023-05-31T15:28:22.017] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX192Y6J/eXjs9S72DKPBaG3hRf/wlJFyWjk9o2272G6UIxfHQazH11Kb',
      'U2FsdGVkX18KOT4c7/ayMQcXjqXI92J+RDMOqkD9+X2li7X77aGFW4thYeMrg/Gx6gyLt+yuBaeiUzh5StI5IAAa6JrFeJSZFVToZv3yxTdEz2HArKYQ0Ha9fCv0qCaFMleRT71JEwEpjqOQslQKWIrAQyxJ/fKf6ydhSVyy6qxh/ScpYJosJ/ZevcPtJjQ6',
      'VwVo2*u)dB',
      '0AB6v2kTKVwlSdKdnETk',
      '2023-05-31 21:28:22.010 +00:00',
      'e164945f-e504-4ff7-a819-dcd130ce8a2d',
      '2023-05-31 20:28:22.016 +00:00',
      '2023-05-31 20:28:22.016 +00:00'
    ]
  }
]
[2023-05-31T15:28:22.092] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T15:28:22.187] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:22.247] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:28:22.300] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX192Y6J/eXjs9S72DKPBaG3hRf/wlJFyWjk9o2272G6UIxfHQazH11Kb' AND "Token"."expiresAt" >= '2023-05-31 20:28:22.292 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX192Y6J/eXjs9S72DKPBaG3hRf/wlJFyWjk9o2272G6UIxfHQazH11Kb' AND "Token"."expiresAt" >= '2023-05-31 20:28:22.292 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:28:22.394] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:28:22.528] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX192Y6J/eXjs9S72DKPBaG3hRf/wlJFyWjk9o2272G6UIxfHQazH11Kb' AND "Token"."expiresAt" >= '2023-05-31 20:28:22.526 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX192Y6J/eXjs9S72DKPBaG3hRf/wlJFyWjk9o2272G6UIxfHQazH11Kb' AND "Token"."expiresAt" >= '2023-05-31 20:28:22.526 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:28:22.622] [DEBUG] debug - [
  'Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \':P|tXNcIy|8A@V(R`v7q\' AND "Token"."expiresAt" >= \'2023-05-31 20:28:22.621 +00:00\')) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = \':P|tXNcIy|8A@V(R`v7q\' AND "Token"."expiresAt" >= \'2023-05-31 20:28:22.621 +00:00\'))',
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:28:22.778] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:47:43.241] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:47:43.319] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:47:43.453] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:23.279] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:23.357] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:23.493] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:35.865] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:35.954] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:36.128] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:36.215] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:36.306] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:36.414] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:36.501] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.236] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.291] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.291] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.313] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.328] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.369] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.367] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.413] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.457] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.543] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.550] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.578] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.647] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:39.660] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.764] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.851] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:39.933] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:40.023] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake2') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake2')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:40.363] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Bethany.Abbott',
      '1m_3q041Rv4GEQK',
      'Ashley Hodkiewicz',
      '2023-05-31 20:48:39.465 +00:00',
      '2023-05-31 20:48:39.465 +00:00'
    ]
  }
]
[2023-05-31T15:48:40.495] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19Nh8PB1XC6IPsgaoP1ddWpipBeb2Ou0tw9NWES2h4x7rGnATlRWRz4',
      'U2FsdGVkX1+VmMe+2eTQMpr22oKAXeMendYysdZ+vCnww/F7NEjvYyHZHlAbAwFvP/0YCqyO43IPvGZkzUW4qZ4H1CFgfS/kK9z1Z4LRLlV+iCtnDPDMYLqUA+PqRv5hDLTJ7gFtKPQcgOHGN1aS3ROpEfS346K4wY8ikptwyYnmo+QGopbjuuBtcKDRhGVL',
      ';)fY\\w5Om6',
      'oG76JZmUZuXvFZlSsDrX',
      '2023-05-31 21:48:40.483 +00:00',
      '4f7f7a02-59a6-48f5-8fe5-93d06e98998f',
      '2023-05-31 20:48:40.494 +00:00',
      '2023-05-31 20:48:40.494 +00:00'
    ]
  }
]
[2023-05-31T15:48:40.670] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:48:40.762] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19Nh8PB1XC6IPsgaoP1ddWpipBeb2Ou0tw9NWES2h4x7rGnATlRWRz4' AND "Token"."expiresAt" >= '2023-05-31 20:48:40.756 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19Nh8PB1XC6IPsgaoP1ddWpipBeb2Ou0tw9NWES2h4x7rGnATlRWRz4' AND "Token"."expiresAt" >= '2023-05-31 20:48:40.756 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:48:40.850] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:48:40.961] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19Nh8PB1XC6IPsgaoP1ddWpipBeb2Ou0tw9NWES2h4x7rGnATlRWRz4' AND "Token"."expiresAt" >= '2023-05-31 20:48:40.959 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19Nh8PB1XC6IPsgaoP1ddWpipBeb2Ou0tw9NWES2h4x7rGnATlRWRz4' AND "Token"."expiresAt" >= '2023-05-31 20:48:40.959 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:48:41.064] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'bf.N(9OD?)@TyyebscI6' AND "Token"."expiresAt" >= '2023-05-31 20:48:41.062 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'bf.N(9OD?)@TyyebscI6' AND "Token"."expiresAt" >= '2023-05-31 20:48:41.062 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T15:48:41.408] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T15:48:42.062] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:51:00.413] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:51:00.491] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T15:51:00.643] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T15:51:00.728] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:06:10.381] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:06:10.471] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:06:10.624] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:06:10.714] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:07:00.681] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:07:00.773] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:07:00.921] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:07:01.015] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:09:58.685] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:09:58.778] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:09:58.927] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:09:59.015] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:13:37.514] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:13:38.242] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:13:38.377] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:13:38.472] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:13:48.928] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:13:49.005] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:13:49.140] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:13:49.219] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:05.371] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:05.449] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:15:05.623] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:05.715] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:05.806] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:15:21.422] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:21.499] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:15:21.634] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:21.720] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:21.810] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:15:21.919] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:15:22.008] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:15:58.549] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:58.643] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:15:58.792] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:58.885] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:15:58.974] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:16:29.707] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:16:29.795] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:16:29.950] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:16:30.042] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:16:30.126] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:18:01.010] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:18:01.099] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:18:01.260] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:18:01.347] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:18:01.438] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:18:25.014] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:18:25.419] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:18:25.582] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:18:25.675] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:18:25.762] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:21:04.896] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:21:04.990] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:21:05.164] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:21:05.252] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:21:05.337] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:23:48.372] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:23:48.454] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:23:48.597] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:23:48.679] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:23:48.763] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:23:48.862] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:23:48.959] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:39.076] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:40.457] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:40.679] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:40.779] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:40.858] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:40.979] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:41.064] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:43.866] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:43.889] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:43.951] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:43.965] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:45.819] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:46.205] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:46.227] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:46.408] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:46.473] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:46.560] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:46.641] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:46.653] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T16:29:46.651] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:46.713] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:46.752] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:46.896] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:46.998] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:47.089] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:47.186] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:47.200] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Geraldine.Pouros27',
      'MyXVs9KQMKR2LqR',
      'Gail Schneider MD',
      '2023-05-31 21:29:46.310 +00:00',
      '2023-05-31 21:29:46.310 +00:00'
    ]
  }
]
[2023-05-31T16:29:47.280] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake%22') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake%22')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:47.294] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18I6YGQBjg0cDwG2qBO4B2gAskEaZyuVvgz5uZPNtV1FZ1FqLI5CVHd',
      'U2FsdGVkX18zfBIHgSl7Zfq+vp8s7B9EL4IjtOQhm8Ek7FzkMOPgRVI1WtNzTl/ugNxSWHEuIgTOFkuo8e8UoXu5lmPG5+jMmFiFZuq5oTN2mz+Epj11gNRYP5Pm/rZuaJYcyf5LBhKG5y4S7nz/PF/eA6oyRdPL6ZorGnyVIxQd+1Q+pxmHxe3XnrW2jbgA',
      '3D*GR_Tx^+',
      'X184Gw7mm1iq8bCkEGLf',
      '2023-05-31 22:29:47.286 +00:00',
      '2a39f1c0-c4d6-4ff5-ba97-af8118dd50af',
      '2023-05-31 21:29:47.293 +00:00',
      '2023-05-31 21:29:47.293 +00:00'
    ]
  }
]
[2023-05-31T16:29:47.449] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:29:57.181] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18I6YGQBjg0cDwG2qBO4B2gAskEaZyuVvgz5uZPNtV1FZ1FqLI5CVHd' AND "Token"."expiresAt" >= '2023-05-31 21:29:57.175 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18I6YGQBjg0cDwG2qBO4B2gAskEaZyuVvgz5uZPNtV1FZ1FqLI5CVHd' AND "Token"."expiresAt" >= '2023-05-31 21:29:57.175 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:29:57.264] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:29:57.374] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18I6YGQBjg0cDwG2qBO4B2gAskEaZyuVvgz5uZPNtV1FZ1FqLI5CVHd' AND "Token"."expiresAt" >= '2023-05-31 21:29:57.373 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18I6YGQBjg0cDwG2qBO4B2gAskEaZyuVvgz5uZPNtV1FZ1FqLI5CVHd' AND "Token"."expiresAt" >= '2023-05-31 21:29:57.373 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:29:57.461] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = ';Y[haQxEV0+#5sIi_BLC' AND "Token"."expiresAt" >= '2023-05-31 21:29:57.460 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = ';Y[haQxEV0+#5sIi_BLC' AND "Token"."expiresAt" >= '2023-05-31 21:29:57.460 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:36:42.035] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:36:42.121] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:36:42.264] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:36:42.346] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:36:42.429] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:37:50.702] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:37:50.785] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:37:50.923] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:37:51.002] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:37:51.091] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:07.813] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:07.818] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:07.891] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:07.900] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.011] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:08.049] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:08.072] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:08.094] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.114] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:08.133] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:08.149] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.188] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:08.282] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.365] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.458] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.550] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.642] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'faken') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'faken')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.705] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:08.788] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:08.966] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:09.017] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Issac_Auer',
      'fqloZNQuyEAIc0K',
      'Tyrone McCullough',
      '2023-05-31 21:38:08.179 +00:00',
      '2023-05-31 21:38:08.179 +00:00'
    ]
  }
]
[2023-05-31T16:38:09.046] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:09.121] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX18UqXl/uBj/Pf0ypw8Ity4S0LuF7Xq/7a393iu9geUNPJg7sCC/dxq9',
      'U2FsdGVkX1+5OE3+G5kmVGJtkR/uDPC6kxgmCLcG0U61Q6V//s3iDtTNXwDtg4u8S4ebS7kn6RpK3qY0iNTf96pvPZr7+z0eGz0fE1Lf7YL7JM30zlwTOBGqvlR3DjdjTHW1R3/tzJRZLIDgRK1nJ93m006RCIAF4z1VFcsYfwei3Y6Az+7XWdHI5iqAxzp4',
      "{,Hse2+M'0",
      '8RIGhJxyj8p4ZKw8VkmY',
      '2023-05-31 22:38:09.111 +00:00',
      'b00a1db9-87e2-4c3f-9546-bb1c5600bb8f',
      '2023-05-31 21:38:09.120 +00:00',
      '2023-05-31 21:38:09.120 +00:00'
    ]
  }
]
[2023-05-31T16:38:09.141] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:09.249] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:09.294] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:09.359] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:09.388] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18UqXl/uBj/Pf0ypw8Ity4S0LuF7Xq/7a393iu9geUNPJg7sCC/dxq9' AND "Token"."expiresAt" >= '2023-05-31 21:38:09.380 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18UqXl/uBj/Pf0ypw8Ity4S0LuF7Xq/7a393iu9geUNPJg7sCC/dxq9' AND "Token"."expiresAt" >= '2023-05-31 21:38:09.380 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:38:09.473] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:38:09.574] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18UqXl/uBj/Pf0ypw8Ity4S0LuF7Xq/7a393iu9geUNPJg7sCC/dxq9' AND "Token"."expiresAt" >= '2023-05-31 21:38:09.572 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX18UqXl/uBj/Pf0ypw8Ity4S0LuF7Xq/7a393iu9geUNPJg7sCC/dxq9' AND "Token"."expiresAt" >= '2023-05-31 21:38:09.572 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:38:09.658] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '9''kjZg"^!IF&ixq%_QW6' AND "Token"."expiresAt" >= '2023-05-31 21:38:09.656 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '9''kjZg"^!IF&ixq%_QW6' AND "Token"."expiresAt" >= '2023-05-31 21:38:09.656 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:38:10.274] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T16:38:10.349] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:38:10.815] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:03.398] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.479] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.487] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:03.553] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.563] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:03.636] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:03.648] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.690] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.723] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.735] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.767] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:03.805] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:03.922] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:04.026] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:04.118] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:04.212] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:04.315] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:04.641] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Jazlyn.Reinger',
      's8Dr3ep3dbRm7uF',
      'Lorena Schmitt',
      '2023-05-31 21:40:03.727 +00:00',
      '2023-05-31 21:40:03.727 +00:00'
    ]
  }
]
[2023-05-31T16:40:04.745] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1+SO1uGkj0KaYTSlue2ad/ZrFKMkgzQ7Yy7B5nN9ICYqd/veDcHIe/z',
      'U2FsdGVkX1/F4dF8WFHAegweHqu0vcVYK/7/AzXLhs2BSD8DriVc8Po/Xc1iD5EnbNRSvkGNBWAMVPPNNarRGineccaluQNeqL6IzqxhZzjae1/f2VaQN4c7iNKN6DcQaZvMd0EFfynlTPrANYBWVYqPwko0o4s66UqCkx6lazdODz7D77Nu4+5DKJv4ZxL3',
      '-V3bVdx3fv',
      'kwz5kFdGJoLMdezJ79Cl',
      '2023-05-31 22:40:04.734 +00:00',
      '7d7000bc-7417-4998-bd32-7f5e3ccfe21f',
      '2023-05-31 21:40:04.744 +00:00',
      '2023-05-31 21:40:04.744 +00:00'
    ]
  }
]
[2023-05-31T16:40:04.915] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:05.037] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+SO1uGkj0KaYTSlue2ad/ZrFKMkgzQ7Yy7B5nN9ICYqd/veDcHIe/z' AND "Token"."expiresAt" >= '2023-05-31 21:40:05.030 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+SO1uGkj0KaYTSlue2ad/ZrFKMkgzQ7Yy7B5nN9ICYqd/veDcHIe/z' AND "Token"."expiresAt" >= '2023-05-31 21:40:05.030 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:40:05.130] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:05.246] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+SO1uGkj0KaYTSlue2ad/ZrFKMkgzQ7Yy7B5nN9ICYqd/veDcHIe/z' AND "Token"."expiresAt" >= '2023-05-31 21:40:05.244 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1+SO1uGkj0KaYTSlue2ad/ZrFKMkgzQ7Yy7B5nN9ICYqd/veDcHIe/z' AND "Token"."expiresAt" >= '2023-05-31 21:40:05.244 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:40:05.233] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:05.316] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:05.344] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '<6.RdIh]6/VA!s83[UKI' AND "Token"."expiresAt" >= '2023-05-31 21:40:05.342 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '<6.RdIh]6/VA!s83[UKI' AND "Token"."expiresAt" >= '2023-05-31 21:40:05.342 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:40:05.468] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:05.557] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:40:05.671] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:05.787] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:05.892] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:05.982] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T16:40:06.182] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:40:06.477] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:15.744] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:15.781] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:15.788] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:15.857] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:15.871] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:15.956] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:16.118] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:16.530] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:16.532] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:16.556] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:16.683] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:16.713] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:16.776] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:16.794] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:16.873] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:16.989] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:17.088] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake[') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake[')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:17.863] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:18.454] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:19.058] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T16:53:25.489] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:26.455] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Cayla.Glover',
      'DaAiUYeLlciax20',
      'Bryant Hansen',
      '2023-05-31 21:53:25.589 +00:00',
      '2023-05-31 21:53:25.589 +00:00'
    ]
  }
]
[2023-05-31T16:53:26.565] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1/+sc/XqC6I+J2vIxYh80hzp5VFEzXxpeXhCiEgF82n2501lS/s8N5j',
      'U2FsdGVkX1/90rTSIbQDlKRbbRX0/T6TqnjrSZ5DH3TVfjsfs8ZL5S+PVnD/akcn8ETTYHSVijMf0zjvY00pf7S2X62QjMtVwXfz1Ml6ju8/3dK7oF/HUoRCPQ0EDv1R6/+m42kTiLygcSV+zHjoobBVaXwIS1BwAxTaVjCsj4n1Z8vPy0Rmu4Qsb6BDLYhc',
      'C|L99Lps>\\',
      'JRiNRelG5BWNhE3mtPz1',
      '2023-05-31 22:53:26.556 +00:00',
      '9934535e-95ed-49ae-bad9-752f241ce8d9',
      '2023-05-31 21:53:26.564 +00:00',
      '2023-05-31 21:53:26.564 +00:00'
    ]
  }
]
[2023-05-31T16:53:26.716] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:27.148] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/+sc/XqC6I+J2vIxYh80hzp5VFEzXxpeXhCiEgF82n2501lS/s8N5j' AND "Token"."expiresAt" >= '2023-05-31 21:53:27.142 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/+sc/XqC6I+J2vIxYh80hzp5VFEzXxpeXhCiEgF82n2501lS/s8N5j' AND "Token"."expiresAt" >= '2023-05-31 21:53:27.142 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:53:27.243] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:27.350] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/+sc/XqC6I+J2vIxYh80hzp5VFEzXxpeXhCiEgF82n2501lS/s8N5j' AND "Token"."expiresAt" >= '2023-05-31 21:53:27.349 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1/+sc/XqC6I+J2vIxYh80hzp5VFEzXxpeXhCiEgF82n2501lS/s8N5j' AND "Token"."expiresAt" >= '2023-05-31 21:53:27.349 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:53:27.448] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '?,zRjIE0S_zPY,6Ps=WU' AND "Token"."expiresAt" >= '2023-05-31 21:53:27.447 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '?,zRjIE0S_zPY,6Ps=WU' AND "Token"."expiresAt" >= '2023-05-31 21:53:27.447 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:53:49.130] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:49.203] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:49.367] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:49.458] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:49.543] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:49.647] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:49.740] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:52.403] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:52.564] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:52.566] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:52.634] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:52.646] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:52.746] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:52.844] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:52.973] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:53.007] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:53.091] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:53.151] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:53.245] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:53.375] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:53.470] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:53.573] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:53.663] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:53.761] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeN') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeN')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:53.780] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Ophelia88',
      '9rw7SNTjg61Ypr7',
      'Darla Konopelski',
      '2023-05-31 21:53:52.862 +00:00',
      '2023-05-31 21:53:52.862 +00:00'
    ]
  }
]
[2023-05-31T16:53:53.893] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX193I2YSOwvtDrVbq6JaeUbZN+U59f4z2Rv0wxMLKtiIIZAuAUcwrFuT',
      'U2FsdGVkX18qk9WDMob/lE28WfQAOWaNzuhwufxS12W6D+yxdTz3Atfaaey942w+Yk1dqmgHeSuFTcSKmNhcZ75axNZIVoFRHxikrG0DYoX2J8Mlq43qSU/lffv+A8np45jqiqnpcIir2Q8F4BLBsi6vypv0YDUl6eJaimUPEDfrBF+NGNojOR7NhGgzpXCb',
      'p{l18<S`G0',
      'LnRPgSP9djpqybEeqBqr',
      '2023-05-31 22:53:53.880 +00:00',
      '6873e9f5-05da-4e70-8912-ccf7ddf054bc',
      '2023-05-31 21:53:53.892 +00:00',
      '2023-05-31 21:53:53.892 +00:00'
    ]
  }
]
[2023-05-31T16:53:54.064] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:54.884] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T16:53:55.129] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:55.394] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:53:56.625] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX193I2YSOwvtDrVbq6JaeUbZN+U59f4z2Rv0wxMLKtiIIZAuAUcwrFuT' AND "Token"."expiresAt" >= '2023-05-31 21:53:56.616 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX193I2YSOwvtDrVbq6JaeUbZN+U59f4z2Rv0wxMLKtiIIZAuAUcwrFuT' AND "Token"."expiresAt" >= '2023-05-31 21:53:56.616 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:53:56.718] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:53:56.835] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX193I2YSOwvtDrVbq6JaeUbZN+U59f4z2Rv0wxMLKtiIIZAuAUcwrFuT' AND "Token"."expiresAt" >= '2023-05-31 21:53:56.833 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX193I2YSOwvtDrVbq6JaeUbZN+U59f4z2Rv0wxMLKtiIIZAuAUcwrFuT' AND "Token"."expiresAt" >= '2023-05-31 21:53:56.833 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:53:56.932] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'e):}N<*DShbZH0j/<z!K' AND "Token"."expiresAt" >= '2023-05-31 21:53:56.931 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'e):}N<*DShbZH0j/<z!K' AND "Token"."expiresAt" >= '2023-05-31 21:53:56.931 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:56:18.474] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:19.960] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:20.153] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:20.239] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:20.352] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:20.465] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:20.563] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:21.951] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.025] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.159] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.154] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.186] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.235] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.238] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.261] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.333] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.376] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.392] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.403] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.456] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.471] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:22.539] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.620] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:22.704] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake-') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake-')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:23.178] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Melyna.Stehr',
      'u2BZnUzIXPgaqGu',
      'Ebony Boyle',
      '2023-05-31 21:56:22.326 +00:00',
      '2023-05-31 21:56:22.326 +00:00'
    ]
  }
]
[2023-05-31T16:56:23.314] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19KytkNQ4KNDOCE46eZLcYVgFPOMzA1FAcBavcunBqVfBbZZtJgxM4X',
      'U2FsdGVkX19ShW+3TSzwmkW2+2Qss4RvWDTe6j91KFtDugSNdcQE9dCCx2tazTGcSaR64blDoWUnj70kAt8blH0PX7GxGPWyGbd0sLoOmUAA0k/jBO8rEJzElhsZARPnOGVn/gll3aLSo4cg4zGcC9RVXZXYH6C8kAa8CRNp3isDUltQnc3PODn96ScGrhob',
      'p/mD9ea|+{',
      'lUnUFbx1nh4MmMAiZAaX',
      '2023-05-31 22:56:23.301 +00:00',
      '0765fa32-ea49-4e84-a2c0-6b2a543b3fc8',
      '2023-05-31 21:56:23.312 +00:00',
      '2023-05-31 21:56:23.312 +00:00'
    ]
  }
]
[2023-05-31T16:56:23.492] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:56:23.933] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19KytkNQ4KNDOCE46eZLcYVgFPOMzA1FAcBavcunBqVfBbZZtJgxM4X' AND "Token"."expiresAt" >= '2023-05-31 21:56:23.925 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19KytkNQ4KNDOCE46eZLcYVgFPOMzA1FAcBavcunBqVfBbZZtJgxM4X' AND "Token"."expiresAt" >= '2023-05-31 21:56:23.925 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:56:24.012] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:24.120] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19KytkNQ4KNDOCE46eZLcYVgFPOMzA1FAcBavcunBqVfBbZZtJgxM4X' AND "Token"."expiresAt" >= '2023-05-31 21:56:24.119 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19KytkNQ4KNDOCE46eZLcYVgFPOMzA1FAcBavcunBqVfBbZZtJgxM4X' AND "Token"."expiresAt" >= '2023-05-31 21:56:24.119 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:56:24.214] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'sW\\UN)w4U[4Dctv&JKdQ' AND "Token"."expiresAt" >= '2023-05-31 21:56:24.212 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'sW\\UN)w4U[4Dctv&JKdQ' AND "Token"."expiresAt" >= '2023-05-31 21:56:24.212 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:56:24.782] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:56:24.898] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T16:56:25.055] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:23.431] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:25.949] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:26.093] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:26.172] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:26.258] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:26.369] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:26.452] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:26.530] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:26.621] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:26.656] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:26.704] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:26.907] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:27.065] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:27.147] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:27.355] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:27.622] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:27.743] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:27.825] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:27.827] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:27.915] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:27.983] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:28.006] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:28.065] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:28.100] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'faken') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'faken')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:28.329] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Ludwig59',
      'ynBlsxZHipNlO40',
      'Rolando Windler Sr.',
      '2023-05-31 21:58:27.453 +00:00',
      '2023-05-31 21:58:27.453 +00:00'
    ]
  }
]
[2023-05-31T16:58:28.433] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19HZyXX5aIy88hrhxrvIk2sgyFmkH2JsHJWo353ISRs9dpRFYADfKbP',
      'U2FsdGVkX19ywPUoJh/9Xq49GGgDJzoKPB2l0LgBjzYGa8prPLJttS3R1hCXmXd50g+jJiAWcS7TMVxhIRLVdJcMTzJnzqQjw/nfQJ4LLtxn0N2js9zB5+eadVrKYI2WSG77PbJeHsmeq6nCYop1fvOFEXlEmaQKe09K+Mz6Qtn50KqczQrUW8AWO4FoSPkD',
      'Jq,uZ.;Aw}',
      'iuV0Vc305MXc7iVbRC6u',
      '2023-05-31 22:58:28.424 +00:00',
      'e89aa4d5-03cf-415d-9a66-344cd41dac9f',
      '2023-05-31 21:58:28.432 +00:00',
      '2023-05-31 21:58:28.432 +00:00'
    ]
  }
]
[2023-05-31T16:58:28.594] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T16:58:28.707] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19HZyXX5aIy88hrhxrvIk2sgyFmkH2JsHJWo353ISRs9dpRFYADfKbP' AND "Token"."expiresAt" >= '2023-05-31 21:58:28.699 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19HZyXX5aIy88hrhxrvIk2sgyFmkH2JsHJWo353ISRs9dpRFYADfKbP' AND "Token"."expiresAt" >= '2023-05-31 21:58:28.699 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:58:28.802] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:28.930] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19HZyXX5aIy88hrhxrvIk2sgyFmkH2JsHJWo353ISRs9dpRFYADfKbP' AND "Token"."expiresAt" >= '2023-05-31 21:58:28.928 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19HZyXX5aIy88hrhxrvIk2sgyFmkH2JsHJWo353ISRs9dpRFYADfKbP' AND "Token"."expiresAt" >= '2023-05-31 21:58:28.928 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:58:29.033] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Iz6(,NU2FeRx&9#7V+A\\' AND "Token"."expiresAt" >= '2023-05-31 21:58:29.031 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'Iz6(,NU2FeRx&9#7V+A\\' AND "Token"."expiresAt" >= '2023-05-31 21:58:29.031 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T16:58:29.270] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T16:58:30.082] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T16:58:30.352] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:25.379] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:26.661] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:26.835] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:26.912] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:26.998] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:27.105] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:27.191] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:28.733] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:28.727] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:28.745] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:28.746] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:28.811] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:28.810] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:28.824] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:28.821] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:28.992] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:28.991] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:29.071] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:29.821] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Peyton.Wolf45',
      'HKHup1LHXR0KiT7',
      'Carrie Donnelly',
      '2023-05-31 22:00:28.918 +00:00',
      '2023-05-31 22:00:28.918 +00:00'
    ]
  }
]
[2023-05-31T17:00:29.920] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX1817T0MGFsdjWZv+H3hkjZQCBgBkbFscYtCb/k3C+Mfl3BkAB9HA7QH',
      'U2FsdGVkX1/Rsjl/pcWLs6yozxAkXtp/gEP60do2urn/NpJHElHVqbGQoCgPAcHJROxE5xm01yNFntazlX1Od/nG1nE9JuLsyssLTgj4FuDfYy+0cyOPv7wWiIiT+SNqRRlHYIHtVflCAXbV98FeAXl23zwoU2orYVfeg69HwuJjHIqfbPwe4c6ALY/Wc4cQ',
      'be&P}y5TU7',
      'y7YHRllnX8HePEIwoepD',
      '2023-05-31 23:00:29.906 +00:00',
      '69970321-7982-441b-a8a7-a22379722792',
      '2023-05-31 22:00:29.918 +00:00',
      '2023-05-31 22:00:29.918 +00:00'
    ]
  }
]
[2023-05-31T17:00:30.089] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:30.900] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-05-31T17:00:32.498] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-05-31T17:00:32.679] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:35.041] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1817T0MGFsdjWZv+H3hkjZQCBgBkbFscYtCb/k3C+Mfl3BkAB9HA7QH' AND "Token"."expiresAt" >= '2023-05-31 22:00:35.036 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1817T0MGFsdjWZv+H3hkjZQCBgBkbFscYtCb/k3C+Mfl3BkAB9HA7QH' AND "Token"."expiresAt" >= '2023-05-31 22:00:35.036 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T17:00:35.130] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:35.231] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1817T0MGFsdjWZv+H3hkjZQCBgBkbFscYtCb/k3C+Mfl3BkAB9HA7QH' AND "Token"."expiresAt" >= '2023-05-31 22:00:35.230 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX1817T0MGFsdjWZv+H3hkjZQCBgBkbFscYtCb/k3C+Mfl3BkAB9HA7QH' AND "Token"."expiresAt" >= '2023-05-31 22:00:35.230 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T17:00:35.316] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'ZO%O>"4(O6t1a&S/gp{M' AND "Token"."expiresAt" >= '2023-05-31 22:00:35.315 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'ZO%O>"4(O6t1a&S/gp{M' AND "Token"."expiresAt" >= '2023-05-31 22:00:35.315 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-05-31T17:00:38.744] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:38.874] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:38.965] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:39.061] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:39.149] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-05-31T17:00:39.237] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake_') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fake_')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:25.427] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:27.522] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:27.608] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:27.753] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:27.813] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:27.833] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:27.910] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:27.959] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:27.964] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.051] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.124] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:28.137] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.214] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:28.225] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.259] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:28.300] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.320] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeX') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeX')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.415] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.481] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:28.513] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.570] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.650] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:28.738] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = '127.0.0.1')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:28.821] [DEBUG] debug - [
  'Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true) LIMIT 1;',
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: '("Business"."deletedAt" IS NULL AND "Business"."isDefault" = true)',
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:29.361] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'services.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:29.635] [DEBUG] debug - [
  'Executing (default): INSERT INTO "user" ("id","username","password","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING "id","username","password","email","phone","countryPhone","name","firstName","lastName","country","language","currency","authMethod","lastLoginAt","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',         'username',
      'password',   'email',
      'phone',      'countryPhone',
      'name',       'firstName',
      'lastName',   'country',
      'language',   'currency',
      'authMethod', 'lastLoginAt',
      'createdAt',  'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: User {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: User,
    bind: [
      'Alyce.Shields86',
      '9hsQkgc5FcCnCeQ',
      'Gwen Will PhD',
      '2023-06-05 15:15:28.744 +00:00',
      '2023-06-05 15:15:28.744 +00:00'
    ]
  }
]
[2023-06-05T10:15:29.745] [DEBUG] debug - [
  'Executing (default): INSERT INTO "token" ("id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","authorizationToken","refreshToken","key","verificationKey","expiresAt","userId","tokenId","createdAt","updatedAt","deletedAt";',
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    hooks: true,
    validate: true,
    fields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    defaultFields: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    returning: true,
    hasTrigger: undefined,
    dialect: 'postgres',
    dialectModule: null,
    dialectModulePath: null,
    host: '135.148.164.28',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: 'UTC',
    standardConformingStrings: true,
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: '10.17.0',
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: false,
    attributeBehavior: 'throw',
    port: '5432',
    dialectOptions: [Object: null prototype] {
      user: 'api',
      password: 'tH22yD6yH0KG',
      port: '5432',
      host: '135.148.164.28',
      database: '0dd895ae-65f7-4060-807b-8bfae9eec79b'
    },
    type: 'INSERT',
    instance: Token {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: [Set],
      _options: [Object],
      isNewRecord: true
    },
    model: Token,
    bind: [
      'U2FsdGVkX19LTs2yGuCP49T4JbZoan9iFOd+LJFCiWnpIe5gm02k/X9I88H7REmz',
      'U2FsdGVkX19V5wgJnWpraCSRhdTvAkOJ94D/ApRN3UmR68rjh9NvdDILY9EBvIrTYNX7DLpNbgqDibM0hDtl/+ulX1dbZ5nqpiZcPyNzzThv7ErjjqkSIXsjuZhvcrvSxgko+ITVMwNOgpFqDBbWeqFojbBsFIewEnVuJi1ToMYQFwEKPH8IIn6+39uw+XIb',
      'kT)?O<#F29',
      'wUIdgq88bUvfd7LpaYr5',
      '2023-06-05 16:15:29.734 +00:00',
      '6604cace-d758-4669-b146-0ee391b283fe',
      '2023-06-05 15:15:29.743 +00:00',
      '2023-06-05 15:15:29.743 +00:00'
    ]
  }
]
[2023-06-05T10:15:29.784] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:29.911] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:15:30.005] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19LTs2yGuCP49T4JbZoan9iFOd+LJFCiWnpIe5gm02k/X9I88H7REmz' AND "Token"."expiresAt" >= '2023-06-05 15:15:29.998 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19LTs2yGuCP49T4JbZoan9iFOd+LJFCiWnpIe5gm02k/X9I88H7REmz' AND "Token"."expiresAt" >= '2023-06-05 15:15:29.998 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-06-05T10:15:30.093] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:15:30.212] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19LTs2yGuCP49T4JbZoan9iFOd+LJFCiWnpIe5gm02k/X9I88H7REmz' AND "Token"."expiresAt" >= '2023-06-05 15:15:30.209 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = 'U2FsdGVkX19LTs2yGuCP49T4JbZoan9iFOd+LJFCiWnpIe5gm02k/X9I88H7REmz' AND "Token"."expiresAt" >= '2023-06-05 15:15:30.209 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-06-05T10:15:30.279] [DEBUG] debug - [
  'Executing (default): SELECT 1+1 AS result',
  {
    plain: true,
    raw: true,
    logging: [Function: logging],
    type: 'SELECT'
  }
]
[2023-06-05T10:15:30.307] [DEBUG] debug - [
  `Executing (default): SELECT "Token"."id", "Token"."authorizationToken", "Token"."refreshToken", "Token"."key", "Token"."verificationKey", "Token"."expiresAt", "Token"."userId", "Token"."tokenId", "Token"."createdAt", "Token"."updatedAt", "Token"."deletedAt", "User"."id" AS "User.id", "User"."username" AS "User.username", "User"."password" AS "User.password", "User"."email" AS "User.email", "User"."phone" AS "User.phone", "User"."countryPhone" AS "User.countryPhone", "User"."name" AS "User.name", "User"."firstName" AS "User.firstName", "User"."lastName" AS "User.lastName", "User"."country" AS "User.country", "User"."language" AS "User.language", "User"."currency" AS "User.currency", "User"."authMethod" AS "User.authMethod", "User"."lastLoginAt" AS "User.lastLoginAt", "User"."createdAt" AS "User.createdAt", "User"."updatedAt" AS "User.updatedAt", "User"."deletedAt" AS "User.deletedAt" FROM "token" AS "Token" LEFT OUTER JOIN "user" AS "User" ON "Token"."userId" = "User"."id" AND ("User"."deletedAt" IS NULL) WHERE ("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '@"OlWPGp|)_5:e:(Xd]]' AND "Token"."expiresAt" >= '2023-06-05 15:15:30.306 +00:00')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Token"."deletedAt" IS NULL AND ("Token"."authorizationToken" = '@"OlWPGp|)_5:e:(Xd]]' AND "Token"."expiresAt" >= '2023-06-05 15:15:30.306 +00:00'))`,
    include: [ [Object] ],
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    hasJoin: true,
    model: Token,
    includeNames: [ 'User' ],
    includeMap: { User: [Object] },
    hasSingleAssociation: true,
    hasMultiAssociation: false,
    topModel: Token,
    topLimit: 1,
    hasDuplicating: undefined,
    hasRequired: false,
    hasWhere: false,
    hasIncludeWhere: false,
    hasIncludeRequired: false,
    subQuery: false,
    attributes: [
      'id',
      'authorizationToken',
      'refreshToken',
      'key',
      'verificationKey',
      'expiresAt',
      'userId',
      'tokenId',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'token', 'user' ],
    type: 'SELECT',
    keysEscaped: true
  }
]
[2023-06-05T10:17:03.317] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:17:03.400] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:17:03.555] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "domain", "draft", "isDefault", "createdAt", "updatedAt", "deletedAt" FROM "business" AS "Business" WHERE ("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("Business"."deletedAt" IS NULL AND "Business"."domain" = 'test.ingenio.com.co')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    attributes: [
      'id',        'name',
      'domain',    'draft',
      'isDefault', 'createdAt',
      'updatedAt', 'deletedAt'
    ],
    tableNames: [ 'business' ],
    type: 'SELECT',
    model: Business
  }
]
[2023-06-05T10:17:03.644] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:17:03.751] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:17:03.839] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:17:03.938] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:17:04.025] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:17:04.121] [DEBUG] debug - [
  `Executing (default): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeP') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'fakeP')`,
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:45:31.590] [DEBUG] debug - [
  'Executing (735ac8ed-228e-4e7c-b8eb-20f2130ac117): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'E81kWvGdsT68OT45BDUm', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '735ac8ed-228e-4e7c-b8eb-20f2130ac117',
      connection: [Client]
    }
  }
]
[2023-06-05T10:45:31.594] [DEBUG] debug - [
  'Executing (5b305e3b-e90f-4b8c-9ddf-f5024988c27b): START TRANSACTION;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5b305e3b-e90f-4b8c-9ddf-f5024988c27b',
      connection: [Client]
    }
  }
]
[2023-06-05T10:45:31.668] [DEBUG] debug - [
  `Executing (735ac8ed-228e-4e7c-b8eb-20f2130ac117): SELECT "id", "name", "port", "key", "createdAt", "updatedAt", "deletedAt" FROM "service" AS "AppService" WHERE ("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api') LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '735ac8ed-228e-4e7c-b8eb-20f2130ac117',
      connection: [Client]
    },
    where: `("AppService"."deletedAt" IS NULL AND "AppService"."name" = 'api')`,
    defaults: { key: 'E81kWvGdsT68OT45BDUm', name: 'api', port: 8080 },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'port',
      'key',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'service' ],
    type: 'SELECT',
    model: AppService
  }
]
[2023-06-05T10:45:31.681] [DEBUG] debug - [
  `Executing (5b305e3b-e90f-4b8c-9ddf-f5024988c27b): SELECT "id", "name", "group", "level", "description", "createdAt", "updatedAt", "deletedAt" FROM "role" AS "Role" WHERE ("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin')) LIMIT 1;`,
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5b305e3b-e90f-4b8c-9ddf-f5024988c27b',
      connection: [Client]
    },
    where: `("Role"."deletedAt" IS NULL AND ("Role"."level" = 10 AND "Role"."group" = 'admin'))`,
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    limit: 1,
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    attributes: [
      'id',
      'name',
      'group',
      'level',
      'description',
      'createdAt',
      'updatedAt',
      'deletedAt'
    ],
    tableNames: [ 'role' ],
    type: 'SELECT',
    model: Role
  }
]
[2023-06-05T10:45:31.751] [DEBUG] debug - [
  'Executing (735ac8ed-228e-4e7c-b8eb-20f2130ac117): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { name: 'api' },
    defaults: { key: 'E81kWvGdsT68OT45BDUm', name: 'api', port: 8080 },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '735ac8ed-228e-4e7c-b8eb-20f2130ac117',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
[2023-06-05T10:45:31.776] [DEBUG] debug - [
  'Executing (5b305e3b-e90f-4b8c-9ddf-f5024988c27b): COMMIT;',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    type: 'DEFERRED',
    isolationLevel: null,
    readOnly: false,
    where: { level: 10, group: 'admin' },
    defaults: {
      name: 'Administrator',
      description: 'Administrador del negocios.',
      level: 10,
      group: 'admin'
    },
    transaction: Transaction {
      sequelize: [Sequelize],
      savepoints: [],
      _afterCommitHooks: [],
      options: [Object],
      parent: undefined,
      name: undefined,
      id: '5b305e3b-e90f-4b8c-9ddf-f5024988c27b',
      connection: [Client],
      finished: 'commit'
    },
    supportsSearchPath: false,
    completesTransaction: true
  }
]
